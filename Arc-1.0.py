from kivymd.font_definitions import theme_font_styles
from kivy.animation import Animation
from kivymd.app import MDApp 
from kivy.lang import Builder 
from kivy.metrics import dp
from kivymd.uix.datatables import MDDataTable
from kivy.uix.screenmanager import ScreenManager , Screen
import sklearn
import kivymd
from kivymd.uix.label import MDLabel 
import numpy as np
import pandas as pd
import os
import warnings 
from kivymd.uix.dialog import MDDialog
from kivy.uix.image import Image
from sklearn.preprocessing import MinMaxScaler 
from sklearn.preprocessing import MaxAbsScaler
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing 
from sklearn.preprocessing import RobustScaler
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import QuantileTransformer
from sklearn.svm import NuSVC
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import PowerTransformer
from sklearn.model_selection import train_test_split
from kivy.factory import Factory
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
from kivymd.uix.selectioncontrol import MDCheckbox
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder 
from kivy.uix.button import Button
from sklearn import svm
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from kivy.uix.boxlayout import BoxLayout
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import LinearSVC
from kivymd.uix.card import MDCard
from sklearn.metrics import confusion_matrix
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.decomposition import PCA
from sklearn.preprocessing import OrdinalEncoder
from sklearn.preprocessing import OneHotEncoder 
from sklearn.metrics import accuracy_score
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report, confusion_matrix
from sklearn import metrics 
from sklearn.metrics import f1_score
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from kivy.utils import get_color_from_hex
from sklearn.preprocessing import KBinsDiscretizer
from sklearn.impute import KNNImputer
from sklearn.decomposition import IncrementalPCA
from sklearn.cluster import AgglomerativeClustering 
from sklearn.cluster import DBSCAN
from sklearn.linear_model import SGDClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import BernoulliNB
from sklearn.naive_bayes import ComplementNB
from sklearn.naive_bayes import  GaussianNB
from sklearn.linear_model import RidgeClassifier
from sklearn.svm import OneClassSVM
from sklearn.neighbors import NearestCentroid
from sklearn.feature_selection import GenericUnivariateSelect,chi2,mutual_info_classif,f_classif 
from sklearn.feature_selection import SelectPercentile 
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import VarianceThreshold
from sklearn.preprocessing import PolynomialFeatures 
from sklearn.preprocessing import LabelBinarizer
from sklearn.metrics import hamming_loss 
from sklearn.metrics import ConfusionMatrixDisplay
import missingno as msno
from kivy.config import Config
import uuid
import joblib

path1= "C:/Arc-Models"
try:
    os.makedirs(path1)
except FileExistsError:
    pass
except:
    pass
    
path2= "C:/Arc-Plots"
try:
    os.makedirs(path2)
except FileExistsError:
    pass
except:
    pass

Config.set('input', 'mouse', 'mouse,multitouch_on_demand')
#
KV = '''
#:import hex kivy.utils.get_color_from_hex
#:import F kivy.factory.Factory
<Check@MDCheckbox>:
    group: 'group'
    size_hint: None, None

<output_crd>:
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:15   
     
    GridLayout:
        cols:12
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height 
        spacing:30       
      
        MDLabel:
        
            text: ""
            font_style:"H6"
            markup: True
            size: self.texture_size
            id:output_text_heading
            color:hex("#FFFFFF")      
 
    MDCard:   
        orientation: "horizontal"
        padding:[0,5]
        size_hint: 1, None
        id:output_crd_id   
        md_bg_color:hex("#0b091b")   
        radius: [14]       
        elevation:0        
        height:output_text.height
                        
        MDCard:   
            orientation: "vertical"
            size_hint_x:0.008
            md_bg_color:hex("#808080")    
            radius: [8] 
   
        MDLabel:
            id:output_text
            text:""
            font_name:"JetBrainsMono"
            markup:True
            color:hex("#FFFFFF")
            halign:"left"
            padding: [15, 15]            
            size_hint_y:None 
            height: 2*self.padding[1] + self.texture_size[1] 
            	 
    MDLabel:        
        text: ""           
    MDLabel:        
        text: ""   	 
         	 
<output_crd_err>:
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:15   
     
    GridLayout:
        cols:12
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height 
        spacing:30       
      
        MDLabel:
        
            text: ""
            font_style:"H6"
            markup: True
            size: self.texture_size
            id:output_text_err_heading
            color:hex("#FFFFFF")      
 
    MDCard:   
        orientation: "horizontal"
        padding:[0,5]
        size_hint: 1, None
        id:output_crd_err_id   
        md_bg_color:hex("#0b091b")   
        radius: [14]       
        elevation:0        
        height:output_text_err.height
          
              
        MDCard:   
            orientation: "vertical"
            size_hint_x:0.008
            md_bg_color:hex("#808080")    
            radius: [8] 
  
 
        MDLabel:
            id:output_text_err
            text:""
            font_name:"JetBrainsMono"
            markup:True
            color:hex("#FFFFFF")
            halign:"left"
            padding: [15, 15]            
            size_hint_y:None 
            height: 2*self.padding[1] + self.texture_size[1] 
            	 
    MDLabel:        
        text: ""                           
    MDLabel:        
        text: ""   
                 	          	 
<matrix_msg_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	 
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"Missing Values"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""
    MDLabel:
    	text:""           
    MDLabel:
    	text:""
    MDLabel:
    	text:""           
    MDLabel:
    	text:""
    MDLabel:
    	text:""           
    	 	    		    	    
    MDLabel:
        text:"matrix"
        color:hex("#808080")
        font_size:30
        font_style:'H6'	    	
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:msgmatrix_vis_grd      
	    spacing:22	     
	 
	 
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:msgmatrix_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	
            
                                    	                         	 
            	 
<gridsearchcv_wid@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
      
    MDLabel:
        text:""
    MDLabel:
        text:""    
  
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    
                
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         

                                   
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0      
            spacing:5
                                            
            MDLabel:
            	text:""          
            	height:1
            	           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10           
                                   
            	               
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                                      
                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gsvc_chk
                    height:20
                    on_active:app.retutrasco_gscv(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
                    
            MDLabel:
            	text:""          
            MDLabel:
            	text:""            
            MDLabel:
            	text:""            
            MDLabel:
            	text:""                        	            	    	         
         	         
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv()
                                                      
    MDLabel:
        text:""
                                               
<gridsearch_asgn@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10    
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte()        
              	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.svm_save_gs()                                              
          	
                                                  
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                                
                    
<randomizedsearchcv_wid@BoxLayout>:
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5

    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 

    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv
                    current_hint_text_color:hex('#b2b2b2')

        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0 
                                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv
                    current_hint_text_color:hex('#b2b2b2')
                                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv
                    current_hint_text_color:hex('#b2b2b2')
       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv
                    current_hint_text_color:hex('#b2b2b2')
                                                              
           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_chk
                    on_active:app.returtraiscor_rscv(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
                        
                              
                    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv()
                                                                                

<randomizedsearch_asgn@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact()        
            	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.svm_save_gs()                                              
                                                
<prameter_optimizer_wid@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk 
            	    on_press:app.add_grdscv_svc()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_svc()  
 
            

  
  
<slr_dbscan_wid@BoxLayout>:
	        
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"DBSCAN"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                  
        
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'eps'
                    id:eps_dcan
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'min_samples'
                    id:min_samples_dcan
                    current_hint_text_color:hex('#b2b2b2')
                                        
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'metric'
                    id:metric_dcan
                    current_hint_text_color:hex('#b2b2b2')
                                                                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'leaf_size'
                    id:leaf_size_dcan
                    current_hint_text_color:hex('#b2b2b2')
                                                                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'p'
                    id:p_dcan
                    current_hint_text_color:hex('#b2b2b2')
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0 
                     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10              
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_dcan
                    current_hint_text_color:hex('#b2b2b2')
                                                                                    
                                
            MDLabel:
                text:'algorithm'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'         
                
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                MDRoundFlatButton:
                    text:"auto"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.auto_dcan()
            	    
            	MDRoundFlatButton:
                    text:"ball_tree"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.ball_tree_dcan()
            	    
            	MDRoundFlatButton:
                    text:"kd_tree"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.kd_tree_dcan()
            	    
            	MDRoundFlatButton:
                    text:"brute"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.brute_dcan()   
            	                    
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"core_sample_indices_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.core_sample_indices_dcant()
            	    
            	MDRoundFlatButton:
                    text:"components_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.components_dcant()  

            	MDRoundFlatButton:
                    text:"labels_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.labels_dcant()
            	    
            	MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_dcant()
            	                	    
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_dcant()     
            	           	    
            	    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            
            MDLabel:
                text:'visualization'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                MDRoundFlatButton:
                    text:""
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	              	    
            	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.dcancltng()        
            	
        
                        
<slr_agmtcltr_wid@BoxLayout>:
	        
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"AgglomerativeClustering"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0 
            

            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[12,0]                                
            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_clusters'
                    id:n_clusters_agmatvctr
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'distance_threshold'
                    id:distance_threshold_agmatvctr
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'compute_full_tree'
                    id:compute_full_tree_agmatvctr
                    current_hint_text_color:hex('#b2b2b2')

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0     

            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10                          
            
                MDCheckbox:
                	size_hint:None,None
                	id:compute_distances_chk
            	    on_active:app.compute_distances_cls(*args)
            	    
                MDLabel:
                	text:"compute_distances"
            	    color:hex("#FFFFFF")  
            	    
            MDLabel:
                text:'affinity'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'         
                
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                MDRoundFlatButton:
                    text:"euclidean"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.euclidean_agmr()
            	    
            	MDRoundFlatButton:
                    text:"l1"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.l1_agmr()
            	    
            	MDRoundFlatButton:
                    text:"l2"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.l2_agmr()
            	    
            	MDRoundFlatButton:
                    text:"manhattan"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.manhattan_agmr()   
            	    
            	MDRoundFlatButton:
                    text:"cosine"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cosine_agmr()   

            MDLabel:
                text:'linkage'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'         
                
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         

                MDRoundFlatButton:
                    text:"ward"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.ward_agmr()
            	    
            	MDRoundFlatButton:
                    text:"complete"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.complete_agmr()
            	    
            	MDRoundFlatButton:
                    text:"average"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.average_agmr()
            	    
            	MDRoundFlatButton:
                    text:"single"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.single_agmr()   
            	    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"n_clusters_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_clusters_agcr()
            	    
            	MDRoundFlatButton:
                    text:"labels_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.labels_agcr()
            	    
            	MDRoundFlatButton:
                    text:"n_leaves_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_leaves_agcr()
            	    
            	MDRoundFlatButton:
                    text:"n_connected_components_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_connected_components_agcr()
            	    
            	MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_agcr()  

            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_agcr()
            	    
            	MDRoundFlatButton:
                    text:"children_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.children_agcr()
            	                	    
            	MDRoundFlatButton:
                    text:"distances_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.distances_agcr()     
            	           	    
            	    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            
            MDLabel:
                text:'visualization'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"scale_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scale_stscl()            	    
            	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.aggrcltring()       


<slr_incpca_wid@BoxLayout>:
	        
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""        
    
    MDLabel:
    	text:"IncrementalPCA"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "345dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
            spacing:10 
            
            MDLabel:
            	text:""

            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                          
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_components'
                    id:n_components_incpca
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'batch_size'
                    id:batch_size_incpca
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                
            MDLabel:
            	text:""
                
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5                          
            
                MDCheckbox:
                	size_hint:None,None
                	id:whiten_incpca_chk
            	    on_active:app.whiten_incpca(*args)
            	    height:18
                MDLabel:
                	text:"whiten"
            	    color:hex("#FFFFFF")  
            	    bold:True 
            	                          
                MDCheckbox:
                	size_hint:None,None
                	id:copy_incpca_chk
            	    on_active:app.copy_incpca(*args)
            	    height:18
                MDLabel:
                	text:"copy"
            	    color:hex("#FFFFFF")  
            	    bold:True
            	    
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            	    
            	    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "465dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:7
            
            MDLabel:
            	text:""     
            	            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7   
                
                MDRoundFlatButton:
                    text:"components_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.components_incpcat()
            	    
            	MDRoundFlatButton:
                    text:"explained_variance_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.explained_variance_incpcat()                        	    
            	                	    
            	MDRoundFlatButton:
                    text:"n_components_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_components_incpcat()
            	                	    

            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7                     	    
            	    
            	MDRoundFlatButton:
                    text:"noise_variance_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.noise_variance_incpcat()
            	    
            	MDRoundFlatButton:
                    text:"n_samples_seen_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_samples_seen_incpcat()                    	            
  
            	MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_incpcat()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:7         
               	    
            	MDRoundFlatButton:
                    text:"mean_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.mean_incpcat()
           	    
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_incpcat()
                	    
            	MDRoundFlatButton:
                    text:"singular_values_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.singular_values_incpcat()            	    
            	            	           	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:7                     	    
                	                 
            	MDRoundFlatButton:
                    text:"explained_variance_ratio_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.explained_variance_ratio_incpcat()   
            	               
            	MDRoundFlatButton:
                    text:"batch_size_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.batch_size_incpcat()          	                	                	              
           	    
            	MDRoundFlatButton:
                    text:"var_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.var_incpcat()
            	               
            MDLabel:
            	text:""                 	            	                    	
            	                    	
    MDLabel:
        text:""
    MDLabel:
        text:""                	
       
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"
            on_press:app.incpcadcmpt()            

            	
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
    	text:""            	
        
        
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_incpca_wid 
    	spacing:5
    	
    	
<slr_pca_wid@BoxLayout>:
	        
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"PCA"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:4
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,22]
            size_hint: None, None
            size: "330dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0     
     
            MDLabel:
                text:''
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'    
                     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                          
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_components'
                    id:n_components_pca
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'tol'
                    id:tol_pca
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0.0"

                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'iterated_power'
                    id:iterated_power_pca
                    current_hint_text_color:hex('#b2b2b2')
                    text:"auto"

                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'random_state'
                    id:random_state_pca
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "330dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10    
            
            MDLabel:
                text:''
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'    
            MDLabel:
                text:''
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                                 
                            
            MDLabel:
                text:'svd_solver'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'
                           	         	   
            MDLabel:
                text:""
                height:1
                               	         	   
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]            
                                       
                MDRoundFlatButton:
                    text:"auto"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.auto_pca_sv()   
            	    id:auto_pca_sv_chk
            	    
                MDRoundFlatButton:
                    text:"full"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')     
            	    md_bg_color:hex('#323043')
            	    on_press:app.full_pca_sv()
            	    id:full_pca_sv_chk
            	     
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]            
                                                   	     
                MDRoundFlatButton:
                    text:"arpack"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.arpack_pca_sv()  
            	    id: arpack_pca_sv_chk
            	    
                MDRoundFlatButton:
                    text:"randomized"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
            	    md_bg_color:hex('#323043')
            	    on_press:app.randomized_pca_sv()
            	    id:randomized_pca_sv_chk
              
            MDLabel:
                text:""
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'      
                            
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5                          
            
                MDCheckbox:
                	size_hint:None,None
                	id:copy_pca_chk
            	    on_active:app.copy_pca(*args)
            	    height:18
                MDLabel:
                	text:"copy"
            	    color:hex("#FFFFFF")
            	    bold:True 
            	
                MDCheckbox:
            	    size_hint:None,None
            	    id:whiten_pca_chk
            	    on_active:app.whiten_pca(*args)
            	    height:18
                MDLabel:
                	text:"whiten"
                	color:hex("#FFFFFF")
                	bold:True 

            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""                                   
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "480dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:7
            
            MDLabel:
            	text:""      
            	            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:7         
                
                MDRoundFlatButton:
                    text:"components_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.components_dpca()
            	    
            	MDRoundFlatButton:
                    text:"explained_variance_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.explained_variance_dpca()
            	    
            	MDRoundFlatButton:
                    text:"singular_values_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.singular_values_dpca()
            	    
 
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7         
                            	    
            	MDRoundFlatButton:
                    text:"n_features_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_dpca()
            	                	    
            	MDRoundFlatButton:
                    text:"n_samples_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_samples_dpca()
         
            	MDRoundFlatButton:
                    text:"n_components_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_components_dpca()
            	               
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:7         

            	MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_dpca()
 
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_dpca()
           
            	MDRoundFlatButton:
                    text:"mean_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.mean_dpca()

            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7   
                
            	MDRoundFlatButton:
                    text:"noise_variance_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.noise_variance_dpca()
            	    
            	MDRoundFlatButton:
                    text:"explained_variance_ratio_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.explained_variance_ratio_dpca()       
            	                   
            MDLabel:
            	text:""
     
            	            	                
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.pcadcn()       
            	
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
    	text:""            	
    	                
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_pca_wid 
    	spacing:10
    	
    	
<data_countplt_sbn_wid@BoxLayout>:
	        
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"countplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0     
            
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                           
        
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'x'
                    id:x_cntplt
                    current_hint_text_color:hex('#b2b2b2')
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'y'
                    id:y_cntplt
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'hue'
                    id:hue_cntplt
                    current_hint_text_color:hex('#b2b2b2') 
                               
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'order'
                    id:order_cntplt
                    current_hint_text_color:hex('#b2b2b2')
                                    
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'hue_order'
                    id:hue_order_cntplt
                    current_hint_text_color:hex('#b2b2b2')
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0     
            
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                                            
            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'color'
                    id:color_cntplt
                    current_hint_text_color:hex('#b2b2b2')
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'palette'
                    id:palette_cntplt
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'saturation'
                    id:saturation_cntplt
                    current_hint_text_color:hex('#b2b2b2') 
                               
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'ax'
                    id:ax_cntplt
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'font_scale'
                    id:fntscct
                    current_hint_text_color:hex('#b2b2b2')
                                  
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0      
            
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None      
	                id:dodge_cntplt_chk
	                on_active:app.dodge_cntplt(*args)   
                MDLabel:
                	text:'dodge'   
                	
            MDLabel:
                text:"orient"  
                
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10            
                    
                MDRoundFlatButton:
                    text:"vertical"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.vertical_cntplt()       
            	    
                MDRoundFlatButton:
                    text:"horizontal"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.horizontal_cntplt() 
            	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.countplt_sbn_plt()                     
                                   
<data_cltrmap_wid@BoxLayout>:   

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    MDLabel:
    	text:"clustermap"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0           
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                          
              
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"1"
                    hint_text:"font_scale"
                    id:font_scale_ctmap
                    current_hint_text_color:hex('#b2b2b2')              
              
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'z_score'
                    id:z_score_ctmap
                    current_hint_text_color:hex('#b2b2b2')
                                    
                MDTextField:
                    line_color_focus:1,1,1,1
                    text:"None"
                    hint_text:'standard_scale'
                    id:standard_scale_ctmap
                    current_hint_text_color:hex('#b2b2b2')
                                                        
                MDTextField:
                    line_color_focus:1,1,1,1
                    text:"rocket"
                    hint_text:"cmap"
                    id:cmap_ctmap
                    current_hint_text_color:hex('#b2b2b2')                    
            MDLabel:
                text:""
                height:18 
                         
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10        
                	        
            	MDCheckbox:
	                size_hint:None,None   
	                id:mask_ctmap_chk
	                on_active:app.mask_ctmap(*args)
	                height:18     
                MDLabel:
                	text:'mask'   
                	color:hex("#FFFFFF")
                	bold:True 
                	     
          	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.ctmap_sbn_plt()       
          	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
        text:""
    MDLabel:
        text:""    
        	
    	     
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_cltrmap_wid 
    	spacing:5
    	
    	
<data_ctmap_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"clustermap"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtctmapplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtctmapplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""  
            
              	                   	                 
<data_ctplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"catplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
   
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_ctplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_ctplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_ctplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"row"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:row_ctplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"col"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:col_wrap_ctplo
                                                      
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                                      
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"col_wrap"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:col_wrap_ctplo    
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"ci"
                    text:"95"
                    current_hint_text_color:hex('#b2b2b2')
                    id:ci_ctplo           
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"n_boot"
                    text:"1000"
                    current_hint_text_color:hex('#b2b2b2')
                    id:n_boot_ctplo                       
                                                                        
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"units"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:units_ctplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"seed"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:seed_ctplo                    
                    
 	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                                           
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:order_ctplo                       
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue_order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_order_ctplo   
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"row_order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:row_order_ctplo         
                                                  
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"col_order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:col_order_ctplo                        
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"height"
                    text:"5"
                    current_hint_text_color:hex('#b2b2b2')
                    id:height_ctplo              
                    
 	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"aspect"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:aspect_ctplo           
                                              
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"color"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:color_ctplo          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_ctplo                    
                    

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0      
            
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None   
	                id:legend_ctplo_chk
	                on_active:app.legend_ctplo(*args)
	                height:18 
                MDLabel:
                	text:'legend'     
                	color:hex("#FFFFFF")
                	bold:True 
                	
            	MDCheckbox:
	                size_hint:None,None   
	                id:legend_out_ctplo_chk
	                on_active:app.legend_out_ctplo(*args)
	                height:18
                MDLabel:
                	text:'legend_out'     
                	color:hex("#FFFFFF")    
                	bold:True            	
                	                    
            	MDCheckbox:
	                size_hint:None,None   
	                id:_ctplo_chk
	                on_active:app._ctplo(*args)
	                height:18
                MDLabel:
                	text:''     
                	color:hex("#FFFFFF") 
                	bold:True              	
                	                                    	                    
            	MDCheckbox:
	                size_hint:None,None   
	                id:margin_titles_ctplo_chk
	                on_active:app.margin_titles_ctplo(*args)
	                height:18
                MDLabel:
                	text:'margin_titles'     
                	color:hex("#FFFFFF")    
                	bold:True     
                     	
            MDLabel:
                text:"kind"
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                      	         	   
                	         	   
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"strip"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.strip_ctplo()
                
                MDRoundFlatButton:
                    text:"swarm"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.swarm_ctplo()
                
                MDRoundFlatButton:
                    text:"box"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.box_ctplo()
                
                MDRoundFlatButton:
                    text:"violin"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.violin_ctplo()
                
                MDRoundFlatButton:
                    text:"boxen"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.boxen_ctplo() 
            	    
                MDRoundFlatButton:
                    text:"point"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.point_ctplo()   

                MDRoundFlatButton:
                    text:"bar"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.bar_ctplo()   

                MDRoundFlatButton:
                    text:"count"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.count_ctplo()   
                       
            MDLabel:
                text:"orient"
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                      	         	   
                	         	   
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"v"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.strip_ctplo()
                
                MDRoundFlatButton:
                    text:"h"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.swarm_ctplo()      
            	    
            	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.ctplo_sbn_plt()       
            	            	      
            	        		
    MDLabel:
    	text:""           
    	    	
    MDLabel:
    	text:""
    	color:hex('#FFFFFF')      
        font_style:'H5'
        id:ctplo_hding     
        
    MDLabel:
    	text:""                             
   	    				
    MDLabel:
    	text:""
    	color:hex("#808080")
        font_size:30
        font_style:'H6'
        id:ctplo_subhding              					     
    	   
    GridLayout:
        cols:2
        orientation:'vertical' 
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:ctplo_vis_grd      
	    spacing:5            	
	        
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:ctplo_ertxt	                                      
            	        		
    MDLabel:
    	text:""           
    	    	  
                          
<data_swmplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"swarmplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
   
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_swmplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_swmplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_swmplo
                    
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:order_swmplo                       
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue_order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_order_swmplo   
                    
	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                                           
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"color"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:color_swmplo          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_swmplo                    
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"size"
                    text:"5"
                    current_hint_text_color:hex('#b2b2b2')
                    id:size_swmplo               
                    

                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"edgecolor"
                    text:"gray"
                    current_hint_text_color:hex('#b2b2b2')
                    id:edgecolor_swmplo     
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"linewidth"
                    text:"0"
                    current_hint_text_color:hex('#b2b2b2')
                    id:linewidth_swmplo  


                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"ax"
                    text:"0.75"
                    current_hint_text_color:hex('#b2b2b2')
                    id:ax_swmplo  
                                                                          

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0      
            
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None   
	                id:dodge_swmplo_chk
	                on_active:app.dodge_swmplo(*args)
                MDLabel:
                	text:"dodge"     
                	color:hex("#FFFFFF")

            MDLabel:
                text:"orient"
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                      	         	   
                	         	   
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"v"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.strip_swmplo()
                
                MDRoundFlatButton:
                    text:"h"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.swarm_swmplo()
                
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.swmplo_sbn_plt()       
            	            	      
            	        		
    MDLabel:
    	text:""           
    	    	
    MDLabel:
    	text:""
    	color:hex('#FFFFFF')      
        font_style:'H5'
        id:swmplo_hding     
        
    MDLabel:
    	text:""                             
   	    				
    MDLabel:
    	text:""
    	color:hex("#808080")
        font_size:30
        font_style:'H6'
        id:swmplo_subhding              					     
    	   
    GridLayout:
        cols:2
        orientation:'vertical' 
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:swmplo_vis_grd      
	    spacing:5            	
	        
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:swmplo_ertxt	                                      
            	        		
    MDLabel:
    	text:""           
    	    	                         
                                                       
<data_strplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"stripplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
   
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_strplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_strplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_strplo                   
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:order_strplo                       
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue_order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_order_strplo   
                          
	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                                                 
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"color"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:color_strplo          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_strplo                    
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"size"
                    text:"5"
                    current_hint_text_color:hex('#b2b2b2')
                    id:size_strplo                       

                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"linewidth"
                    text:"0"
                    current_hint_text_color:hex('#b2b2b2')
                    id:linewidth_strplo  

                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"ax"
                    text:"0.75"
                    current_hint_text_color:hex('#b2b2b2')
                    id:ax_strplo  
                                                                          

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0      
            
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None   
	                id:jitter_strplo_chk
	                on_active:app.jitter_strplo(*args)
                MDLabel:
                	text:"jitter"     
                	color:hex("#FFFFFF")

            	MDCheckbox:
	                size_hint:None,None   
	                id:dodge_strplo_chk
	                on_active:app.dodge_strplo(*args)
                MDLabel:
                	text:"dodge"     
                	color:hex("#FFFFFF")               	

            MDLabel:
                text:"orient"
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                      	         	   
                	         	   
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"v"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.strip_strplo()
                
                MDRoundFlatButton:
                    text:"h"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.swarm_strplo()
                
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.strplo_sbn_plt()       
            	            	      
            	        		
    MDLabel:
    	text:""           
    	    	
    MDLabel:
    	text:""
    	color:hex('#FFFFFF')      
        font_style:'H5'
        id:strplo_hding     
        
    MDLabel:
    	text:""                             
   	    				
    MDLabel:
    	text:""
    	color:hex("#808080")
        font_size:30
        font_style:'H6'
        id:strplo_subhding              					     
    	   
    GridLayout:
        cols:2
        orientation:'vertical' 
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:strplo_vis_grd      
	    spacing:5            	
	        
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:strplo_ertxt	                                      
            	        		
    MDLabel:
    	text:""           
    	    
                          
<data_bxplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"boxplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
   
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_bxplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_bxplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_bxplo
                    
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:order_bxplo                       
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue_order"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_order_bxplo   
                          
	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                                                 
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"color"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:color_bxplo          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_bxplo                    
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"saturation"
                    text:"0.75"
                    current_hint_text_color:hex('#b2b2b2')
                    id:saturation_bxplo                       

                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"whis"
                    text:"0.75"
                    current_hint_text_color:hex('#b2b2b2')
                    id:whis_bxplo  

                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"ax"
                    text:"0.75"
                    current_hint_text_color:hex('#b2b2b2')
                    id:ax_bxplo  
                                                                          

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0      
            
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None   
	                id:dodge_bxplo_chk
	                on_active:app.dodge_bxplo(*args)
                MDLabel:
                	text:"dodge"     
                	color:hex("#FFFFFF")

            MDLabel:
                text:"orient"
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                      	         	   
                	         	   
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"v"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.strip_bxplo()
                
                MDRoundFlatButton:
                    text:"h"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.swarm_bxplo()
                
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.bxplo_sbn_plt()       
            	            	      
            	        		
    MDLabel:
    	text:""           
    	    	
    MDLabel:
    	text:""
    	color:hex('#FFFFFF')      
        font_style:'H5'
        id:bxplo_hding     
        
    MDLabel:
    	text:""                             
   	    				
    MDLabel:
    	text:""
    	color:hex("#808080")
        font_size:30
        font_style:'H6'
        id:bxplo_subhding              					     
    	   
    GridLayout:
        cols:2
        orientation:'vertical' 
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:bxplo_vis_grd      
	    spacing:5            	
	        
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:bxplo_ertxt	                                      
            	        		
    MDLabel:
    	text:""               	    	                         
  
                                                          
<data_jntplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    
    
    MDLabel:
    	text:"jointplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
   
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_jntplo
                                                                            
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_jntplo
                                                      
                            
                #MDTextField:
                    #line_color_focus: 1,1,1,1
                    #hint_text:"color"
                    #text:"None"
                    #current_hint_text_color:hex('#b2b2b2')
                    #id:color_jntplo
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"height"
                    text:"6"
                    current_hint_text_color:hex('#b2b2b2')
                    id:height_jntplo
                            
               # MDTextField:
                #    line_color_focus: 1,1,1,1
                 #   hint_text:"ratio"
                  #  text:"5"
                   # current_hint_text_color:hex('#b2b2b2')
                    #id:ratio_jntplo
                            
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                                                   
                            
               # MDTextField:
                #    line_color_focus: 1,1,1,1
                 #   hint_text:"space"
                  #  text:"0.2"
                   # current_hint_text_color:hex('#b2b2b2')
                    #id:space_jntplo
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_jntplo
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"viridis_r"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_jntplo                            
                            
               # MDTextField:
                #    line_color_focus: 1,1,1,1
                 #   hint_text:"hue_order"
                  #  text:"None"
                   # current_hint_text_color:hex('#b2b2b2')
                    #id:hue_order_jntplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"font_scale"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:font_scale_jntplo                    
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0
            
                                             
            MDLabel:
                text:'' 
                                          
            MDLabel:
                text:'kind'
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                      	         	   
                	         	   
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"scatter"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.scatter_jntplo()
            	                  
                
                MDRoundFlatButton:
                    text:"kde"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.kde_jntplo()
            	                  
                
               # MDRoundFlatButton:
                #    text:"hist"
            	 #   line_color:1,1,1,1
            	  #  text_color:hex('#FFFFFF')
            	   # md_bg_color:hex("#323043")   
            	    #on_press:app.hist_jntplo()
            	                  
                
                MDRoundFlatButton:
                    text:"hex"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.hex_jntplo()
            	                  
                
                MDRoundFlatButton:
                    text:"reg"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.reg_jntplo()
            	                  
                
                MDRoundFlatButton:
                    text:"resid"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.resid_jntplo()
            	    
            MDLabel:
                text:''	      
                            
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5
                padding: [10,0]              	                  
           
                MDCheckbox:
                    height:18
            	    size_hint:None,None 
            	    id:dropna_jntplo_chk
            	    on_active:app.dropna_jntplo(*args)            	                  
                MDLabel:
                    text:"dropna"
                    bold:True 
                    color:hex('#FFFFFF')      
            	
                MDCheckbox:
            	    size_hint:None,None 
            	    id:marginal_ticks_jntplo_chk
            	    height:18
            	    on_active:app.marginal_ticks_jntplo(*args)                       	            	
                MDLabel:
                    text:"marginal_ticks" 
                    bold:True
                    color:hex('#FFFFFF')      

          	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.jntplo_sbn_plt()       
            	            	      
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	  				                     	
    MDLabel:
    	text:""           
    MDLabel:
    	text:""     
	       

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_data_jntplo_wid 
    	spacing:5


<data_jntplo_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"jointplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtjntploplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtjntploplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
           
                        	
<data_sctplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    
    MDLabel:
    	text:"scatterplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    
  

      
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "296dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_sctplo
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_sctplo         
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_sctplo            
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"size"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:size_sctplo            
                       

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "296dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                                              
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"plasma_r"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_sctplo            
                                    
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"n_boot"
                    text:"1000"
                    current_hint_text_color:hex('#b2b2b2')
                    id:n_boot_sctplo            
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"alpha"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:alpha_sctplo        
                        
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"font_scale"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:font_scale_sctplo
                                                 
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "296dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10    
            
            MDLabel:
                text:""
                height:1
            MDLabel:
                text:''
                                		                    
            MDLabel:
                text:"legend"
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'       
                
            MDLabel:
                text:""
                height:1
                	         	   
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"auto"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.auto_sctplo()
            	    id:auto_sctplo_chk
            	    
                MDRoundFlatButton:
                    text:"brief"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.brief_sctplo()
            	    id:brief_sctplo_chk
                    	            
                MDRoundFlatButton:
                    text:"full"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.full_sctplo()
            	    id:full_sctplo_chk

            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"False"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    on_press:app.False_sctplo()
            	    id:False_sctplo_chk
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:5
                
                MDCheckbox:
                	on_active:app.despine_sctplo(*args)
                	size_hint:None,None 
                	id:despine_sctplo_chk
                	bold:True 
                MDLabel:
                	text:"despine" 
                	color:hex("#FFFFFF")
                	bold:True
                	height:18 
                	            	    
            MDLabel:
                text:""
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                      	         	   
                	         	               	    
          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.sctplo_sbn_plt()       
            	            	      
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	  				                     	
    MDLabel:
    	text:""           
    MDLabel:
    	text:""     
	       

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_data_sctplo_wid 
    	spacing:5
        
<data_sctplo_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"scatterplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtsctploplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtsctploplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
 
 
 

<data_lnplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""   
            
    MDLabel:
    	text:"lineplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    

      
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "365dp", "325dp"       
            md_bg_color:hex('#0E0C22')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_lnplo
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_lnplo         
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_lnplo            
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"plasma_r"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_lnplo            
                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"font_scale"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:font_scale_lnplo            
                           	   
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.lnplo_sbn_plt()       
            	            	      
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	  				                     	
    MDLabel:
    	text:""           
    MDLabel:
    	text:""     
	       

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_data_lnplo_wid 
    	spacing:10
        
<data_lnplo_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"lineplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtlnploplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtlnploplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
           
<data_bxtplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""   
            
    MDLabel:
    	text:"boxplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    

      
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "365dp", "325dp"       
            md_bg_color:hex('#0E0C22')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_bxtplo
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_bxtplo         
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_bxtplo            
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"plasma_r"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_bxtplo            
                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"font_scale"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:font_scale_bxtplo            
                           	   
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.bxtplo_sbn_plt()       
            	            	      
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	  				                     	
    MDLabel:
    	text:""           
    MDLabel:
    	text:""     
	       

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_data_bxtplo_wid 
    	spacing:10
        
<data_bxtplo_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"boxplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtbxtploplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtbxtploplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
           
<data_pntxplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""   
            
    MDLabel:
    	text:"pointplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    

      
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "365dp", "325dp"       
            md_bg_color:hex('#0E0C22')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_pntxplo
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_pntxplo         
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_pntxplo            
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"plasma_r"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_pntxplo            
                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"font_scale"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:font_scale_pntxplo            
                           	   
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.pntxplo_sbn_plt()       
            	            	      
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	  				                     	
    MDLabel:
    	text:""           
    MDLabel:
    	text:""     
	       

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_data_pntxplo_wid 
    	spacing:10
        
<data_pntxplo_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"pointplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtpntxploplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtpntxploplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
           
<data_strpxplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""   
            
    MDLabel:
    	text:"stripplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    

      
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "365dp", "325dp"       
            md_bg_color:hex('#0E0C22')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_strpxplo
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_strpxplo         
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_strpxplo            
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"plasma_r"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_strpxplo            
                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"font_scale"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:font_scale_strpxplo            
                           	   
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.strpxplo_sbn_plt()       
            	            	      
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	  				                     	
    MDLabel:
    	text:""           
    MDLabel:
    	text:""     
	       

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_data_strpxplo_wid 
    	spacing:10
        
<data_strpxplo_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"stripplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtstrpxploplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtstrpxploplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
           
<data_brxplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""   
            
    MDLabel:
    	text:"barplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    

      
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "365dp", "325dp"       
            md_bg_color:hex('#0E0C22')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_brxplo
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_brxplo         
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_brxplo            
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"plasma_r"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_brxplo            
                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"font_scale"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:font_scale_brxplo            
                           	   
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.brxplo_sbn_plt()       
            	            	      
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	  				                     	
    MDLabel:
    	text:""           
    MDLabel:
    	text:""     
	       

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_data_brxplo_wid 
    	spacing:10
        
<data_brxplo_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"barplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtbrxploplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtbrxploplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
           
<data_vnplo_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""   
            
    MDLabel:
    	text:"violinplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    

      
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "365dp", "325dp"       
            md_bg_color:hex('#0E0C22')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_vnplo
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_vnplo         
                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"hue"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_vnplo            
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette"
                    text:"plasma_r"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_vnplo            
                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"font_scale"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:font_scale_vnplo            
                           	   
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.vnplo_sbn_plt()       
            	            	      
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	  				                     	
    MDLabel:
    	text:""           
    MDLabel:
    	text:""     
	       

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_data_vnplo_wid 
    	spacing:10
        
<data_vnplo_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"violinplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtvnploplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtvnploplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
           

                      
<data_kde_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""        
    
    MDLabel:
    	text:"kdeplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
   
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:4
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "296dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"x"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:x_kdeplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"y"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:y_kdeplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"kernel"
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:kernel_kdeplo

                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"gridsize"
                    text:"200"
                    current_hint_text_color:hex('#b2b2b2')
                    id:gridsize_kdeplo

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            

           #     MDTextField:
            #        line_color_focus: 1,1,1,1
             #       hint_text:"weights"
              #      text:"None"
               #     current_hint_text_color:hex('#b2b2b2')
                #    id:weights_kdeplo
  
         #       MDTextField:
          #          line_color_focus: 1,1,1,1
           #         hint_text:"hue"
            #        text:"None"
             #       current_hint_text_color:hex('#b2b2b2')
              #      id:hue_kdeplo
              

                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"cut"
                    text:"3"
                    current_hint_text_color:hex('#b2b2b2')
                    id:cut_kdeplo              
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"palette/cmap"
                    text:"viridis"
                    current_hint_text_color:hex('#b2b2b2')
                    id:palette_kdeplo
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"levels"
                    text:"10"
                    current_hint_text_color:hex('#b2b2b2')
                    id:levels_kdeplo                    
                                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"thresh"
                    text:"0.0"
                    current_hint_text_color:hex('#b2b2b2')
                    id:thresh_kdeplo                    
                                                                                                           
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                                     
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"bw_method"
                    text:"scott"
                    current_hint_text_color:hex('#b2b2b2')
                    id:bw_method_kdeplo                    
                                                                       
                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"bw_adjust"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:bw_adjust_kdeplo                    
                                              
                                           
             #   MDTextField:
              #      line_color_focus: 1,1,1,1
               #     hint_text:"color"
                #    text:"None"
                 #   current_hint_text_color:hex('#b2b2b2')
                  #  id:color_kdeplo             
                    
                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:"font_scale"
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:font_scale_kdeplo  
                    
            #    MDTextField:
             #       line_color_focus: 1,1,1,1
              #      hint_text:"fill"
               #     text:"None"
                #    current_hint_text_color:hex('#b2b2b2')
                 #   id:fill_kdeplo_txt    
                                          
                     	                    	
            MDLabel:
                text:'multiple'
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                      	         	   
                	         	   
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"layer"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")
            	    id:layer_kdeplo_chk   
            	    on_press:app.layer_kdeplo()
            	        
                MDRoundFlatButton:
                    text:"stack"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    id:stack_kdeplo_chk
            	    on_press:app.stack_kdeplo()     
            	           	        
                MDRoundFlatButton:
                    text:"fill"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    id:fill_kdeplo_chk
            	    on_press:app.fill_kdeplo()
            	    
                
        MDCard:                	                
            orientation: "vertical"
            padding:[2,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0      
            
            MDLabel:
                text:""            
            
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5

            	MDCheckbox:
	                size_hint:None,None   
	                id:shade_kdeplo_chk
	                on_active:app.shade_kdeplo(*args)
	                height:18 
                MDLabel:
                	text:'shade'     
                	color:hex("#FFFFFF")
                	bold:True 
                	
            	MDCheckbox:
	                size_hint:None,None   
	                id:vertical_kdeplo_chk
	                on_active:app.vertical_kdeplo(*args)
	                height:18
                MDLabel:
                	text:'vertical'     
                	color:hex("#FFFFFF") 
                	bold:True               	
                	                                                        	
            	MDCheckbox:
	                size_hint:None,None   
	                id:legend_kdeplo_chk
	                on_active:app.legend_kdeplo(*args)
	                height:18
                MDLabel:
                	text:'legend'     
                	color:hex("#FFFFFF")
                	bold:True    
         
            	MDCheckbox:
	                size_hint:None,None   
	                id:cumulative_kdeplo_chk
	                on_active:app.cumulative_kdeplo(*args)
	                height:18 
                MDLabel:
                	text:'cumulative'     
                	color:hex("#FFFFFF") 
                	bold:True  
                	                                                        	
            	MDCheckbox:
	                size_hint:None,None   
	                id:cbar_kdeplo_chk
	                on_active:app.cbar_kdeplo(*args)
	                height:18 
                MDLabel:
                	text:'cbar'     
                	color:hex("#FFFFFF")    
                	bold:True 
                                                                        	
            	MDCheckbox:
	                size_hint:None,None   
	                id:despine_kdeplo_chk
	                on_active:app.despine_kdeplo(*args)
	                height:18 
                MDLabel:
                	text:'despine'     
                	color:hex("#FFFFFF")    
                	bold:True         
                	
            	MDCheckbox:
	                size_hint:None,None   
	                id:warn_singular_kdeplo_chk
	                on_active:app.warn_singular_kdeplo(*args)
	                height:18 
                MDLabel:
                	text:'warn_singular'     
                	color:hex("#FFFFFF")   
                	bold:True 
                         	
            	MDCheckbox:
	                size_hint:None,None   
	                id:common_grid_kdeplo_chk
	                on_active:app.common_grid_kdeplo(*args)
	                height:18 
                MDLabel:
                	text:'common_grid'     
                	color:hex("#FFFFFF")    
                	bold:True                
                         
            	MDCheckbox:
	                size_hint:None,None   
	                id:common_norm_kdeplo_chk
	                on_active:app.common_norm_kdeplo(*args)
	                height:18
                MDLabel:
                	text:'common_norm'     
                	color:hex("#FFFFFF")   
                	bold:True               
                     	            
            MDLabel:
                text:""                                  
            MDLabel:
                text:""            
                            
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5
                                                           	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.kde_sbn_plt()       
            	            	      
    MDLabel:
        text:""
    MDLabel:
        text:""                	        		
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	     
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_data_kde_wid 
    	spacing:5         


<data_kde_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"kdeplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtkdeplo_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtkdeplo_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
            	              	              	    
          	                     
<data_htmap_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"heatmap"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
   
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                       
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'vmin'
                    text:""
                    current_hint_text_color:hex('#b2b2b2')
                    id:vmin_htid
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'vmax'
                    text:""
                    current_hint_text_color:hex('#b2b2b2')
                    id:vmax_htid
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cmap'
                    text:""
                    current_hint_text_color:hex('#b2b2b2')
                    id:cmap_htid 
                               
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'center'
                    text:""
                    current_hint_text_color:hex('#b2b2b2')
                    id:center_htid
                                    
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'fmt'
                    text:""
                    current_hint_text_color:hex('#b2b2b2')
                    id:fmt_htid
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0                      
                
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                       
                
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'linewidths'
                    text:""
                    current_hint_text_color:hex('#b2b2b2')
                    id:linewidths_htid
                
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'linecolor'
                    text:""
                    current_hint_text_color:hex('#b2b2b2')
                    id:linecolor_htid
                                
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'ax'
                    text:""
                    current_hint_text_color:hex('#b2b2b2')
                    id:ax_htid
                                
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'font_scale'
                    text:"1"
                    current_hint_text_color:hex('#b2b2b2')
                    id:fnt_sz              
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0      
            
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None   
	                id:robust_ht_chk
	                on_active:app.robust_htm(*args)     
                MDLabel:
                	text:'robust'     
                	color:hex("#FFFFFF")
                	        
            	MDCheckbox:
	                size_hint:None,None    
	                on_active:app.annot_htm(*args)    
	                id:annot_ht_chk 
                MDLabel:
                	text:'annot'   
                	color:hex("#FFFFFF")     
                	
            	MDCheckbox:
	                size_hint:None,None    
	                on_active:app.cbar_htm(*args)     
	                id:cbar_ht_chk
                MDLabel:
                	text:'cbar'            
                	color:hex("#FFFFFF")
                	
            	MDCheckbox:
	                size_hint:None,None    
	                on_active:app.square_htm(*args)     
	                id:square_ht_chk
                MDLabel:
                	text:'square'
                	color:hex("#FFFFFF")
                	
            	MDCheckbox:
	                size_hint:None,None    
	                on_active:app.mask_htm(*args)     
	                id:mask_ht_chk
                MDLabel:
                	text:'mask'            
                	color:hex("#FFFFFF")    	
      
            	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.htmap_sbn_plt()                   	      
            	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	    

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_htmap_wid 
    	spacing:10    
    	      	    
<dtprltwd@BoxLayout>:    

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:""    
    MDLabel:
    	text:""        	
    	    
    MDLabel:
    	text:"pairplot"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'       
    	
    MDLabel:
    	text:""    
    MDLabel:
    	text:""        
    MDLabel:
    	text:""    
    MDLabel:
    	text:""        
    	    	    	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:4
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0      
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                             
         
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'hue'
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:hue_prplt_data
                 
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'palette'
                    text:"None" 
                    current_hint_text_color:hex('#b2b2b2') 
                    id:palette_prplt_data
                	               
                #MDTextField:
                 #   line_color_focus: 1,1,1,1
                  #  hint_text:'vars'
                   # text:"None"
                    #current_hint_text_color:hex('#b2b2b2')
                   # id:vars_prplt_data
                                    
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'x_vars'
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:xvar_prplt_data                    
            
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'y_vars'
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    id:yvar_prplt_data                   
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0                           
          
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                                       
                
                #MDTextField:
                    #line_color_focus:1,1,1,1
                   # hint_text:'markers'
                    #text:"None"
                    #current_hint_text_color:hex('#b2b2b2')
                    #id:mrk_prplt_data
                                
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'height'
                    id:height_prplt_data
                    text:"2.5"
                    current_hint_text_color:hex('#b2b2b2')
                                
                MDTextField:
                    line_color_focus:1,1,1,1
                    text:"1"
                    hint_text:'aspect'
                    id:aspct_prplt_data
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus:1,1,1,1
                    text:"1"
                    hint_text:'font_scale'
                    id:fnt_szprplt
                    current_hint_text_color:hex('#b2b2b2')
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0      
            spacing:5       
                	            
            MDLabel:
                text:""
            MDLabel:
                text:""                
                         
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5
                padding:[3,0]

            	MDCheckbox:
	                size_hint:None,None     
	                id:crnr_pr_act    
	                on_active:app.crnr_onact(*args)
	                height:18 
                MDLabel:
                	text:'corner'   
                	color:hex("#FFFFFF") 
                	bold:True 
                	        
            	MDCheckbox:
	                size_hint:None,None     
	                id:drpna_act_prlt
	                on_active:app.drpna_onact(*args)  
	                height:18 
                MDLabel:
                	text:'dropna'      
                	color:hex("#FFFFFF") 
                	bold:True  
                	            
            MDLabel:
                text:""
                                	            
            MDLabel:
                text:'kind'
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                   	         	   
                                	            
            MDLabel:
                text:""
                                                       	         	   
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5
                padding: [10,0]       
                
                MDRoundFlatButton:
                    text:"scatter"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")   
            	    id:scatter_kdprplt_chk
            	    on_press:app.scatter_kdprplt()
            	     
            	    
                MDRoundFlatButton:
                    text:"kde"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")
            	    id:kde_kdprplt_chk       
            	    on_press:app.kde_kdprplt()   
            	    
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5
                padding: [10,0]       
                            	    
                MDRoundFlatButton:
                    text:"hist"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")    
            	    id:hist_kdprplt_chk 
            	    on_press:app.hist_kdprplt()   
            	      
                MDRoundFlatButton:
                    text:"reg"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")    
            	    id:reg_kdprplt_chk 
            	    on_press:app.reg_kdprplt()     
            	    
            MDLabel:
                text:""
            MDLabel:
                text:""        
      
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:5
                          
            MDLabel:
                text:""
                                        	    
            MDLabel:
                text:'diag_kind'
                color:hex("#FFFFFF")
                font_size:55
                font_style:'H6'                      	         	   
                                	            
            MDLabel:
                text:""
                                       	         	   
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5
                padding: [10,0]            
                                       
                MDRoundFlatButton:
                    text:"auto"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF') 
            	    md_bg_color:hex("#323043")     
            	    id:auto_dprplt_chk
            	    on_press:app.auto_dprplt()    
            	    
                MDRoundFlatButton:
                    text:"hist"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")        
            	    id:hist_dprplt_chk
            	    on_press:app.hist_dprplt()
            	     
                MDRoundFlatButton:
                    text:"kde"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF') 
            	    md_bg_color:hex("#323043")     
            	    on_press:app.kde_dprplt()       
            	    id:kde_dprplt_chk         
            	    
                MDRoundFlatButton:
                    text:"none"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")       
            	    id:none_dprplt_chk  
            	    on_press:app.none_dprplt()
            	    
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
                                                                            	    
            	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                	    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.pairplt_sbn_plt()       
            	        		
            	  				                     	
    MDLabel:
    	text:""
    MDLabel:
    	text:"" 	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	     
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_dtprltwd 
    	spacing:5

<dtprltwd_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:"pairplot"
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:dtprplt_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:""
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:dtprplt_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                

<slr_mlblr_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"MultiLabelBinarizer"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0                    
                                                                                   
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None       
	                id:sparse_output_mlblr_chk  
	                on_active:app.sparse_output_mlblr(*args)
                MDLabel:
                	text:"sparse_output"
                	color:hex("#FFFFFF")     
                	                	                       
<slr_lblbin_wid@BoxLayout>:	
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"LabelBinarizer"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            	            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,30]
                spacing:10                                    
                                                                                   
                MDTextField:
                	color_mode: 'custom'
                	hint_text:"neg_label"
                	text:"0"
                	id:neg_label_lblbin
                	current_hint_text_color:hex('#b2b2b2')
                	
                MDTextField:
                	color_mode: 'custom'
                	hint_text:"pos_label"
                	text:"1"
                	id:pos_label_lblbin
                	current_hint_text_color:hex('#b2b2b2')
                	
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None      
	                id:sparse_output_lblbin_chk   
	                on_active:app.sparse_output_lblbin(*args)
                MDLabel:
                	text:"sparse_output"
                	color:hex("#FFFFFF")     
                	             
                	                	                	    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
            	                	           	       	                	    
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_lblbin()   
                                
                MDRoundFlatButton:
                    text:"y_type_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.y_type_lblbin()   
                
                MDRoundFlatButton:
                    text:"sparse_input_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.sparse_input_lblbin()   
   	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.lblbinzr()
            	    
<slr_nlzr_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""
            
    MDLabel:
    	text:"Normalizer"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""
            
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0 
            spacing:10  
        
            MDLabel:
            	text:""      
                         	                          
            MDLabel:
                text:"norm"
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"l1"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.l1_nlzr()
            	    id:l1_nlzr_chk
            	    
                MDRoundFlatButton:
                    text:"l2"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.l2_nlzr()
            	    id:l2_nlzr_chk   
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10       
                                
                MDRoundFlatButton:
                    text:"max"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.max_nlzr()
            	    id:max_nlzr_chk
            	    
            MDLabel:
                text:""       
                            	    
            GridLayout:
                cols:4
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None         
	                on_active:app.copy_nlzr(*args)
	                id:copy_nlzr_chk
	                height:18 
                MDLabel:
                	text:'copy'
                	color:hex("#FFFFFF")
                	bold:True       
            MDLabel:
            	text:""       
            MDLabel:
            	text:""
            MDLabel:
            	text:""                              	
            	            	                         	  
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:''
                
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7        
                
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_nlzr()   
            	           
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_nlzr()   

   
            MDLabel:
                text:'visualization'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"kdeplot"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.kdeplot_nrmlz()
            MDLabel:
            	text:""       
            MDLabel:
            	text:""                   	    
       
    MDLabel:
        text:""
    MDLabel:
        text:""    	
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.normalizer_at()       
            	  				                     	
    MDLabel:
    	text:""           
    MDLabel:
    	text:""                  
    MDLabel:
        text:""
    MDLabel:
        text:""    	            	
    MDLabel:
    	text:""            	

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_nlzr_wid 
    	spacing:5
                    	  				
<slr_nlzr_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:'kdeplot'
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:nrmlz_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"train data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:"test data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:nrmlz_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
                      
<slr_stad_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    
    MDLabel:
    	text:"StandardScaler"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            
            MDLabel:
                text:""  
            MDLabel:
                text:""                                   
                           
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10

            	MDCheckbox:
	                size_hint:None,None         
	                id:stadcpy_scl_chk
	                on_active:app.stadcpy_scl(*args)
	                height:18
                MDLabel:
                	text:'copy'
                	color:hex("#FFFFFF")
                	bold:True     
                	
	            MDCheckbox:
	                size_hint:None,None
	                id:stadwtmn_scl_chk	    
	                on_active:app.stadwtmn_scl(*args)
	                height:18 
	                         
                MDLabel:
                	text:'with mean'
                	color:hex("#FFFFFF") 
                	bold:True
                	
            	MDCheckbox:
            	    size_hint:None,None
            	    id:stadwiths_scl_chk
            	    on_active:app.stadwiths_scl(*args)
            	    height:18
                MDLabel:
                	text:'with std'
                	color:hex("#FFFFFF") 
                	bold:True
                	

            MDLabel:
                text:""           
            MDLabel:
                text:""                     
            MDLabel:
                text:""                
                   	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:""
                color:hex('#FFFFFF')  
                height:50                     
            MDLabel:
                text:""
                color:hex('#FFFFFF')  
                height:50                           
              	                     
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'     
                                               
            MDLabel:
                text:""
                color:hex('#FFFFFF')  
                height:8                          
              	                                    	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:6         
                
                MDRoundFlatButton:
                    text:"scale_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scale_stscl()
            	    
            	MDRoundFlatButton:
                    text:"mean_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.mean_stscl()
            	    
            	MDRoundFlatButton:
                    text:"var_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.var_stscl()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10                     	    
            	    
            	MDRoundFlatButton:
                    text:"n_samples_seen_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_samples_seen_stscl()

            MDLabel:
                text:""
                color:hex('#FFFFFF')  
                
            	             
            MDLabel:
                text:'visualization'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'         
                          
            MDLabel:
                text:""
                color:hex('#FFFFFF')  
                height:8                              
              	                                    	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"kdeplot"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.kdeplot_stscl()       
            	    
            MDLabel:
                text:""
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                             
            MDLabel:
                text:""
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'   
            MDLabel:
                text:""
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'   
         
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.stdrdsc()       
            	  					
            	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""                  
    MDLabel:
    	text:""           
    MDLabel:
    	text:""            	            	
    MDLabel:
    	text:""
    	
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_stad_wid 
    	spacing:5
            	            	
            	  				
<slr_stad_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:'kdeplot'
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:stscl_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"train data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:"test data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:stscl_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
				
<slr_pwr_wid@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""
            
    MDLabel:
    	text:"PowerTransformer"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            spacing:10 

            MDLabel:
            	text:""      
            	                       	                    	
            MDLabel:
            	text:"method"
            	color:hex('#FFFFFF')
            	font_size:55
        	    font_style:'H6'                      	                
                                
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]
                
                MDRoundFlatButton:
                    text:"yeo-johnson"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.yeo_pwttr()     
            	    id:yeo_pwttr_chk 
            	    
                MDRoundFlatButton:
                    text:"box-cox"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.box_pwttr()
            	    id:box_pwttr_chk
            	    
            MDLabel:
            	text:""     
            	
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5            	
                
            	MDCheckbox:
	                size_hint:None,None 
	                id:standardize_pwrtr_chk        
	                on_active:app.standardize_pwrtr(*args)
	                height:18
                MDLabel:
                	text:'standardize'      
                	color:hex('#FFFFFF')
                	bold:True                          
                
            	MDCheckbox:
	                size_hint:None,None  
	                id:copy_pwrtr_chk       
	                on_active:app.cpy_pwrtr(*args)
	                height:18
                MDLabel:
                	text:'copy'      
                	color:hex('#FFFFFF')
                	bold:True        
                	            	      
            MDLabel:
            	text:""        
                  
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
            	text:""        
            MDLabel:
            	text:""      
            	                  
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'     
        	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"lambdas_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.lambdas_pwrttr()
          
            MDLabel:
            	text:""        
                            
            MDLabel:
                text:'visualization'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'
      	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         

                MDRoundFlatButton:
                    text:"kdeplot"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.kdeplot_pwr()    
            	    
            MDLabel:
            	text:""        
            MDLabel:
            	text:""        
            MDLabel:
            	text:""      
                      	      	            	
                    	                
    MDLabel:
        text:""      
    MDLabel:
        text:""       	            	

                       
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"
            on_press:app.pwrtrsc()            	    
            	    	

            	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""         
    MDLabel:
    	text:""           
    MDLabel:
    	text:""            	
    MDLabel:
    	text:""            	

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_pwr_wid 
    	spacing:5
            	                  
    	            	
            	  				
<slr_pwr_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:'kdeplot'
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:pwr_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"train data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:"test data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:pwr_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
                        	    	
            	    	
<slr_max_wid@BoxLayout>:                		   	    

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""
            
    MDLabel:
    	text:"MaxAbsScaler"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""                
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0
                	
            MDLabel:
            	text:""                   
            MDLabel:
            	text:""
            MDLabel:
            	text:""     	
            	             
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5

            	MDCheckbox:
	                size_hint:None,None         
	                id:maxabcpy_scl_chk
	                on_active:app.maxabcpy_scl(*args)
	                height:18 
                MDLabel:
                	text:'copy'      
                	color:hex('#FFFFFF')
                	bold:True 
                	
            MDLabel:
            	text:""                	
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            MDLabel:
            	text:""
      	                	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10

            MDLabel:
            	text:""
            	            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7       
                
                MDRoundFlatButton:
                    text:"scale_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scale_mabsc()
            	    
            	MDRoundFlatButton:
                    text:"max_abs_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.max_abs_mabsc()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10                     	    
            	    
            	MDRoundFlatButton:
                    text:"n_samples_seen_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_samples_seen_mabsc()
            	    
   
            MDLabel:
                text:'visualization'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                MDRoundFlatButton:
                    text:"kdeplot"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.kdeplot_maxabs()       
            	    
            MDLabel:
                text:""          
            MDLabel:
                text:""                            	    
            	    
    MDLabel:
        text:""
    MDLabel:
        text:""                      	
       
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"
            on_press:app.maxabscls()          
            
    MDLabel:
        text:""
    MDLabel:
        text:""                    	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""            
    MDLabel:
    	text:""            
    	      
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_max_wid 
    	spacing:5   	            	
            	  				
<slr_max_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:'kdeplot'
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:maxabs_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"train data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:"test data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:maxabs_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                              	  	
  	     
<slr_min_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    
    MDLabel:
    	text:"MinMaxScaler"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            spacing:10 
            
            MDLabel:
            	text:""
            MDLabel:
                text:''     
            MDLabel:
                text:""
               
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5             
                                       
                MDCheckbox:
                    size_hint:None,None  
                    id:cpy_minslcr_chk
                    on_active:app.cpy_minslcr(*args)
                    height:18 
                    
                MDLabel:
                    text:'copy'
                    color:hex('#FFFFFF')
                    bold:True
         	  
                MDCheckbox:
                    size_hint:None,None  	
                    id:clip_minslcr_chk
                    on_active:app.clip_minslcr(*args)
                    height:18 
                MDLabel:
                    text:'clip'	     
                    color:hex('#FFFFFF')
                    bold:True
                   
                   
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[20,30]
                spacing:0                                    
                                                                                   
                MDTextField:
                	color_mode: 'custom'
                	hint_text:"feature_range"
                	text:"0,1"
                	id:min_minmaslr
                	current_hint_text_color:hex('#b2b2b2')
                	
            MDLabel:
                text:""                              
              
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:''
                
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7         
                
                MDRoundFlatButton:
                    text:"min_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.min_minmcl()
            	    
                MDRoundFlatButton:
                    text:"scale_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.scale_minmcl()
            	    
                MDRoundFlatButton:
                    text:"data_min_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.data_min_minmcl()
            	                	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7         
                            	                	    
                MDRoundFlatButton:
                    text:"data_max_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.data_max_minmcl()
            	    
                MDRoundFlatButton:
                    text:"data_range_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.data_range_minmcl()
            	                	                	                	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7        
            	                	                	                	    
                MDRoundFlatButton:
                    text:"n_samples_seen_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_samples_seen_minmcl()            	    
     
            
            MDLabel:
                text:'visualization'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7    
                
                
                MDRoundFlatButton:
                    text:"kdeplot"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.kdeplot_minmax()       
            	           
            	                
    MDLabel:
        text:""      
    MDLabel:
        text:""       	            	
       
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"
            on_press:app.minmaxscle()
            
            	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""                  
    MDLabel:
        text:""
    MDLabel:
        text:""    	            	
    MDLabel:
        text:""    	            	

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_min_wid 
    	spacing:5
                    	  				
<slr_min_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:'kdeplot'
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:minmax_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"train data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:"test data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:minmax_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                            
            
<slr_dztr_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""
            
    MDLabel:
    	text:"KBinsDiscretizer"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
    	text:""           
    MDLabel:
    	text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            spacing:10 

            MDLabel:
                text:''
            MDLabel:
                text:''                
                
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[12,0]            
                                       
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'n_bins'   
                    text:"5"
                    id:n_bins_dztr    
                    
            MDLabel:
                text:''
                                    
            MDLabel:
                text:'encode'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'  
            MDLabel:
            	text:""
            	height:1
            	                                  
                
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]                            
 
                MDRoundFlatButton:
                    text:"onehot"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.onehot_dtzr()
            	    id:onehot_dtzr_chk
            	                	    
                MDRoundFlatButton:
                    text:"ordinal"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.ordinal_dtzr()    
            	    id:ordinal_dtzr_chk  
            	    
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]                            
            	                	    
            	                	    
                MDRoundFlatButton:
                    text:"onehot-dense"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.onehot_dense_dtzr()
            	    id:onehot_dense_dtzr_chk
	      
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:''   
            MDLabel:
                text:''                   
                     
             	                	       
            MDLabel:
                text:''
                height:5           
 
            MDLabel:
                text:'strategy'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
            MDLabel:
            	text:""
            	height:1
            	                                  
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]                            
 
                MDRoundFlatButton:
                    text:"uniform"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.uniform_dtzr()
            	    id:uniform_dtzr_chk
            	                	    
                MDRoundFlatButton:
                    text:"quantile"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.quantile_dtzr()
            	    id:quantile_dtzr_chk

            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]  
                            	                	    
                MDRoundFlatButton:
                    text:"kmeans"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.kmeans_dtzr()
            	    id:kmeans_dtzr_chk
                                
                              	                                 	    
            MDLabel:
                text:'dtype'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'
            MDLabel:
            	text:""
            	height:1
            	                                  
                
                              	                                     
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]                      
 
                MDRoundFlatButton:
                    text:"np.float32"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.float32_dtzr()
            	    id:float32_dtzr_chk
            	                	    
                MDRoundFlatButton:
                    text:"np.float64"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.float64_dtzr()
            	    id:float64_dtzr_chk
            	                	    
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]    
                            	                	    
                MDRoundFlatButton:
                    text:"None"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.None_dtzr()    
            	    id:None_dtzr_chk
            	                
            MDLabel:
                text:''
                height:30  
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10                      	  
                      	                     
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'    
            MDLabel:
            	text:""
            	height:1
            	                  
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"bin_edges_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.bin_edges_dtrz()
            	    
            	MDRoundFlatButton:
                    text:"n_bins_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_bins_dtrz()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10
                                     	    
            	    
            	MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_dtrz()
            	    
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_dtrz()
            	    
            MDLabel:
                text:''
            MDLabel:
                text:''           	    
            MDLabel:
                text:''
            MDLabel:
                text:''
                                                 
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.dtrzscer()         
            	                    
    MDLabel:
    	text:""           
    MDLabel:
    	text:""                	                    
    MDLabel:
    	text:""           
    MDLabel:
    	text:""    
    MDLabel:
    	text:""            	
    	
    	            	                                	                    
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_dztr_wid 
    	spacing:5
    	
    	
<slr_knnimp_wid@BoxLayout>:                
                                                
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    
    MDLabel:
    	text:"KNNImputer"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            spacing:10
            
            MDLabel:
            	text:""
            	height:15
            	
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:0
                padding:[12,0]             
                                                   
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'n_neighbors'   
                    text:"5"
                    id:n_neighbors_kitr  
                    
                
            MDLabel:
                text:'weights'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                     

            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]            
                                                
            	MDRoundFlatButton:
                    text:"uniform"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.uniform_kitr()
            	    id:uniform_kitr_chk
            	    
            	MDRoundFlatButton:
                    text:"distance"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.distance_kitr()  
            	    id:distance_kitr_chk   
            	    
            MDLabel:
            	text:""
            	                      	    
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:5              
                                                      
                MDCheckbox:
                    size_hint:None,None  
                    id:copy_kitr_chk	  
                    on_active:app.copy_kitr(*args)
                    height:18
                MDLabel:
                    text:'copy'	       
                    color:hex('#FFFFFF')
                    bold:True 

                MDCheckbox:
                    size_hint:None,None  	  
                    id:add_indicator_kitr_chk
                    on_active:app.add_indicator_kitr(*args)
                    height:18
                MDLabel:
                    text:'add_indicator'	       
                    color:hex('#FFFFFF')     
                    bold:True               

              
            MDLabel:
            	text:""
            	                              
                    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"indicator_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.indicator_kitr()
            	    
            	MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_kitr()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10                     	    
            	    
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_kitr()           
            	     	    
              
            MDLabel:
            	text:""              
            MDLabel:
            	text:""              
            MDLabel:
            	text:""            	          
        
    MDLabel:
    	text:""
    MDLabel:
    	text:""

    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.knitrclr()                             

    MDLabel:
        text:""
    MDLabel:
        text:""    	
    MDLabel:
        text:""
    MDLabel:
        text:""    	
    MDLabel:
    	text:""            	
                
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_knnimp_wid 
    	spacing:5

<slr_gusct_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"GenericUnivariateSelect"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            
            MDLabel:
                text:'score_func'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'        
                
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10             

                MDRoundFlatButton:
                    text:"chi2"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    on_press:app.chi2_gusct()
            	    id:chi2_gusct_chk
            	    md_bg_color:hex('#323043')
            	                	    
                MDRoundFlatButton:
                    text:"f_classif"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    on_press:app.f_classif_gusct()
            	    id:f_classif_gusct_chk
            	    md_bg_color:hex('#323043')
            	                	    
                MDRoundFlatButton:
                    text:"mutual_info_classif"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    on_press:app.mutual_info_classif_gusct()
            	    id:mutual_info_classif_gusct_chk
            	    md_bg_color:hex('#323043')      	    

            MDLabel:
                text:'mode'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'        
                
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10             

                MDRoundFlatButton:
                    text:"percentile"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    on_press:app.percentile_gusct()
            	    md_bg_color:hex('#323043')
            	    id:percentile_gusct_chk
            	    
                MDRoundFlatButton:
                    text:"k_best"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    on_press:app.k_best_gusct()
            	    md_bg_color:hex('#323043')
            	    id:k_best_gusct_chk
            	    
                MDRoundFlatButton:
                    text:"fpr"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    on_press:app.fpr_gusct()
            	    md_bg_color:hex('#323043')
            	    id:fpr_gusct_chk
            	    
                MDRoundFlatButton:
                    text:"fdr"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    on_press:app.fdr_gusct()
            	    md_bg_color:hex('#323043')
            	    id:fdr_gusct_chk
            	    
                MDRoundFlatButton:
                    text:"fwe"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    on_press:app.fwe_gusct()
            	    md_bg_color:hex('#323043')
            	    id:fwe_gusct_chk
       	                	    
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[12,0]          

                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'param'   
                    id:param_gusct        
                    text:""
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                      int/float"      
                 
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"scores_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scores_gusct()
            	    
                MDRoundFlatButton:
                    text:"pvalues_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.pvalues_gusct()
            	    
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_gusct()
            	    
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gusct()
            	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.gusctact()         
            	
<slr_sctptl_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"SelectPercentile"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            
            MDLabel:
                text:'score_func'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'        
                
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10             

                MDRoundFlatButton:
                    text:"chi2"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.chi2_sctptl()
            	                	    
                MDRoundFlatButton:
                    text:"f_classif"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.f_classif_sctptl()
            	                	    
                MDRoundFlatButton:
                    text:"mutual_info_classif"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    on_press:app.mutual_info_classif_sctptl()
            	                	    
       	                	    
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[12,0]     

                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'percentile'   
                    id:percentile_sctptl        
                    text:"10"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int"      
                                                    

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"scores_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scores_sctptl()
            	    
                MDRoundFlatButton:
                    text:"pvalues_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.pvalues_sctptl()
            	    
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_sctptl()
            	    
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_sctptl()


    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.sctplact()         
            	    
<slr_slkbt_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"SelectKBest"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            
            MDLabel:
                text:'score_func'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'        
                
            GridLayout:
                cols:3
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[20,0]            

                MDRoundFlatButton:
                    text:"chi2"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.chi2_slkbt()
            	                	    
                MDRoundFlatButton:
                    text:"f_classif"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.f_classif_slkbt()
            	                	    
                MDRoundFlatButton:
                    text:"mutual_info_classif"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.mutual_info_classif_slkbt()
            	                	    
       	                	    
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[12,0]        

                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'k'   
                    id:k_slkbt        
                    text:"10"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int or 'all' "      
                                                    


        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"scores_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scores_slkbt()
            	    
                MDRoundFlatButton:
                    text:"pvalues_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.pvalues_slkbt()
            	    
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_slkbt()
            	    
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_slkbt()




    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.slkbtact()  
            	
<slr_ohecdr_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""          
            
    MDLabel:
    	text:"OneHotEncoder"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""             
    MDLabel:
        text:""
    MDLabel:
        text:""
        
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10
            
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10    
                
            MDLabel:
                text:'drop'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                     	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:10        
            	padding:[20,0]
        
                MDRoundFlatButton:
                    text:"first"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.first_ohecdr()       
                    md_bg_color:hex('#323043')
                    id:first_ohecdr_chk   
        
                MDRoundFlatButton:
                    text:"if_binary"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.if_binary_ohecdr()   
                    md_bg_color:hex('#323043')    
                    id:if_binary_ohecdr_chk      
                    
                MDRoundFlatButton:
                    text:"None"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.None_ohecdr()       
                    md_bg_color:hex('#323043')
                    id:None_ohecdr_chk    
                    
            MDLabel:
                text:"handle_unknown"
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                     	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:10         
            	padding:[20,0]
        
                MDRoundFlatButton:
                    text:"error"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.error_ohecdr()  
                    md_bg_color:hex('#323043')     
                    id:error_ohecdr_chk   
                    
                MDRoundFlatButton:
                    text:"ignore"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.ignore_ohecdr()
                    md_bg_color:hex('#323043')       
                    id:ignore_ohecdr_chk   
                                
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10             
                                       
                MDCheckbox:
                    size_hint:None,None  
                    id:sparse_ohecdr_chk
                    on_active:app.sparse_ohecdr(*args)
                    height:18 	                      
                MDLabel:
                    color:hex('#FFFFFF')
                    text:'sparse'
                    bold:True 
                    
            MDLabel:
            	text:""
            	                     
                                                            
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            spacing:10
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"categories_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.categories_ohecdr()
                
                MDRoundFlatButton:
                    text:"drop_idx_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.drop_idx_ohecdr()
                
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                                
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_ohecdr()
            	    
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_ohecdr()
            	    
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            	  	 
    MDLabel:
        text:""
    MDLabel:
        text:""        

    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.ohecdract()         
            	                     
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	
    	    	            	                     
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_ohecdr_wid 
    	spacing:5
    	                 	                     
<slr_polyft_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"PolynomialFeatures"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""             
    MDLabel:
        text:""
    MDLabel:
        text:""        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10           
            
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[12,0]        

                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:''   
                    id:degree_polyft       
                    text:"2"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int"      
                                                 	   
            MDLabel:
                text:"order"
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                     	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:10            
            	padding:[20,0]
        
                MDRoundFlatButton:
                    text:"C"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.C_polyft()       
                    id:C_polyft_chk                    	      
         	      
                MDRoundFlatButton:
                    text:"F"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.F_polyft()       
                    id:F_polyft_chk
                                                                     	   
            MDLabel:
            	text:""  
            	height:20        
            	                       	   
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:0             
                                       
                MDCheckbox:
                    size_hint:None,None  
                    id:interaction_only_polyft_chk
                    on_active:app.interaction_only_polyft(*args)	     
                    height:18                 
                MDLabel:
                    color:hex('#FFFFFF')
                    text:"interaction_only"
                    bold:True 
         	  
                MDCheckbox:
                    size_hint:None,None  
                    id:include_bias_polyft_chk
                    on_active:app.include_bias_polyft(*args)
                    height:18
                MDLabel:
                    color:hex('#FFFFFF')
                    text:"include_bias"
                    bold:True         	      
         	      

            MDLabel:
            	text:""
            	  
        MDCard:                	                
            orientation: "vertical"
            padding:[8,72]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10   
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'      
                           
            MDLabel:
                text:''
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"powers_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.powers_polyft()
            	               
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_polyft()
                  	                	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                  	                	    
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_polyft()            
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10                 	    	    	    
            	    
                MDRoundFlatButton:
                    text:"n_output_features_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.n_output_features_polyft()      
            	    
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            	              	              	              	    
            	          	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.polyftact()   
            	
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	
    MDLabel:
    	text:""            	

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_polyft_wid 
    	spacing:5          	
            	      
<slr_lblecdr_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"LabelEncoder"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_lblecdr()
            	            	            	               

    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.lblecdract()         

           	               	               	    
<slr_vrthd_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"VarianceThreshold"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[12,0]         

                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:''   
                    id:threshold_vrthd        
                    text:"0"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"      
                                 
     

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"variances_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.variances_vrthd()


                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_vrthd()


                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.feature_names_in_vrthd()


    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.vrthdact()         

                                          
<slr_robust_wid@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
    	text:"RobustScaler"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	     
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10   

            MDLabel:
                text:""
            MDLabel:
                text:""                                                
                  
            GridLayout:
                cols:2
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:0             
                                       
                MDCheckbox:
                    size_hint:None,None  
                    id:with_centering_rbstsr_chk
                    on_active:app.with_centering_rbstsr(*args)	
                    height:18                      
                MDLabel:
                    color:hex('#FFFFFF')
                    text:'with_centering'
                    bold:True 
         	  
                MDCheckbox:
                    size_hint:None,None  
                    id:with_scaling_rbstsr_chk
                    on_active:app.with_scaling_rbstsr(*args)
                    height:18 
                MDLabel:
                    text:'with_scaling'	       
                    color:hex('#FFFFFF')
                    bold:True
                MDCheckbox:
                    size_hint:None,None  	  
                    id:copy_rbstsr_chk
                    on_active:app.copy_rbstsr(*args)
                    height:18 
                MDLabel:
                    text:'copy'
                    color:hex('#FFFFFF')
                    bold:True
         	  
                MDCheckbox:
                    size_hint:None,None  	 
                    id:unit_variance_rbstsr_chk
                    on_active:app.unit_variance_rbstsr(*args)   
                    height:18  
                MDLabel:
                    color:hex('#FFFFFF')
                    text:'unit_variance'
                    bold:True	
                      
            MDLabel:
                text:""
                height:1
                         
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[12,0]                 
          
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'quantile_range'   
                    text:"25.0,75.0"
                    id:quantile_range_rbstsr
                    

            MDLabel:
                text:""
            MDLabel:
                text:""       
              
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:7

            MDLabel:
                text:""                                                
              
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7        
                
                MDRoundFlatButton:
                    text:"center_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.center_robtslr()
            	    
            	MDRoundFlatButton:
                    text:"quantiles_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scale_robtslr()
                
            MDLabel:
                text:'visualization'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"kdeplot"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.kdeplot_robust()
            	    
            MDLabel:
            	text:""
            MDLabel:
            	text:""            	                    
            	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.robustsclr()         

            	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""                  
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	
    	               	     	            	

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_robust_wid 
    	spacing:5
                    	  				
<slr_robust_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:'kdeplot'
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:robust_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"train data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:"test data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:robust_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                
                        	            	

<slr_qt_wid@BoxLayout>:   
             		
    size_hint_y:None 
    adaptive_height:True               	
    height:self.minimum_height
    orientation:'vertical'
    spacing:5
    
    MDLabel:
    	text:"QuantileTransformer"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""
    MDLabel:
        text:""             
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   
            
            MDLabel:
            	text:""          
            MDLabel:
            	text:""          
            MDLabel:
            	text:""          
            	            	
            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10
                padding:[12,0]                
                                
                                
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'n_quantiles'   
                    text:"1000"
                    id:n_quantiles_qttr
                    
                MDTextField:
                    line_color_focus:1,1,1,1 
                    hint_text:'subsample'
                    text:"100000"
                    id:subsample_qttr
        
                MDTextField:
                    line_color_focus:1,1,1,1
                    hint_text:'random_state'
                    text:"None"
                    id:random_state_qttr
                    
            MDLabel:
            	text:""          
            	            	          
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')    
            border_radius: 20
            radius: [14]       
            elevation:0   

            GridLayout:
                cols:1
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height    
                spacing:10           
                
                MDLabel:
                	text:''                	
                                    
                MDLabel:
                	text:'output distribution'
                	color:hex('#FFFFFF')
                	font_size:55
                    font_style:'H6'
                MDLabel:
                    text:''
   	
                GridLayout:
                    cols:2 
                    size_hint_y:None 
                    adaptive_height:True               	
                    height:self.minimum_height  
                    spacing:10 
                    padding:[20,0]
                    
                    MDRoundFlatButton:
                        text:'uniform'
                        text_color:hex('#FFFFFF')
                        md_bg_color:hex('#323043')
                        on_press:app.uniform_qttr()
                        id:uniform_qttr_chk
                 
                    MDRoundFlatButton:
                        text:'normal'
                        text_color:hex('#FFFFFF')
                        md_bg_color:hex('#323043')
                        on_press:app.normal_qttr()
                        id:normal_qttr_chk

                
                MDLabel:
                	text:''
                MDLabel:
                	text:''         
         
                     
                GridLayout:
                    cols:2 
                    size_hint_y:None 
                    adaptive_height:True               	
                    height:self.minimum_height       
                      
                    MDCheckbox:
                        size_hint:None,None 
                        id:cpy_qttr_chk
                        height:18
                        on_active:app.cpy_qttr(*args)
                    MDLabel:
                        text:'copy'
                        color:hex('#FFFFFF')
                        bold:True 
                        
                    MDCheckbox:
                        size_hint:None,None  
                        id:igimzr_qttr_cls_chk
                        height:18
                        on_active:app.igimzr_qttr_cls(*args)                             
                    MDLabel:
                        text:'ignore implicit zeros' 
                        color:hex('#FFFFFF')
                        bold:True
                          
                MDLabel:
                	text:''               
                MDLabel:
                	text:''                	
               	
            
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
          	    
            MDLabel:
                text:""
                            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7        
                
                MDRoundFlatButton:
                    text:"n_quantiles_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_quantiles_qutsc()
            	    
            	MDRoundFlatButton:
                    text:"quantiles_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.quantiles_qutsc()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                            	    
            	MDRoundFlatButton:
                    text:"references_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.references_qutsc()   
            
            MDLabel:
                text:'visualization'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10         

                MDRoundFlatButton:
                    text:"kdeplot"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.kdeplot_qt()   	    
          	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"         
            on_press:
            	app.qutslcsc()                       	    
                             
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""                  
    MDLabel:
    	text:""            	

    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_slr_qt_wid 
    	spacing:5    	            	
            	  				
<slr_qt_wid_vis@BoxLayout>:            	
            	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                	  				
    MDLabel:
    	text:""           
    MDLabel:
    	text:""           
    	    	        
    MDLabel:
    	text:""                             
   	    				   					     
    	   
    GridLayout:
        cols:12
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
	    spacing:5
	    		    
        MDLabel:
            text:'kdeplot'
            color:hex('#FFFFFF')
            font_size:55
            font_style:'H5'          
	    
	    MDIconButton:
	    	icon: "close-circle"
	    	on_release:root.remove()
	    	            
    GridLayout:
        cols:2
        orientation:"horizontal"
        adaptive_height:True
        size_hint_y:None 
        height:self.minimum_height    
    	id:qt_vis_grd      
	    spacing:22	     
	                
        MDLabel:
            text:"train data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'          
            
        MDLabel:
            text:"test data"
            color:hex('#808080')
            font_size:40
            font_style:'H6'                  
        	    	
	MDLabel:
	    text:""
	    color:hex("#FFFFFF")
	    id:qt_ertxt	 
            
        MDLabel:
            text:""    
        MDLabel:
            text:""    	                                    	

<svm_model@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:10
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    MDLabel:
    	text:"SVC"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
           
              
    MDLabel:
        text:""
    MDLabel:
        text:""                      
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:4
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
            
            MDLabel:
                text:'Kernel'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                     	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:5            
            	padding: [10,0]
        
                MDRoundFlatButton:
                    text:"poly"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.poly_1()    
                    id:poly_svm_chk           
                    	
                MDRoundFlatButton:
                    text:"linear"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.linear_1()       
                    id:linear_svm_chk  
                    	    	  
    
                MDRoundFlatButton:
                    text:"rbf"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.rbf_1()       
                    id:rbf_svm_chk             
                            		
                MDRoundFlatButton:
                    text:"sigmoid"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.sigmoid_1()       
                    id:sigmoid_svm_chk                
                    		
            
            MDLabel:
                text:'Gamma'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
                                    	
      # GAMMA                              
                    	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[10,0]
                spacing:10
                
                MDRoundFlatButton:
                    text:"scale"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.scale_1()       
                    id:scale_1_svcid
                    	
                MDRoundFlatButton:
                    text:"auto"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
                    on_press:app.auto_1()   
                    id:auto_1_svcid   
                    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[20,5]
                spacing:0
                                
             
            MDLabel:
            	text:""
            	color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                
 
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14] 
            elevation:0
            spacing:10
            
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:5         
                padding:[12,0]	                          

            MDLabel:
            	text:"Decision function shape"
            	color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height         
                cols:2
                spacing:7
                padding:[20,0]
                
                MDRoundFlatButton:
                    text:"ovo"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
                    on_press:app.ovo_svc_act()   
                    id:ovo_svm_chk   
                                               
                
                MDRoundFlatButton:
                    text:"ovr"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
                    on_press:app.ovr_svc_act()   
                    id:ovr_svm_chk       
                             
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:2
                                                     
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:2
                	
                GridLayout:       
                    size_hint_y:None 
                    adaptive_height:True
                    height:self.minimum_height     	 
                    cols:2
                    spacing:5
                    padding:[5,0]
                    
                    MDCheckbox:  
                        size_hint: None, None
                        on_active:app.shrnk_act(*args)
                        id:shrnk_chk
                        height:18                    	
                    MDLabel:
                        text:'shrinking'
                        color:hex('#FFFFFF')
                        bold:True
                    	 
                    MDCheckbox:
                        size_hint: None, None
                        on_active:app.prob_act(*args)
                        id:prob_chk
                        height:18                    	 
                    MDLabel:
                        text:'probability'
                        color:hex('#FFFFFF') 
                        bold:True
                    	                     		
                    MDCheckbox:
                        size_hint: None, None
                        on_active:app.verbose_act(*args)
                        id:verbose_chk
                        height:18  	                     		
                    MDLabel:
                        text:'verbose'
                        color:hex('#FFFFFF')
                        bold:True 
                
                    MDCheckbox:
                        size_hint: None, None
                        on_active:app.break_act(*args)  
                    	id:break_chk
                    	height:18                
                    MDLabel:
                        text:'break ties'
                        color:hex('#FFFFFF') 
                        bold:True
                        
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:5         
                padding:[12,0]
                	                          
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:5         
                padding:[12,0]	                          
               
               
        MDCard:                	                
            orientation: "vertical"
            padding:[8,18]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]
            elevation:0 
                                                          	           		  
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:10                      
                padding:[12,0]	                      			
                    		                    		
                MDTextField:
                    line_color_focus: hex('#FFFFFF')
                    hint_text:'degree'   
                    id:degree_txt
                    text:"3"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                           int"                
                	
                MDTextField:
                    line_color_focus: hex('#FFFFFF')
                    hint_text:'coef0'
                    id:coef0_txt   	
                    text:"0.0"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"                                    
                    
                	current_hint_text_color:hex('#b2b2b2')
                MDTextField:
                    line_color_focus: hex('#FFFFFF')
                    hint_text:'tol'
                    id:tol_txt
                	current_hint_text_color:hex('#b2b2b2')
                    text:"0.001"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"                                	
                	                	
                MDTextField:
                    line_color_focus: hex('#FFFFFF')
                    hint_text:'cache_size'
                    id: cache_txt
                	current_hint_text_color:hex('#b2b2b2')
                    text:"200"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"                                	
                	
             
        MDCard:                	                
            orientation: "vertical"
            padding:[8,145]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]
            elevation:0 
                                                          	           		  
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:10                      
                padding:[12,0]                 		
                	
                MDTextField:
                    line_color_focus: hex('#FFFFFF')
                    hint_text:'max iter'
                    id:max_iter_txt
                    current_hint_text_color:hex('#b2b2b2')
                    text:"-1"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: " 
                    
                MDTextField:
                    line_color_focus: hex('#FFFFFF')
                    hint_text:'C'
                    id:c_txt                 
                    current_hint_text_color:hex('#b2b2b2')
                    text:"1.0"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                
                                                    
    MDLabel:
    	text:""           
    	                   
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10
                       
        MDRectangleFlatButton:
            text:"Train"
            on_press:
                app.svm_btn()  
                             
        MDRectangleFlatButton:
            text:"Save"
            on_press:
                app.svm_save()                                
    MDLabel:
    	text:""        
    MDLabel:
    	text:""           
    	    	   	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:5                 	  
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "470dp", "294dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"class_weight_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_weight_svmc()
            	    
            	MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_svmc()
            	    
            	MDRoundFlatButton:
                    text:"coef_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.coef_svmc()           	    
            
            	MDRoundFlatButton:
                    text:"dual_coef_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.dual_coef_svmc()
       
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:10         
                            	    
            	MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_svmc()
            	                	                	    
            	MDRoundFlatButton:
                    text:"support_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.support_svmc()

            	MDRoundFlatButton:
                    text:"probB_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')   
            	    on_press:app.probB_svmc()     
     
            	MDRoundFlatButton:
                    text:"fit_status_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043')
            	    on_press:app.fit_status_svmc()           	    
            	    
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:10         
                            	    
            	MDRoundFlatButton:
                    text:"n_support_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043') 
            	    on_press:app.n_support_svmc()     

            	MDRoundFlatButton:
                    text:"probA_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043') 
            	    on_press:app.probA_svmc()      

            	MDRoundFlatButton:
                    text:"shape_fit_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043')  
            	    on_press:app.shape_fit_svmc()                  	           	  
   	                                 
            	MDRoundFlatButton:
                    text:"intercept_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.intercept_svmc()            	    
            	               	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
            	                	    
            	MDRoundFlatButton:
                    text:"support_vectors_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.support_vectors_svmc()
            	        	 
          
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid
        height:self.minimum_height         
        cols:2
        spacing:5               	           	      
            	           	              
    MDLabel:
        text:""
    MDLabel:
        text:""
  
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_svc 
    	spacing:5
    	
    	
<bnnb_model@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:10   
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    MDLabel:
    	text:"BernoulliNB"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""  
   
       
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "270dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0                   
                     	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:1
            	spacing:5            
            	padding:[12,0] 
                    
                MDTextField:
    	            hint_text:'alpha'
                	id:alpha_bnnb       
                	line_color_focus: hex('#FFFFFF')
                    current_hint_text_color:hex('#b2b2b2')
                    text:"1.0"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float" 
                    
                                                                  
                MDTextField:
    	            hint_text:'binarize'
                	id:binarize_bnnb       
                	line_color_focus: hex('#FFFFFF')
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                  float/None" 
                    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:4
            	spacing:5            
            	padding:[2,0]    

                MDCheckbox:  
                    size_hint: None, None
                    on_active:app.fit_prior_bnnb(*args)
                    id:fit_prior_bnnb_chk
                                        	                    	
                MDLabel:
                    text:'fit_prior'
                    color:hex('#FFFFFF')
                    bold:True
               

    MDLabel:
    	text:""
    #MDLabel:
    #	text:""
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.bnnb_btn()
             	
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.bnnb_save()
              
    MDLabel:
    	text:""
    MDLabel:
    	text:""
  
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:5            	
            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
                
                MDRoundFlatButton:
                    text:"class_count_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_count_bnnb()
            	    
                MDRoundFlatButton:
                    text:"class_log_prior_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_log_prior_bnnb()
      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
                
                MDRoundFlatButton:
                    text:"feature_count_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_count_bnnb()
            	            	
                MDRoundFlatButton:
                    text:"feature_log_prob_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_log_prob_bnnb()            	    
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
            	                	    
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_bnnb()
            	            
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_bnnb()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
            	                
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_bnnb()

    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_bnnb
        height:self.minimum_height         
        cols:2
        spacing:5               	           	      
            	           
    MDLabel:
    	text:""
    MDLabel:
    	text:""
  
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_bnnb 
    	spacing:5
    	
    	                                      
<randomizedsearchcv_wid_bnnb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5

    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 

    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0     
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0     
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')                
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                                                              
           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_bnnb_chk
                    on_active:app.returtraiscor_rscv_bnnb(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_bnnb()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_bnnb()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_bnnb()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_bnnb()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_bnnb()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_bnnb()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_bnnb()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_bnnb()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_bnnb()

<randomizedsearch_asgn_bnnb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10   
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_bnnb()        
                       	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.bnnb_save_gs()                                              
                                      
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	     	
<prameter_optimizer_wid_bnnb@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_bnnb 
            	    on_press:app.add_grdscv_bnnb()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_bnnb
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_bnnb()  
 
          

<gridsearchcv_wid_bnnb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10              
               
            MDLabel:
            	text:""          
            	height:1
            	
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10                                                  
            	                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_bnnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"              
                    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gbnnb_chk
                    on_active:app.retutrasco_gscv_bnnb(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
            MDLabel:
            	text:""          
            MDLabel:
            	text:""            
            MDLabel:
            	text:""            
            MDLabel:
            	text:""             

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_bnnb()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_bnnb()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_bnnb()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_bnnb()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_bnnb()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_bnnb()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_bnnb()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_bnnb()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_bnnb()
                                                      

<gridsearch_asgn_bnnb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10    
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_bnnb()        
                 	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.bnnb_save_gs()                                              
                                              
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                        	           
            	                	                	        
<conb_model@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:10
    
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    MDLabel:
    	text:"ComplementNB"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
 
    MDLabel:
    	text:""
    MDLabel:
    	text:""
           
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "270dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0 
            spacing:10 

            MDLabel:
                text:""                           	    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:1
            	spacing:5            
            	padding:[12,0] 
                    
                MDTextField:
    	            hint_text:'alpha'
                	id:alpha_conb       
                	line_color_focus: hex('#FFFFFF')
                    text:"1.0"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float" 

            MDLabel:
                text:""                   
                    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:5            
            	padding:[2,0]    

                MDCheckbox:  
                    size_hint: None, None
                    on_active:app.fit_prior_conb(*args)
                    id:fit_prior_conb_chk
                    height:18 
                                        	                    	
                MDLabel:
                    text:'fit_prior'
                    color:hex('#FFFFFF')
                    bold:True 

                MDCheckbox:  
                    size_hint: None, None
                    on_active:app.norm_conb(*args)
                    id:norm_conb_chk
                    height:18 
                                        	                    	
                MDLabel:
                    text:'norm'
                    color:hex('#FFFFFF')    
                    bold:True 
        
            MDLabel:
                text:""           
         
    MDLabel:
    	text:""
   # MDLabel:
    #	text:""
         
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.conb_btn()
                   	
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.conb_save()
        
    MDLabel:
    	text:""
    MDLabel:
    	text:""
      	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:5            	
            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"class_count_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_count_conb()
                
                MDRoundFlatButton:
                    text:"class_log_prior_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_log_prior_conb()
            	                     	         
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
                                
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_conb()
            	    
                MDRoundFlatButton:
                    text:"feature_all_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_all_conb()
       
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
                                
                MDRoundFlatButton:
                    text:"feature_count_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_count_conb()
            	    
                MDRoundFlatButton:
                    text:"feature_log_prob_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_log_prob_conb()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10                    	    
                
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_conb()
                
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_conb()	    

    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_conb
        height:self.minimum_height         
        cols:2
        spacing:5     
        
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""
                
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_conb 
    	spacing:10
    	
    	                                      
<randomizedsearchcv_wid_conb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
             
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
   
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_conb
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_conb
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_conb
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_conb
                    current_hint_text_color:hex('#b2b2b2')
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_conb
                    current_hint_text_color:hex('#b2b2b2')                                
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_conb
                    current_hint_text_color:hex('#b2b2b2')
                                              
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_conb
                    current_hint_text_color:hex('#b2b2b2')
             
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_conb_chk
                    on_active:app.returtraiscor_rscv_conb(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
          

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_conb()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_conb()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_conb()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_conb()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_conb()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_conb()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_conb()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_conb()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_conb()

<randomizedsearch_asgn_conb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_conb()        
                    	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.conb_save_gs()                                              
                                           
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	
<prameter_optimizer_wid_conb@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_conb 
            	    on_press:app.add_grdscv_conb()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_conb
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_conb()  
 
          

<gridsearchcv_wid_conb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_conb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_conb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_conb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_conb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                   
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0        
            spacing:10     
               
            MDLabel:
            	text:""          
            	height:1
  
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_conb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                                              
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gconb_chk
                    on_active:app.retutrasco_gscv_conb(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
                    
            MDLabel:
            	text:""          
            MDLabel:
            	text:""                      	
            MDLabel:
            	text:""          
            MDLabel:
            	text:""             

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_conb()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_conb()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_conb()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_conb()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_conb()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_conb()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_conb()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_conb()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_conb()
                                                      

<gridsearch_asgn_conb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_conb()        
                	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.conb_save_gs()                                              
                                                 
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	             	    
<ganb_model@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing: 10
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
    
    MDLabel:
    	text:"GaussianNB"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
  
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "270dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
                        	    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:1
            	spacing:5            
            	padding:[12,0] 
                    
                MDTextField:
    	            hint_text:'var_smoothing'
                	id:var_smoothing_ganb       
                	line_color_focus: hex('#FFFFFF')
                    text:"0.000000001"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float" 
                    

    MDLabel:
    	text:""
    #MDLabel:
    #	text:""
    	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10    
                       
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.ganb_btn()
                   	
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.ganb_save()
        
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	    	            	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:5            	
            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "270dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                MDRoundFlatButton:
                    text:"class_count_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_count_ganb()
            	    
                MDRoundFlatButton:
                    text:"class_prior_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_prior_ganb()
            	    
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_ganb()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                            	    
                MDRoundFlatButton:
                    text:"epsilon_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.epsilon_ganb()
            	    
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_ganb()
            	    
                MDRoundFlatButton:
                    text:"var_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.var_ganb()
            	                	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                            	    
            	    
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_ganb()

                MDRoundFlatButton:
                    text:"theta_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.theta_ganb()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5       
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_ganb
        height:self.minimum_height         
        cols:2
        spacing:5               	           	      
            	           	   
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	           	            
          	           	                              
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_ganb 
    	spacing:5
        
                                              
<randomizedsearchcv_wid_ganb@BoxLayout>:

  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
             
    MDLabel:
        text:""
    MDLabel:
        text:""     
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_ganb
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_ganb
                    current_hint_text_color:hex('#b2b2b2')

        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0     
                
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                                 
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_ganb_chk
                    on_active:app.returtraiscor_rscv_ganb(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
                                          
                                                      

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_ganb()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_ganb()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_ganb()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_ganb()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_ganb()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_ganb()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_ganb()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_ganb()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_ganb()
            	    
            	    
<randomizedsearch_asgn_ganb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_ganb()        
                   	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.ganb_save_gs()                                              
                                               
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	            	
<prameter_optimizer_wid_ganb@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_ganb 
            	    on_press:app.add_grdscv_ganb()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_ganb
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_ganb()  
 
          

<gridsearchcv_wid_ganb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0       
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                           
             
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
            spacing:10         
               
            MDLabel:
                text:""  
                height:1
                                                                                       
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
         
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_ganb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"           
                    
                                                                                                                                                                    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gganb_chk
                    on_active:app.retutrasco_gscv_ganb(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
                    
            MDLabel:
                text:""  
            MDLabel:
                text:""  
            MDLabel:
                text:""  
            MDLabel:
                text:""                                                  
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_ganb()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_ganb()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_ganb()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_ganb()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_ganb()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_ganb()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_ganb()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_ganb()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_ganb()
                                                      
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
<gridsearch_asgn_ganb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_ganb()        
         
                    	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.ganb_save_gs()                                              
                                         
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	     
<nrctc_model@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height
    spacing: 10
    
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    MDLabel:
    	text:"NearestCentroid"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
 
           
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "270dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
            spacing:10
                    
            MDLabel:
            	text:""
            	          
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:1
            	spacing:0            
            	padding:[12,0]
            	                	    
                MDTextField:
    	            hint_text:'metric'
                	id:metric_nrctc       
                	line_color_focus: hex('#FFFFFF')
                    text:"euclidean"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str" 
                                	                	                	    
                MDTextField:
    	            hint_text:'shrink_threshold'
                	id:shrink_threshold_nrctc 
                	line_color_focus: hex('#FFFFFF')
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    float/None"         
                    
            MDLabel:
            	text:""
            MDLabel:
                text:"" 	                	                	
                	                                        
    MDLabel:
    	text:""
    #MDLabel:
    #	text:""
                        
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.nrctc_btn()
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.nrctc_save()
          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
                    	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:5            	
            	
            	            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "270dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"centroids_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.centroids_nrctc()    
            	                                             
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_nrctc()    
            	                                 
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10                            
            	                                 
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_nrctc()    
     
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_nrctc()             	    
            
            MDLabel:
                text:''
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'           	       
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_nrctc
        height:self.minimum_height         
        cols:2
        spacing:5   
        
    MDLabel:
    	text:""
    MDLabel:
    	text:""
 
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_nrctc 
    	spacing:10
    	                   
<randomizedsearchcv_wid_nrctc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
              
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0     
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
            
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0
                                                        
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')                                      
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
                         
                                                              
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
                                                                          
                           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_nrctc_chk
                    on_active:app.returtraiscor_rscv_nrctc(*args)

                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
           
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_nrctc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_nrctc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_nrctc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_nrctc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_nrctc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_nrctc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_nrctc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_nrctc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_nrctc()
                         

<randomizedsearch_asgn_nrctc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10    
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_nrctc()        
                 	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.nrctc_save_gs()                                              
                                                   
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	          	
<prameter_optimizer_wid_nrctc@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_nrctc 
            	    on_press:app.add_grdscv_nrctc()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_nrctc
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_nrctc()  
 
          

<gridsearchcv_wid_nrctc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                                                              
              
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10           
              
            MDLabel:
            	text:""
            	height:1
            	                                               
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_nrctc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                 
                    
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gnrctc_chk
                    on_active:app.retutrasco_gscv_nrctc(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
                    
            MDLabel:
            	text:""
            MDLabel:
            	text:""                    
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            	            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_nrctc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_nrctc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_nrctc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_nrctc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_nrctc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_nrctc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_nrctc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_nrctc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_nrctc()
                                                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
	    	    	
<gridsearch_asgn_nrctc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10    
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_nrctc()       
        
                  	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.nrctc_save_gs()                                              
                                              
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                	              	    
<onesvm_model@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    padding: 25
    spacing:10
    
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    MDLabel:
    	text:"OneClassSVM"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
        
    MDLabel:
    	text:""
    MDLabel:
    	text:""             
    MDLabel:
        text:""
    MDLabel:
        text:""    
       
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
            
            MDLabel:
                text:'Kernel'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                     	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:10            
            	padding:[20,0]    
            
                MDRoundFlatButton:
                    text:"poly"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None                   
                    md_bg_color:hex('#323043') 
                    line_width:10
                    id:poly_onesvm_chk
                    on_press:app.poly_onesvm()
        
                MDRoundFlatButton:
                    text:"linear"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043') 
                    line_width:10
                    id:linear_onesvm_chk
                    on_press:app.linear_onesvm()
                                           
                MDRoundFlatButton:
                    text:"rbf"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043') 
                    line_width:10
                    id:rbf_onesvm_chk
                    on_press:app.rbf_onesvm()
                                         
                MDRoundFlatButton:
                    text:"sigmoid"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043') 
                    line_width:10
                    id:sigmoid_onesvm_chk
                    on_press:app.sigmoid_onesvm()
                                    
      # GAMMA           
            MDLabel:
                text:'Gamma'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                                
                    	                      
            GridLayout:
                size_hint_y:None 
        	    adaptive_height:True
                height:self.minimum_height   
                cols:2
                spacing:10 
                padding:[20,0]       	

                MDRoundFlatButton:
                    size_hint: None, None
                    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    text:"scale"
                    md_bg_color:hex('#323043') 
                    line_width:10
                    id:scale_onesvm_chk
                    on_press:app.scale_onesvm()
                    
                      
                MDRoundFlatButton:
                    size_hint: None, None
                    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')     
                    text:"auto"
                    md_bg_color:hex('#323043') 
                    line_width:10
                    id:auto_onesvm_chk
                    on_press:app.auto_onesvm()
                                       
            GridLayout:
                size_hint_y:None 
        	    adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:0 
                padding:[20,5]      
                                

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
              		          	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:0 
                padding:[12,0]              	
                    	          	                    
                MDTextField:
    	            hint_text:'degree'
                	id:degree_onesvm       
                	line_color_focus: hex('#FFFFFF')
                    text:"3"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int" 
                                	    
                         	    
                MDTextField:
    	            hint_text:"coef0"
                	id:coef0_onesvm       
                	line_color_focus: hex('#FFFFFF')
                    text:"0.0"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float" 
                                                 
   
                MDTextField:
    	            hint_text:"tol"
                	id:tol_onesvm       
                	line_color_focus: hex('#FFFFFF')
                    text:"0.001"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"         
        
        
                MDTextField:
    	            hint_text:"nu"
                	id:nu_onesvm       
                	line_color_focus: hex('#FFFFFF')
                    text:"0.5"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"               
                    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
              		          	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:0  
                padding:[12,0]              	                    
                                        
                MDTextField:
    	            hint_text:"cache_size"
                	id:cache_size_onesvm       
                	line_color_focus: hex('#FFFFFF')
                    text:"200"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"                       
        
             
                MDTextField:
    	            hint_text:"max_iter"
                	id:max_iter_onesvm       
                	line_color_focus: hex('#FFFFFF')
                    text:"-1"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int"                           
                       
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:4
            	spacing:5            
            	padding:[20,0]      
  
                MDCheckbox:  
                    size_hint: None, None
                    on_active:app.shrinking_onesvm(*args)
                    id:shrinking_chk_onesvm
                    height:18      
                                   
                MDLabel:
                    text:'shrinking'
                    color:hex('#FFFFFF')
                    bold:True 


                MDCheckbox:  
                    size_hint: None, None
                    on_active:app.verbose_onesvm(*args)
                    id:verbose_chk_onesvm 
                    height:18                            
                                     
                MDLabel:
                    text:'verbose'
                    color:hex('#FFFFFF')
                    bold:True 
                                                          
    MDLabel:
    	text:""
    #MDLabel:
    #	text:""
    	                    	     	     	     	     	    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:5     
                       
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.onesvm_btn()
            
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	    	            	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:5            	
            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
                
                MDRoundFlatButton:
                    text:"class_weight_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_weight_onesvm()      
                                           
                MDRoundFlatButton:
                    text:"dual_coef_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.dual_coef_onesvm()          
                               
                MDRoundFlatButton:
                    text:"fit_status_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.fit_status_onesvm()    
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
                            	                              
                MDRoundFlatButton:
                    text:"intercept_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.intercept_onesvm()
                            
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_onesvm()   
            
                MDRoundFlatButton:
                    text:"offset_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.offset_onesvm()          
                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
                                            
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_onesvm()                      
                            
                MDRoundFlatButton:
                    text:"shape_fit_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.shape_fit_onesvm()     
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
                                            
                MDRoundFlatButton:
                    text:"support_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.support_onesvm()                        
                MDRoundFlatButton:
                    text:"support_vectors_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.support_vectors_onesvm()          
            
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_onesvm
        height:self.minimum_height         
        cols:2
        spacing:5       
                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	    	
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_onesvm 
    	spacing:10
        
                   
<randomizedsearchcv_wid_onesvm@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
              
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
       
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                                              
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                                                                           
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                                                                               
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                                                              
              
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_onesvm_chk
                    on_active:app.returtraiscor_rscv_onesvm(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
           
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_onesvm()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_onesvm()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_onesvm()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_onesvm()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_onesvm()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_onesvm()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_onesvm()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_onesvm()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_onesvm()

<randomizedsearch_asgn_onesvm@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_onesvm()        
                 	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.onesvm_save_gs()                                              
                                                     
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	        	
<prameter_optimizer_wid_onesvm@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_onesvm 
            	    on_press:app.add_grdscv_onesvm()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_onesvm
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_onesvm()  
 
          

<gridsearchcv_wid_onesvm@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                                                 
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                                                              
              
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0        
            spacing:10 
            
            MDLabel:
            	text:""
            	height:1         
            	                                         
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_onesvm
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"          
                                           
                                         
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gonesvm_chk
                    on_active:app.retutrasco_gscv_onesvm(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
                    
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
                                        

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_onesvm()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_onesvm()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_onesvm()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_onesvm()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_onesvm()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_onesvm()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_onesvm()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_onesvm()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_onesvm()
            	                  
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
<gridsearch_asgn_onesvm@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_onesvm()        
                  	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.onesvm_save_gs()                                              
               	                                                    
                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	              	    
<rdgcl_model@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing: 10
    
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    MDLabel:
    	text:"RidgeClassifier"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
    
            
    MDLabel:
        text:""
    MDLabel:
        text:""    
       
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  

            
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:1
            	spacing:0            
            	padding:[12,0]  
                    
                MDTextField:
    	            hint_text:'alpha'
                	id:alpha_rdgcl       
                	line_color_focus: hex('#FFFFFF')
                    text:"1.0"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float" 
                    
                MDTextField:
    	            hint_text:'max_iter'
                	id:max_iter_rdgcl       
                	line_color_focus: hex('#FFFFFF')
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                   int/None"                     
                                            
                MDTextField:
    	            hint_text:'tol'
                	id:tol_rdgcl       
                	line_color_focus: hex('#FFFFFF')
                    text:"0.001"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                   float"          
  
                MDTextField:
    	            hint_text:'random_state'
                	id:random_state_rdgcl       
                	line_color_focus: hex('#FFFFFF')
                    text:"None"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                 int/None"          
  
    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
            spacing:10 
            

            MDLabel:
                text:'solver'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                     	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:3
            	spacing:10        
            	padding:[20,0]  
    
                MDRoundFlatButton:
                    text:"auto"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.auto_rdgcl()    
                    md_bg_color:hex('#323043')  
                    line_width:10
                    id:auto_rdgcl_chk
                    
                MDRoundFlatButton:
                    text:"svd"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.svd_rdgcl()   
                    md_bg_color:hex('#323043')  
                    line_width:10
                    id:svd_rdgcl_chk      
                    
                MDRoundFlatButton:
                    text:"cholesky"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.cholesky_rdgcl()   
                    md_bg_color:hex('#323043')  
                    line_width:10
                    id:cholesky_rdgcl_chk            
                                                 
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:3
            	spacing:10        
            	padding:[20,0]  
                        
                MDRoundFlatButton:
                    text:"lsqr"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.lsqr_rdgcl()      
                    md_bg_color:hex('#323043')  
                    line_width:10
                    id:lsqr_rdgcl_chk        
                    
                MDRoundFlatButton:
                    text:"sparse_cg"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.sparse_cg_rdgcl()    
                    md_bg_color:hex('#323043')  
                    line_width:10
                    id:sparse_cg_rdgcl_chk   
                                                         
                    
                MDRoundFlatButton:
                    text:"sag"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.sag_rdgcl()    
                    md_bg_color:hex('#323043')  
                    line_width:10
                    id:sag_rdgcl_chk                    
                                                              
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:10        
            	padding:[20,0]  
    
                MDRoundFlatButton:
                    text:"saga"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.saga_rdgcl()    
                    md_bg_color:hex('#323043')  
                    line_width:10
                    id:saga_rdgcl_chk                    
                    	     	     	     	     	    
                MDRoundFlatButton:
                    text:"lbfgs"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.lbfgs_rdgcl()    
                    md_bg_color:hex('#323043')  
                    line_width:10
                    id:lbfgs_rdgcl_chk   
                    
                    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:5            
            	padding:[4,0]      
            	
                MDCheckbox:  
                    size_hint: None, None
                    on_active:app.fit_intercept_rdgcl(*args)
                    id:fit_intercept_chk_rdgcl  
                    height:18
                      
                MDLabel:
                    text:'fit_intercept'
                    color:hex('#FFFFFF')
                    bold:True 

                MDCheckbox:  
                    size_hint: None, None
                    on_active:app.copy_X_rdgcl(*args)
                    id:copy_X_chk_rdgcl
                    height:18           
                MDLabel:
                    text:'copy_X'
                    color:hex('#FFFFFF')
                    bold:True 

                MDCheckbox:  
                    size_hint: None, None
                    on_active:app.positive_rdgcl(*args)
                    id:positive_chk_rdgcl     
                    height:18                                             
                MDLabel:
                    text:'positive'
                    color:hex('#FFFFFF')
                    bold:True 
                    
    MDLabel:
    	text:""
    #MDLabel:
    #	text:""
    	                    	     	     	     	     	    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
            
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.rdgcl_btn()
                	
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.rdgcl_save()
                  
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	
    	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:5            	
            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "250dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                MDRoundFlatButton:
                    text:"coef_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.coef_rdgcl()
            	    
                MDRoundFlatButton:
                    text:"intercept_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.intercept_rdgcl() 
            	               	    
            	    
                MDRoundFlatButton:
                    text:"n_iter_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_iter_rdgcl()      
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                     	          	    
            	    
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_rdgcl()
            	    
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rdgcl()
            	     
            MDLabel:
                text:''           	    
            MDLabel:
                text:''              	    
            #MDLabel:
             #   text:''             	    
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_rdgcl
        height:self.minimum_height         
        cols:2
        spacing:5            
        
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
   
            	           	                     	    
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_rdgcl 
    	spacing:5
                   
<randomizedsearchcv_wid_rdgcl@BoxLayout>: 

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                                                                    
                                                 
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                                                              
             
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_rdgcl_chk
                    on_active:app.returtraiscor_rscv_rdgcl(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")                                                     


        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_rdgcl()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_rdgcl()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_rdgcl()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_rdgcl()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_rdgcl()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_rdgcl()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_rdgcl()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_rdgcl()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_rdgcl()


<randomizedsearch_asgn_rdgcl@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_rdgcl()        
                  	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.rdgcl_save_gs()                                              
                                                
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	            	
<prameter_optimizer_wid_rdgcl@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_rdgcl 
            	    on_press:app.add_grdscv_rdgcl()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_rdgcl
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_rdgcl()  
 
          

<gridsearchcv_wid_rdgcl@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    
                
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                                                                 
               
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0          
            spacing:10    
               
            MDLabel:
            	text:""
            	height:1         
      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                  
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_rdgcl
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                      
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_grdgcl_chk
                    on_active:app.retutrasco_gscv_rdgcl(*args)
                    
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            MDLabel:
            	text:""                    
            MDLabel:
            	text:""
            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_rdgcl()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_rdgcl()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_rdgcl()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_rdgcl()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_rdgcl()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_rdgcl()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_rdgcl()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_rdgcl()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_rdgcl()
                                                      
    MDLabel:
        text:""
    MDLabel:
        text:""    
                                                              
<gridsearch_asgn_rdgcl@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_rdgcl()       
                 	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.rdgcl_save_gs()                                              
                                             
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                	            	    
            	    
<nu_model@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing: 10
    
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    
    MDLabel:
    	text:"NuSVC"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    

    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:4
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
            
            MDLabel:
                text:'Kernel'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                     	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:10            
            	padding:[10,0]    
    
                MDRoundFlatButton:
                    text:"poly"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.poly_nusvcls()   
                    md_bg_color:hex('#323043')
                    id:poly_nusvcls_chk
                                       
                      
                MDRoundFlatButton:
                    text:"linear"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    on_press:app.linear_nusvcls()
                    md_bg_color:hex('#323043')
                    id:linear_nusvcls_chk
                    
                MDRoundFlatButton:
                    text:"rbf"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.rbf_nusvcls()   
                    id:rbf_nusvcls_chk      
                    
                MDRoundFlatButton:
                    text:"sigmoid"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.sigmoid_nusvcls() 
                    id:sigmoid_nusvcls_chk  
                      
      # GAMMA           
            MDLabel:
                text:'gamma'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                                
                    	                      
            GridLayout:
                size_hint_y:None 
        	    adaptive_height:True
                height:self.minimum_height   
                cols:2
                spacing:10 
                padding:[10,0]     	

                MDRoundFlatButton:               
                    text:"scale"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.scale_nusvcls() 
                    id:scale_nusvcls_chk                  
                      
                MDRoundFlatButton:
                    text:"auto"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.auto_nusvcls() 
                    id:auto_nusvcls_chk         
  
            GridLayout:
                size_hint_y:None 
        	    adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:0
                padding:[20,5]                       
                
                
            MDLabel:
            	text:""
            	color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,20]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
              		          	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:5                 	
        
                MDTextField:
    	            hint_text:'nu'
                	id:nu_txt_nusvc       
                	line_color_focus: hex('#FFFFFF')
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0.5"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"    
                    
                                        		        
                                        		                    		            		
                MDTextField:
                    line_color_focus: hex('#FFFFFF')
                    hint_text:'degree'   
                    id:degree_txt_nusvc                 
                    current_hint_text_color:hex('#b2b2b2')
                    text:"3"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                           int"     
                	
                MDTextField:
                    line_color_focus: hex('#FFFFFF')
                    hint_text:'coef0'
                    id:coef0_txt_nusvc   	
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0.0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"    
                                        
                    
                	
                MDTextField:
                    line_color_focus: hex('#FFFFFF')
                    hint_text:'tol'
                    id:tol_txt_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0.001"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"                                                                                                                 float"                        
                    

        MDCard:                	                
            orientation: "vertical"
            padding:[8,52]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
            spacing:10 
            

            MDLabel:
            	text:""
            	color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
              		          	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                spacing:5   
                padding:[12,0]                                               	
                                         	
                MDTextField:
                    line_color_focus: 0,0,0,0
                    hint_text:'cache size'
                    id:cache_txt_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"200"
                    current_hint_text_color:hex('#b2b2b2')
                    #helper_text_mode: "on_focus"
                    #helper_text: "                	
                	
                MDTextField:
                    line_color_focus: 0,0,0,0
                    hint_text:'max iter'
                    id:max_iter_txt_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"-1"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                           int"                        
                    
                MDTextField:
                    line_color_focus: 0,0,0,0
                    hint_text:'random state'
                    id:random_state_txt_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"  
    
            
    

            MDLabel:
            	text:""
            	color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
            spacing:10 
            
            MDLabel:
            	text:""
            	color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                                                         
                         
            MDLabel:
                text:'decision function shape'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                           
            MDLabel:
                text:''
                                
                                          	     
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height         
                cols:2
                spacing:10   
                padding:[10,0]                        
            
                MDRoundFlatButton:
                    text:"ovo"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.ovo_nusvcls() 
                    id:ovo_nusvcls_chk                             
                    	
                MDRoundFlatButton:
                    text:"ovr"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.ovr_nusvcls() 
                    id:ovr_nusvcls_chk
                   
            MDLabel:
            	text:""
            	color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                                       

            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:1
                	
                GridLayout:       
                    size_hint_y:None 
                    adaptive_height:True
                    height:self.minimum_height     	 
                    cols:2 
                    spacing:5
                    padding:[5,0]                    
                    
                    MDCheckbox:  
                        size_hint: None, None
                        on_active:app.shrnk_act(*args)
                        id:shrnk_chk_nu
                        height:18
                    MDLabel:
                        text:'shrinking'
                        color:hex("#FFFFFF")
                        bold:True 
                    	 
                    MDCheckbox:
                        size_hint: None, None
                        on_active:app.prob_act(*args)
                        id:prob_chk_nu       
                        height:18             	 
                    MDLabel:
                        text:'probability'
                        color:hex("#FFFFFF")      
                        bold:True              	 
                    		
                    MDCheckbox:
                        size_hint: None, None
                        on_active:app.verbose_act(*args)
                        id:verbose_chk_nu     
                        height:18               		
                    MDLabel:
                        text:'verbose'
                        color:hex("#FFFFFF")
                        bold:True 
                
                    MDCheckbox:
                        size_hint: None, None
                        on_active:app.break_act(*args)  
                    	id:break_chk_nu                
                    	height:18
                    MDLabel:
                        text:'break ties'
                        color:hex("#FFFFFF")
                        bold:True 
                      
            MDLabel:
            	text:""
            	color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                     
       
                                           
    MDLabel:
        text:""
    #MDLabel:
     #   text:""    
                      
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                          
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.nu_btn()
            
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.nu_save()
           
            
    MDLabel:
        text:""
    MDLabel:
        text:""    
  
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:5            	
            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "485dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:7        
                
                MDRoundFlatButton:
                    text:"class_weight_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')  
            	    on_press:app.class_weight_nusvc()
            	    
            	MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.classes_nusvc()
            	    
            	MDRoundFlatButton:
                    text:"coef_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.coef_nusvc()           	                 
                
            	MDRoundFlatButton:
                    text:"dual_coef_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.dual_coef_nusvc()
           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:7         
                            	      
            	MDRoundFlatButton:
                    text:"intercept_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.intercept_nusvc()
            	                                	                          	          	    
            	MDRoundFlatButton:
                    text:"fit_status_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')      
            	    on_press:app.fit_status_nusvc()
            	                                  	    
            	MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.n_features_in_nusvc()
            	                	                	    
            	                	                	    
            	MDRoundFlatButton:
                    text:"n_support_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043')       
            	    on_press:app.n_support_nusvc()

            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:4
                padding:[20,0]
                spacing:7       
                            	    
            	                	                	    
            	MDRoundFlatButton:
                    text:"support_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.support_nusvc()

            	MDRoundFlatButton:
                    text:"probA_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF') 
            	    md_bg_color:hex('#323043')       
            	    on_press:app.probA_nusvc()   


            	MDRoundFlatButton:
                    text:"probB_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')       
            	    on_press:app.probB_nusvc() 
 	                	    
            	MDRoundFlatButton:
                    text:"shape_fit_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')       
            	    on_press:app.shape_fit_nusvc()  
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:7        
                            	                	              
            	MDRoundFlatButton:
                    text:"support_vectors_"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.support_vectors_nusvc()            	                	
            	                	
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_nusvc
        height:self.minimum_height         
        cols:2
        spacing:5              
        
    MDLabel:
        text:""
    MDLabel:
        text:""     	          
         	      
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_nusvc 
    	spacing:5
                    	           
<prameter_optimizer_wid_nusvc@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_nusvc 
            	    on_press:app.add_grdscv_nusvc()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_nusvc
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_nusvc()  
 
                    
<randomizedsearchcv_wid_nusvc@BoxLayout>:


    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
           
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                                                       
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')                             
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                 
                           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_nusvc_chk
                    on_active:app.returtraiscor_rscv_nusvc(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
                                               
                    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_nusvc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_nusvc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_nusvc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_nusvc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_nusvc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_nusvc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_nusvc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_nusvc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_nusvc()


<randomizedsearch_asgn_nusvc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_nusvc()                  
                 	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.nu_save_gs()                                              
                                            
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	     
<gridsearchcv_wid_nusvc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	    
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
    	text:""
    MDLabel:
    	text:""        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0              
            spacing:10    
               
            MDLabel:
            	text:""
            	height:1                        
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_nusvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                                      
                                                       
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gnusvc_chk
                    on_active:app.retutrasco_gscv_nusvc(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            	            	                    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_nusvc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_nusvc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_nusvc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_nusvc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_nusvc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_nusvc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_nusvc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_nusvc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_nusvc()
                                                      
    MDLabel:
    	text:""
    MDLabel:
    	text:""

<gridsearch_asgn_nusvc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_nusvc()                    	
                    	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.nu_save_gs()                                              
                                           
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	          
<model_log@BoxLayout>:
    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:10
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
    
    MDLabel:
    	text:"LogisticRegression"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             

    MDLabel:
    	text:""
    MDLabel:
    	text:""       
    	
    	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:4
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
            spacing:10
 
            MDLabel:
                text:'Penalty'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                         	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:10           
            	padding:[10,0]       
            	
                MDRoundFlatButton:
                    text:"l1"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.l1_lgr() 
                    id:l1_lgr_chk      
                    
                MDRoundFlatButton:
                    text:"l2"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.l2_lgr() 
                    id:l2_lgr_chk      
                            
                MDRoundFlatButton:
                    text:"none"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.none_lgr() 
                    id:none_lgr_chk  
                                     	        
                MDRoundFlatButton:
                    text:"elasticnet"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.ela_lgr() 
                    id:ela_lgr_chk         
                    
 
            MDLabel:
                text:'solver'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'       
                
            GridLayout:           
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:3
            	spacing:5
            	padding:[10,0]
            	                   
                MDRoundFlatButton:
                    text:"lbfgs"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.lbf_lgr() 
                    id:lbf_lgr_chk                     
                    
                MDRoundFlatButton:
                    text:"liblinear"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.lib_lgr() 
                    id:lib_lgr_chk  
                                      
                MDRoundFlatButton:
                    text:"sag"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.sag_lgr() 
                    id:sag_lgr_chk         
                    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:5
            	padding:[10,0]         
            	
                MDRoundFlatButton:
                    text:"saga"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.saga_lgr() 
                    id:saga_lgr_chk      
                    
                MDRoundFlatButton:
                    text:"newton-cg"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.newton_lgr() 
                    id:newton_lgr_chk  
                                                         
                    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
                    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:1
            	spacing:0    
            	padding:[12,0]   	    	   		 		
                	
                MDTextField:
                	hint_text:'tol'
                	id:tol_log
                	current_hint_text_color:hex('#b2b2b2')
                	text:"0.001"
                	
                MDTextField:
                	hint_text:'C'
                	id:c_log
                	current_hint_text_color:hex('#b2b2b2')
                	text:"1.0"
    	
                MDTextField:
    	            hint_text:'intercept scaling'
                	id:inter_log
                	current_hint_text_color:hex('#b2b2b2')
                	text:"1"
    	
                MDTextField:
    	            hint_text:'random state'
    	            id:rndm_log
                	current_hint_text_color:hex('#b2b2b2')
                	text:"None"
 
                	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10 
                    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:1
            	spacing:0     
            	padding:[12,0]                   	
    	
                MDTextField:
    	            hint_text:'n jobs'
                	id:n_log
                	current_hint_text_color:hex('#b2b2b2')
                	text:"None"
    	
                MDTextField:
                	hint_text:'l1 ratio'
                	id:l1_log
                	current_hint_text_color:hex('#b2b2b2')
                	text:"None"
                	
                MDTextField:
                	hint_text:'verbose'
                	id:vrb_log
                	current_hint_text_color:hex('#b2b2b2')    
                	text:"0"
                	            	    	  	
                MDTextField:
                	hint_text:'max iter'
    	            id:max_log
                	current_hint_text_color:hex('#b2b2b2')    
                	text:"100"	   	   
                      	        	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0      	
            spacing:10        	
            		
            MDLabel:
            	text:'multi class'
            	color:hex('#FFFFFF')  
            	font_size:55
                font_style:'H6'    
    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:10
            	padding:[10,0]                	
                   
                MDRoundFlatButton:
                    text:"auto"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.auto_lgr() 
                    id:auto_lgr_chk                      
                      	        	            	
                MDRoundFlatButton:
                    text:"ovr"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.ovr_lgr() 
                    id:ovr_lgr_chk                              
  
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:10
            	padding:[10,0]                             

                MDRoundFlatButton:
                    text:"multinomial"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')      
                    size_hint: None, None
                    md_bg_color:hex('#323043')
                    on_press:app.multi_lgr() 
                    id:multi_lgr_chk                               
            MDLabel:
                text:""
                       
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
            	spacing:5
            	padding:[4,0]        

            	MDCheckbox:
    	        	size_hint:None,None
    	        	id:dual_lgr_chk
    	        	on_active:app.dual_lgr(*args)  
    	        	height:18 
    	        MDLabel:
    	        	text:'dual'    	
                	color:hex('#FFFFFF')  
                	bold:True 	        	

            	MDCheckbox:
    	        	size_hint:None,None
    	        	id:fit_intercept_lgr_chk
    		        on_active:app.fit_lgr(*args)
    		        height:18    					
    	        MDLabel:
    	        	text:'fit intercept'   
                	color:hex('#FFFFFF')  
                	bold:True	        		

            	MDCheckbox:
    	        	size_hint:None,None 	 
    	        	id:warm_lgr_chk
    	        	on_active:app.warm_lgr(*args)  
    	        	height:18  		
            	MDLabel:
    	        	text:'warm start'
                	color:hex('#FFFFFF') 
                	bold:True
                	
    MDLabel:
    	text:""
    #MDLabel:
    #	text:""                		                    	                    
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15  
            		
        MDRectangleFlatButton:
        	text:"Train"
        	on_release:
    	    	app.log_btn()
               	
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.log_save()
    		
    MDLabel:
    	text:""
    MDLabel:
    	text:""    		
    		
    		
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:5
    	    		
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10         
                
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF') 
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_logrc()  	

                MDRoundFlatButton:
                    text:"coef_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043')	
            	    on_press:app.coef_logrc()

                MDRoundFlatButton:
                    text:"intercept_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043')
            	    on_press:app.intercept_logrc()	
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10                     	    

                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_logrc()	

                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_logrc()	

                MDRoundFlatButton:
                    text:"n_iter_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_iter_logrc()	
            	    
            MDLabel:
                text:""
            MDLabel:
                text:""

    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_logreg
        height:self.minimum_height         
        cols:2
        spacing:5       
             	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""

    	    	            	        
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_logreg 
    	spacing:5
    	                                      
<randomizedsearchcv_wid_logreg@BoxLayout>: 

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_logreg
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
               
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                            
                                      
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_logreg
                    current_hint_text_color:hex('#b2b2b2')                                      
                                                         
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
                                                              
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
                           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:0      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_logreg_chk
                    on_active:app.returtraiscor_rscv_logreg(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
                     
                    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_logreg()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_logreg()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_logreg()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_logreg()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_logreg()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_logreg()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_logreg()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_logreg()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_logreg()
         
         
         
<randomizedsearch_asgn_logreg@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_logreg()        
                	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.log_save_gs()                                              
                                              
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                	
<prameter_optimizer_wid_logreg@BoxLayout>:    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_logreg 
            	    on_press:app.add_grdscv_logreg()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_logreg
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_logreg()  
 
          

<gridsearchcv_wid_logreg@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                
 
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0              
            spacing:10    
               
            MDLabel:
            	text:""
            	height:1                                   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_logreg
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"               
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_glogreg_chk
                    on_active:app.retutrasco_gscv_logreg(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
                    
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
      
         
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_logreg()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_logreg()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_logreg()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_logreg()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_logreg()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_logreg()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_logreg()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_logreg()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_logreg()
                                                      
    MDLabel:
        text:""
    MDLabel:
        text:""    
                                                                               

<gridsearch_asgn_logreg@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_logreg()        
                 	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.log_save_gs()                                              
    
                                                      
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	            	            	        		    		
            	        		    				    				    		
<model_knn@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height
    spacing:10
    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
    
    MDLabel:
    	text:"KNeighborsClassifier"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""          
       
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
            spacing:10
            
            MDLabel:
                text:'weights'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10         
                    	                    	
                MDRoundFlatButton:
                    text:'uniform'
                	line_width:10
                	id:uniform_knb_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.uniform_knb()
                	    	                                           	
                MDRoundFlatButton:
                    text:'distance'
                	line_width:10
                	id:distance_knb_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.distance_knb()

            MDLabel:
                text:'algorithm'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10             
                
                MDRoundFlatButton:
                    text:'auto'
                	line_width:10
                	id:auto_knb_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.auto_knb()
                    
                    
                MDRoundFlatButton:
                    text:'ball_tree'
                	line_width:10
                	id:ball_tree_knb_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.ball_tree_knb()      
                                  
                MDRoundFlatButton:
                    text:'kd_tree'
                	line_width:10
                	id:kd_tree_knb_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.kd_tree_knb()  
                               
                MDRoundFlatButton:
                    text:'brute'
                	line_width:10
                	id:brute_knb_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.brute_knb()  

            MDLabel:
                text:''
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'     
                padding:[0,15]  

        MDCard:                	                
            orientation: "vertical"
            padding:[8,18]
            size_hint: None, None
            size: "355dp", "310dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0  
                         
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0                         	
                        	
                MDTextField:
                	hint_text:'n neighbours'
                	id:n_neigh_knn
                	text:"5"
                        	                        	
                MDTextField:
                	hint_text:'leaf size'
                	id:leaf_knn
                	current_hint_text_color:hex('#b2b2b2')
                	text:"30"
    	
                MDTextField:
                	hint_text:'p'
    	            id:p_knn
                	current_hint_text_color:hex('#b2b2b2')
                	text:"2"
    	
                MDTextField:
                	hint_text:'metric'
                	id:metric_knn
                	current_hint_text_color:hex('#b2b2b2')
                	text:"minkowski"

                MDTextField:
                	hint_text:'n jobs'
                	id:n_job_knn
                	current_hint_text_color:hex('#b2b2b2')
                	text:"None"
        	
    MDLabel:
    	text:""
    #MDLabel:
    #	text:""
    	    		
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                               
        MDRectangleFlatButton:
            text:"Train"
            on_release:
                app.knn_btn()      
                		          		
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.knn_save()
             	       		
    MDLabel:
    	text:""
    MDLabel:
    	text:""            	       		
            	       		
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:5
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        
                
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_knc()
            	    
                MDRoundFlatButton:
                    text:"outputs_2d_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
            	    md_bg_color:hex('#323043')
            	    on_press:app.outputs_2d_knc()   
            	              	     	   
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10        
                            	     	             	     
                MDRoundFlatButton:
                    text:"effective_metric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')     
            	    md_bg_color:hex('#323043')
            	    on_press:app.effective_metric_knc()
            	     	             	     	
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_knc()
            	                	     	    	    	 	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10        	
            	                	     	    	    	 	    			
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_knc()
            	    
                MDRoundFlatButton:
                    text:"n_samples_fit_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_samples_fit_knc()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10       	    
            	    
                MDRoundFlatButton:
                    text:"effective_metric_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.effective_metric_params_knc()
            	                	     	    	   
            	                	     	    	   
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_knn
        height:self.minimum_height         
        cols:2
        spacing:5               	 
                    	    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
   	
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_knn 
    	spacing:5
        
                                              
<randomizedsearchcv_wid_knn@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_knn
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_knn
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_knn
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_knn
                    current_hint_text_color:hex('#b2b2b2')
        
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                                                               
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_knn
                    current_hint_text_color:hex('#b2b2b2')                                  
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_knn
                    current_hint_text_color:hex('#b2b2b2')
                                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_knn
                    current_hint_text_color:hex('#b2b2b2')
              
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_knn_chk
                    on_active:app.returtraiscor_rscv_knn(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
            

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_knn()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_knn()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_knn()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_knn()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_knn()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_knn()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_knn()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_knn()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_knn()
                                                                  

<randomizedsearch_asgn_knn@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_knn()        
               	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.knn_save_gs()                                              
                                                
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	
<prameter_optimizer_wid_knn@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_knn 
            	    on_press:app.add_grdscv_knn()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_knn
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_knn()  
 
          

<gridsearchcv_wid_knn@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_knn
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_knn
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_knn
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_knn
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                 
                         
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0              
               
            spacing:10    
               
            MDLabel:
            	text:""
            	height:1  

            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                 
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_knn
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                     
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gknn_chk
                    on_active:app.retutrasco_gscv_knn(*args)
                    height:18 
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
                    
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            MDLabel:
            	text:""
            	            	            	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_knn()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_knn()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_knn()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_knn()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_knn()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_knn()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_knn()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_knn()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_knn()
                                                      
    MDLabel:
        text:""
    MDLabel:
        text:""    
                                                              
<gridsearch_asgn_knn@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_knn()        
         
                	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.knn_save_gs()                                              
                                              
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                	                    	    
            	    
<model_linear_svc@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:10

    MDLabel:
        text:""
    MDLabel:
    	text:""    	
    	    
    MDLabel:
    	text:"LinearSVC"
    	font_size:55 
    	font_style:"H5"
    	color:hex('#FFFFFF') 
    	
    MDLabel:
        text:""
    MDLabel:
    	text:""    	 
        	
    GridLayout:		   
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height
        spacing:10
        cols:3      			
    	    	    	    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]  
            elevation:0
            spacing:10    
               
            MDLabel:
                text:'penalty'
                font_size:55
                font_style:"H6"
                color:hex('#FFFFFF')
            
            GridLayout:
                size_hint_y:None 
                spacing:10
                adaptive_height:True
                height:self.minimum_height                
                cols:2
                padding:[10,0]         
                
                MDRoundFlatButton:
                    text:"l1"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.l1_ld()       
                    id:l1_ld_chk                          
    
                MDRoundFlatButton:
                    text:"l2"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.l2_ld()       
                    id:l2_ld_chk                   	 			

            MDLabel:
    	        text:'loss'
            	color:hex('#FFFFFF')
            	font_size:55 
            	font_style:"H6"
    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
    	        height:self.minimum_height          
                cols:2
    	        spacing:10
    	        padding:[10,0]     
    	
                MDRoundFlatButton:
                    text:"hinge"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.hinge_ld()       
                    id:hinge_ld_chk                   	 			
    	
    		
                MDRoundFlatButton:
                    text:"squared_hinge"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.squared_hinge_ld()       
                    id:squared_hinge_ld_chk      
                               		
            MDLabel:
            	text:"multi class"
            	font_size:55 
            	font_style:"H6"
            	color:hex('#FFFFFF')	
    	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
        	    height:self.minimum_height          
                cols:2
                padding:[10,0]    
            	spacing:10
    	
                MDRoundFlatButton:
                    text:"ovr"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.ovr_ld()       
                    id:ovr_ld_chk      
                               		    	
                MDRoundFlatButton:
                    text:"crammer_singer"            	   
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')     
                    on_press:app.crammer_singer_ld()  
                    id:crammer_singer_ld_chk 
                    
            MDLabel:
                text:''
                font_size:55
                font_style:"H6"
                color:hex('#FFFFFF')                    
                        	    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]    
            elevation:0  


            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:1
    	        spacing:0 
    	        padding:[12,0] 
    	            	
                MDTextField:
                	hint_text:'tol'
                	id:tol_svc
                	current_hint_text_color:hex('#b2b2b2')
                    text:"0.0001"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"            	
            	
                MDTextField:
    	            hint_text:'c'
            	    id:c_svc
                	current_hint_text_color:hex('#b2b2b2')
                    text:"1.0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"                	
                	    	
                MDTextField:
    	            hint_text:'intercept scaling'
    	            id:inter_svc
    	            current_hint_text_color:hex('#b2b2b2')
                    text:"1"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        float"    	      	        	
    	    	                

                MDTextField:
                	hint_text:'verbose'
                	id:vrb_svc
                	current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                           int"           	
    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]      
            elevation:0
            spacing:7

            MDLabel:
                text:''
                font_size:55
                font_style:"H6"
                color:hex('#FFFFFF')    	 
                height:8
                       
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:1
    	        spacing:0
    	        padding:[12,0] 	
	                	           	   
                MDTextField:
                	hint_text:'random state'
    	            id:rndm_svc
    	            current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                   int/None"                                  	                	
	                	
                MDTextField:
            	    hint_text:'max iter'
                	id:max_svc
            	    current_hint_text_color:hex('#b2b2b2')
            	    text:"1000"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                           int"             	    
            	
         
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
            	height:self.minimum_height          
                cols:2
    	        spacing:10
    	        padding:[5,0]    
    	
        	    MDCheckbox:
    		        size_hint:None,None   
    		        id:dual_ld_chk
    	    	    on_active:app.dual_ld(*args)
    	    	    height:18
    	    	        	
            	MDLabel:
    	        	text:'dual'
    	        	color:hex('#FFFFFF') 
    	        	bold:True 
   
            	MDCheckbox:
    	    	    size_hint:None,None   
    	    	    id:fit_ld_chk
    	        	on_active:app.fit_ld(*args)
    	        	height:18    		 		
    	        MDLabel:
    	        	text:'fit intercept'
    	        	color:hex('#FFFFFF') 
    	        	bold:True 
	        	
       
            MDLabel:
                text:''
                font_size:55
                font_style:"H6"
                color:hex('#FFFFFF')    	       
            MDLabel:
                text:''
                font_size:55
                font_style:"H6"
                color:hex('#FFFFFF')    	       
                                                                 	
            	
    MDLabel:
        text:""
    #MDLabel:
    #	text:""    	
    	            	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
       
        MDRectangleFlatButton:
            text:"Train"
            on_release:
            	app.lnr_svc_btn()            
        MDRectangleFlatButton:
            text:"Save"
            on_press:
                app.lsvc_save()                                

    MDLabel:
        text:""
    MDLabel:
    	text:""    	
   
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height          
        spacing:10   
        cols:2    		
        		    		    		
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "277dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10     
                    
                MDRoundFlatButton:
                    text:"coef_"
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')        
                    md_bg_color:hex('#323043')
                    on_press:app.coef_lnrsv()      	
            	
                MDRoundFlatButton:
                    text:"intercept_"
                	line_color:1,1,1,1
                    text_color:hex('#FFFFFF') 
                    md_bg_color:hex('#323043')
                    on_press:app.intercept_lnrsv()       
            	    
                MDRoundFlatButton:
                    text:"classes_"
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    md_bg_color:hex('#323043')
                    on_press:app.classes_lnrsv()    
                     
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10     
                            	    
                MDRoundFlatButton:
                    text:"n_features_in_"
                    line_color:1,1,1,1
                	text_color:hex('#FFFFFF')   
                	md_bg_color:hex('#323043')
                	on_press:app.n_features_in_lnrsv()     

                MDRoundFlatButton:
                    text:"feature_names_in_"
                	line_color:1,1,1,1
                	text_color:hex('#FFFFFF')    
                	md_bg_color:hex('#323043')
                	on_press:app.feature_names_in_lnrsv()   
                	
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10     
                
                MDRoundFlatButton:
                    text:"n_iter_"
                	line_color:1,1,1,1
                    text_color:hex('#FFFFFF')     
                    md_bg_color:hex('#323043')
                    on_press:app.n_iter_lnrsv()   
  
            MDLabel:
                text:''
                font_size:55
                font_style:"H6"
                color:hex('#FFFFFF')    	       
            MDLabel:
                text:''
                font_size:55
                font_style:"H6"
                color:hex('#FFFFFF')    	
                
    MDLabel:
        text:""
    MDLabel:
    	text:""    	
    	
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_lsvc
        height:self.minimum_height         
        cols:2
        spacing:5              

    MDLabel:
        text:""
    MDLabel:
    	text:""    	                
    	         	           	      
             
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_lsvc 
    	spacing:5
    	                   
<randomizedsearchcv_wid_lsvc@BoxLayout>:


    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                                                     

                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                         
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')                         
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                                 
          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                                                 
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:0      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_lsvc_chk
                    on_active:app.returtraiscor_rscv_lsvc(*args)

                MDLabel:
                    text:"return_train_score"
                    color:hex('#FFFFFF')
                    bold:True 
                    
                                  
                                                                        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_lsvc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_lsvc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_lsvc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_lsvc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_lsvc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_lsvc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_lsvc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_lsvc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_lsvc()
                                      

<randomizedsearch_asgn_lsvc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_lsvc()        
                  	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.lsvc_save_gs()                                              
                                                
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	            	
<prameter_optimizer_wid_lsvc@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_lsvc 
            	    on_press:app.add_grdscv_lsvc()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_lsvc
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_lsvc()  
 
          

<gridsearchcv_wid_lsvc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         

              
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0              
            spacing:10    
               
            MDLabel:
            	text:""
            	height:1                 
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                  
                 
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_lsvc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                       
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_glsvc_chk
                    on_active:app.retutrasco_gscv_lsvc(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
                    
            MDLabel:
            	text:""
            MDLabel:
            	text:""                    
            MDLabel:
            	text:""
            MDLabel:
            	text:""      
            	                    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_lsvc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_lsvc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_lsvc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_lsvc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_lsvc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_lsvc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_lsvc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_lsvc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_lsvc()
                                                                          

<gridsearch_asgn_lsvc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_lsvc()        
         
              	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.lsvc_save_gs()                                              
                                                 
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	             
 
<model_sgd@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    
    MDLabel:
    	text:"SGDClassifier"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'     
        
    MDLabel:
        text:""
    MDLabel:
        text:""
  
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height 
        spacing:10   
        cols:3
        
        MDCard:                	                
            orientation: "vertical"
            padding: "20dp"
            size_hint: None, None
            size: "355dp", "320dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0     
            
            MDTextField:
            	hint_text:'alpha'      
            	id:alpha_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"0.0001"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                float"        
                
            MDTextField:
            	hint_text:'l1_ratio'      
            	id:l1_ratio_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"0.15"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                float"                                      
 
            MDTextField:
            	hint_text:'max_iter'      
            	id:max_iter_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"1000"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                 int"          
 
            MDTextField:
            	hint_text:'tol'      
            	id:tol_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"0.0001"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                 float"          
 
            MDTextField:
            	hint_text:'verbose'      
            	id:verbose_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"0"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                 int"          
                
 
        MDCard:                	                
            orientation: "vertical"
            padding: "20dp"
            size_hint: None, None
            size: "355dp", "320dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0     
             
            MDTextField:
            	hint_text:'epsilon'      
            	id:epsilon_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"0.1"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                float"                          
                                             
 
            MDTextField:
            	hint_text:'n_jobs'      
            	id:n_jobs_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"None"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                             int/None"      
                
            MDTextField:
            	hint_text:'random_state'      
            	id:random_state_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"None"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                             int/None"       
                
            MDTextField:
            	hint_text:'eta0'      
            	id:eta0_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"0.0"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                             "             
                                                                      
            MDTextField:
            	hint_text:'power_t'      
            	id:power_t_sgdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"0.5"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                             "                  

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "320dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0     
            spacing:5
             
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0] 
                spacing:0        
                
                
                MDTextField:
                	hint_text:'validation_fraction'      
                	id:validation_fraction_sgdc
    	    	    current_hint_text_color:hex('#b2b2b2')
                    text:"0.1"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                 float"          
                 
                         
                MDTextField:
                	hint_text:'n_iter_no_change'      
                	id:n_iter_no_change_sgdc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:"5"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                  int"       

                MDTextField:
                	hint_text:'average'      
                	id:average_sgdc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:"False"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                               {True,False}/int"         
  
                      
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:2 
                padding:[4,0] 
        
                MDCheckbox:
                	size_hint:None,None   
                	id:fit_intercept_sgdc_chk
                	on_active:app.fit_intercept_sgdc(*args)
                	height:18
                MDLabel:
        	        text:'fit_intercept'
        	        color:hex('#FFFFFF') 
        	        bold:True 


                MDCheckbox:
                	size_hint:None,None   
                	id:shuffle_sgdc_chk
                	on_active:app.shuffle_sgdc(*args)
                	height:18  
                MDLabel:
        	        text:'shuffle'
        	        color:hex('#FFFFFF') 
        	        bold:True 

                MDCheckbox:
                	size_hint:None,None   
                	id:early_stopping_sgdc_chk
                	on_active:app.early_stopping_sgdc(*args)
                	height:18 	     	         
                MDLabel:
        	        text:'early_stopping'
        	        color:hex('#FFFFFF') 
        	        bold:True 
        	        
                MDCheckbox:
                	size_hint:None,None  
                	id:warm_start_sgdc_chk 
                	on_active:app.warm_start_sgdc(*args)  
                	height:18
                MDLabel:
        	        text:'warm_start'
        	        color:hex('#FFFFFF') 
        	        bold:True 


        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0     
            spacing:7 

            MDLabel:
                text:'loss'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10         
                    
                MDRoundFlatButton:
                    text:"hinge"
                    line_color:1,1,1,1
                    md_bg_color:hex('#323043')
                    text_color:hex('#FFFFFF')        
                    on_press:app.hinge_sgdc()      
                    id:hinge_sgdc_chk	
            	
                MDRoundFlatButton:
                    text:"log"
                	line_color:1,1,1,1
                    text_color:hex('#FFFFFF') 
                    md_bg_color:hex('#323043')
                    on_press:app.log_sgdc()      
                    id:log_sgdc_chk 
                    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0] 
                spacing:10                             
            	    
                MDRoundFlatButton:
                    text:"modified_huber"
                    line_color:1,1,1,1
                    md_bg_color:hex('#323043')
                    text_color:hex('#FFFFFF')
                    on_press:app.modified_huber_sgdc()
                    id:modified_huber_sgdc_chk   
                    	    
            	    
                MDRoundFlatButton:
                    text:"squared_hinge"
                    line_color:1,1,1,1
                    md_bg_color:hex('#323043')
                	text_color:hex('#FFFFFF')   
                	on_press:app.squared_hinge_sgdc()
                	id:squared_hinge_sgdc_chk

            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0] 
                spacing:10         

                MDRoundFlatButton:
                    text:"perceptron"
                	line_color:1,1,1,1
                	text_color:hex('#FFFFFF')   
                	md_bg_color:hex('#323043')  
                	on_press:app.perceptron_sgdc()   
                	id:perceptron_sgdc_chk

                MDRoundFlatButton:
                    text:"squared_error"
                	line_color:1,1,1,1
                    text_color:hex('#FFFFFF')     
                    md_bg_color:hex('#323043')
                    on_press:app.squared_error_sgdc()
                    id:squared_error_sgdc_chk   
   
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10            
   
                MDRoundFlatButton:
                    text:"huber"
                	line_color:1,1,1,1
                    text_color:hex('#FFFFFF')     
                    md_bg_color:hex('#323043')
                    on_press:app.huber_sgdc()   
                    id:huber_sgdc_chk
     
                MDRoundFlatButton:
                    text:"epsilon_insensitive"
                	line_color:1,1,1,1
                	md_bg_color:hex('#323043')
                    text_color:hex('#FFFFFF')     
                    on_press:app.epsilon_insensitive_sgdc()   
                    id:epsilon_insensitive_sgdc_chk
     
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[20,0] 
                spacing:10               
     
                MDRoundFlatButton:
                    text:"squared_epsilon_insensitive"
                	line_color:1,1,1,1
                	md_bg_color:hex('#323043')
                    text_color:hex('#FFFFFF')     
                    on_press:app.squared_epsilon_insensitive_sgdc()   
                    id:squared_epsilon_insensitive_sgdc_chk  

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "310dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10                           
                                  	
            MDLabel:
                text:'penalty'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0] 
                spacing:10         
                    
                MDRoundFlatButton:
                    text:"l1"
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')        
                    md_bg_color:hex('#323043')
                    on_press:app.l1_sgdc()  
                    id:l1_sgdc_chk
                    
                MDRoundFlatButton:
                    text:"l2"
                    md_bg_color:hex('#323043')
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')        
                    on_press:app.l2_sgdc()  
                    id:l2_sgdc_chk
                    
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[20,0] 
                spacing:10          
                    
                MDRoundFlatButton:
                    text:"elasticnet"
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')      
                    md_bg_color:hex('#323043')  
                    on_press:app.elasticnet_sgdc()  	  
                    id:elasticnet_sgdc_chk
                         	           
            MDLabel:
                text:'class_weight'
                color:hex('#FFFFFF')
                font_size:55
                md_bg_color:hex('#323043')
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
                adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0] 
                spacing:10         
                    
                MDRoundFlatButton:
                    text:"None"
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')        
                    md_bg_color:hex('#323043')
                    on_press:app.None_sgdc()  
                    id:None_sgdc_chk
                    
                MDRoundFlatButton:
                    text:"balanced"
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')        
                    md_bg_color:hex('#323043')
                    id:balanced_sgdc_chk
                    on_press:app.balanced_sgdc()  

            MDLabel:
                text:''
            MDLabel:
                text:''
            MDLabel:
                text:''
                           
    MDLabel:
        text:""
    #MDLabel:
     #   text:""
                                     
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"
            on_press:app.sgd_btn()
                 	
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.sgd_save()
        
    MDLabel:
        text:""
    MDLabel:
        text:""          
  	
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height 
        spacing:10   
        cols:2
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10         
                
                MDRoundFlatButton:
                    text:"coef_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.coef_sgd()
            	                
                MDRoundFlatButton:
                    text:"intercept_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.intercept_sgd()
            	                
                MDRoundFlatButton:
                    text:"n_iter_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_iter_sgd()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10                   	    
            	    
                MDRoundFlatButton:
                    text:"loss_function_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.loss_function_sgd() 
            	    
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_sgd() 
            	               	                	               	    
                MDRoundFlatButton:
                    text:"t_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.t_sgd() 
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0] 
                spacing:10                   	    
            	    
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_sgd()  
            	               	    
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_sgd()  
            MDLabel:
                text:''
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
           	                    	                    	               	                 	    
    MDLabel:
        text:""
    MDLabel:
        text:""
        
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_sgdc
        height:self.minimum_height         
        cols:2
        spacing:5               
        
    MDLabel:
        text:""
    MDLabel:
        text:""
    
                        
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_sgdc 
    	spacing:5     
                   
                   
<randomizedsearchcv_wid_sgdc@BoxLayout>:

    
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:""     
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
            
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                                                                               
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')  
                                                               
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
           
                           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:0      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_sgdc_chk
                    on_active:app.returtraiscor_rscv_sgdc(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
          
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_sgdc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_sgdc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_sgdc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_sgdc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_sgdc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_sgdc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_sgdc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_sgdc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_sgdc()                                                                                

<randomizedsearch_asgn_sgdc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_sgdc()        
                   	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.sgd_save_gs()                                              
                                              
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	             	
<prameter_optimizer_wid_sgdc@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_sgdc 
            	    on_press:app.add_grdscv_sgdc()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_sgdc
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_sgdc()  
 
          

<gridsearchcv_wid_sgdc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                
             
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0   
            spacing:10 
            
            MDLabel:
                text:""
                height:1         
               
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_sgdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"              
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gsgdc_chk
                    on_active:app.retutrasco_gscv_sgdc(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
                              
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_sgdc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_sgdc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_sgdc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_sgdc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_sgdc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_sgdc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_sgdc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_sgdc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_sgdc()
                                                      
    MDLabel:
        text:""
    MDLabel:
        text:""                                                      

<gridsearch_asgn_sgdc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_sgdc()        
               	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.sgd_save_gs()                                              
      
                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                               	                  	    	    	    
            	               	                	               	
<model_gradient_boosting@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height
    spacing:5
    
        
    MDLabel:
        text:""
    MDLabel:
        text:""
    
    MDLabel:
    	text:"GradientBoostingClassifier"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'     
         
    MDLabel:
        text:""
    MDLabel:
        text:""               
    MDLabel:
        text:""
    MDLabel:
        text:""        
 
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height 
        spacing:10   
        cols:3
        
        MDCard:                	                
            orientation: "vertical"
            padding: "20dp"
            size_hint: None, None
            size: "355dp", "320dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0    
               	                
            MDTextField:
            	hint_text:'learning_rate'      
            	id:learning_rate_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:"0.1"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                float"   
                                    
            MDTextField:
            	hint_text:'n_estimators'      
            	id:n_estimators_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'100'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                             int"               
                
            MDTextField:
            	hint_text:'subsample'      
            	id:subsample_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'1.0'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                             float"                                       
 
 
            MDTextField:
            	hint_text:'min_samples_split'      
            	id:min_samples_split_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'2'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                           int/float"      
                
            MDTextField:
            	hint_text:'min_samples_leaf'      
            	id:min_samples_leaf_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'1'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                           int/float"           
                
        MDCard:                	                
            orientation: "vertical"
            padding: "20dp"
            size_hint: None, None
            size: "355dp", "320dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0      
 
            MDTextField:
            	hint_text:'min_weight_fraction_leaf'      
            	id:min_weight_fraction_leaf_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'0.0'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                               float"       
 
            MDTextField:
            	hint_text:'max_depth'      
            	id:max_depth_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'3'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                 int"       
  
            MDTextField:
            	hint_text:'min_impurity_decrease'      
            	id:min_impurity_decrease_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'0.0'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                float"        

            MDTextField:
            	hint_text:'random_state'      
            	id:random_state_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'0.0'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                              int/None" 
                        
            MDTextField:
            	hint_text:'max_leaf_nodes'      
            	id:max_leaf_nodes_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'None'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                               int/None"                   
    
        MDCard:                	                
            orientation: "vertical"
            padding: "20dp"
            size_hint: None, None
            size: "355dp", "320dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0    
       
            MDTextField:
            	hint_text:'verbose'      
            	id:verbose_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'0'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                 int"              
        
          
            MDTextField:
            	hint_text:'validation_fraction'      
            	id:validation_fraction_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'0.1'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                float"                   
            
            MDTextField:
            	hint_text:'n_iter_no_change'      
            	id:n_iter_no_change_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'None'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                               int/None"   
                
               
            MDTextField:
                hint_text:'tol'      
            	id:tol_grdc
    		    current_hint_text_color:hex('#b2b2b2')
                text:'0.0001'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                float"                             
                
            MDTextField:
                hint_text:'ccp_alpha'      
                id:ccp_alpha_grdc
    	        current_hint_text_color:hex('#b2b2b2')
                text:'0.0'
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                float"       
                                       
                          
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "280dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0  
            spacing:10                            
              
            GridLayout:
                size_hint_y:None 
                spacing:0
                adaptive_height:True
                height:self.minimum_height                
                cols:1
                padding:[12,0]                          
	                  
            MDLabel:
                text:'loss'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'     

            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:2 
                padding:[10,0]      
                
                MDRoundFlatButton:
                    text:"deviance"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')               	    
            	    md_bg_color:hex('#323043') 
            	    line_width:10
            	    id:deviance_grdc_chk
            	    on_press:app.deviance_grdc()     
            	                                      
                MDRoundFlatButton:
                    text:"exponential"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043') 
            	    line_width:10
            	    id:exponential_grdc_chk
            	    on_press:app.exponential_grdc()   
            	    

            MDLabel:
                text:'criterion'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'     

            GridLayout:
                size_hint_y:None 
                spacing:10
                adaptive_height:True
                height:self.minimum_height                
                cols:2 
                padding:[10,0]         
                

                MDRoundFlatButton:
                    text:"friedman_mse"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043') 
            	    line_width:10
            	    id:friedman_mse_grdc_chk
            	    on_press:app.friedman_mse_grdc()  
            	    
                MDRoundFlatButton:
                    text:"squared_error"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043') 
            	    line_width:10
            	    id:squared_error_grdc_chk
            	    on_press:app.squared_error_grdc() 
            	          
            MDLabel:
                text:''           	          
            	                                     
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:2
                padding:[2,0]
            
                MDCheckbox:
                	size_hint:None,None   
                	id:warm_start_grdc_chk
                	on_active:app.warm_start_grdc(*args)
                	height:18 
                MDLabel:
        	        text:'warm_start'
        	        color:hex('#FFFFFF')
        	        bold:True 
             	          
            #MDLabel:
             #   text:''              	          
            #MDLabel:
             #   text:''           	                
    MDLabel:
        text:""
    #MDLabel:
     #   text:""
            	                                     
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:5     
                       
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.grbst_btn()
            	
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.grbst_save()
   
        
    MDLabel:
        text:""
    MDLabel:
        text:""
 
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height
        spacing:10   
        cols:2
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "440dp", "300dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10         
                
                MDRoundFlatButton:
                    text:"n_estimators_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_estimators_grdcat()
            	    
                MDRoundFlatButton:
                    text:"feature_importances_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_importances_grdcat()            	    
            	                     	    
                MDRoundFlatButton:
                    text:"loss_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')  
            	    md_bg_color:hex('#323043')
            	    on_press:app.loss_grdcat()       
            	               	    
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10         
                            	    
                MDRoundFlatButton:
                    text:"oob_improvement_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.oob_improvement_grdcat()            	    
            	    
                MDRoundFlatButton:
                    text:"train_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.train_score_grdcat()        
           
                MDRoundFlatButton:
                    text:"init_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.init_grdcat()   
    
            	            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10         
                            	    
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_grdcat()        
            	  
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_grdcat()
            	               	    
                MDRoundFlatButton:
                    text:"estimators_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.estimators_grdcat() 
            	               	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10                     	    
            	    
                MDRoundFlatButton:
                    text:"n_classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_classes_grdcat()   
            	      
                MDRoundFlatButton:
                    text:"max_features_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.max_features_grdcat()
                 	                	              
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')  
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_grdcat()
            	    
    MDLabel:
        text:""
    MDLabel:
        text:""

    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_grdc
        height:self.minimum_height         
        cols:2
        spacing:5               	 
        
    MDLabel:
        text:""
    MDLabel:
        text:""        
        	     
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_grdc 
    	spacing:5
    	
                   
<randomizedsearchcv_wid_grdc@BoxLayout>: 

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_grdc
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
         
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_grdc
                    current_hint_text_color:hex('#b2b2b2')                                                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
                                                              
              
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_grdc_chk
                    on_active:app.returtraiscor_rscv_grdc(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
         
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_grdc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_grdc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_grdc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_grdc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_grdc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_grdc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_grdc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_grdc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_grdc()

<randomizedsearch_asgn_grdc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_grdc()        
               	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.grbst_save_gs()                                              
                                                   
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	            	
<prameter_optimizer_wid_grdc@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_grdc 
            	    on_press:app.add_grdscv_grdc()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_grdc
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_grdc()  
 
          

<gridsearchcv_wid_grdc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""        
    
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                                              
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
              
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0              
            spacing:10 
            
            MDLabel:
                text:""
                height:1                        
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_grdc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                                      
                                                           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_ggrdc_chk
                    on_active:app.retutrasco_gscv_grdc(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
                    
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""                                             


        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_grdc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_grdc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_grdc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_grdc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_grdc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_grdc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_grdc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_grdc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_grdc()
                                                      
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	  
<gridsearch_asgn_grdc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10    
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_grdc()        
                     	               	                                                    	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.grbst_save_gs()                                              
                                                
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	      
                 	    	    	    
<mnb_model@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:10
          
    MDLabel:
        text:""
    MDLabel:
        text:""       
    
    MDLabel:
    	text:"MultinomialNB Classifier"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'     
        
    MDLabel:
        text:""
    MDLabel:
        text:""       

    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height 
        spacing:10   
        cols:2
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "270dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:1
                padding:[12,0]                          
                                         	                
                MDTextField:
                	hint_text:'alpha'      
                	id:alpha_mnbc
                	current_hint_text_color:hex('#b2b2b2')
                    text:"1.0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                  float"     
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:4
                padding:[4,0]
                                                   
                MDCheckbox:
                	size_hint:None,None   
                	id:fit_prior_mnbc_chk
                	on_active:app.fit_prior_mnbc(*args)
                MDLabel:
        	        text:'fit_prior'
        	        color:hex('#FFFFFF')
        	        bold:True 
             
  
    MDLabel:
        text:""
    #MDLabel:
     #   text:""
          
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.mnnbc_btn()
                  	
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.mnnbc_save()
       
    MDLabel:
        text:""
    MDLabel:
        text:""
                   	
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height 
        spacing:10   
        cols:2
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "355dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0] 
                spacing:10         
                
                MDRoundFlatButton:
                    text:"class_count_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_count_mnbca()
            	      
                MDRoundFlatButton:
                    text:"class_log_prior_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.class_log_prior_mnbca()
            	                  	           
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0] 
                spacing:10         
                            	                  	           
                MDRoundFlatButton:
                    text:"feature_count_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_count_mnbca()
            	                  	           
                MDRoundFlatButton:
                    text:"feature_log_prob_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_log_prob_mnbca()
            	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0] 
                spacing:10         
                            	             
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_mnbca()
            	      
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_mnbca()
            	                  	                     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0] 
                spacing:10         
                            	                         
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_mnbca()
            	    
            	                  	                          
    MDLabel:
        text:""
    MDLabel:
        text:""
        
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_mnb
        height:self.minimum_height         
        cols:2
        spacing:5            
        
    MDLabel:
        text:""
    MDLabel:
        text:""
               	           	         	           	      
            	         
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_mnb 
    	spacing:5
    	
    	
                   
<randomizedsearchcv_wid_mnb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_mnb
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
             
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
               
                                        
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                                
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                                 
                                                              
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                                                              
             
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:0      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_mnb_chk
                    on_active:app.returtraiscor_rscv_mnb(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_mnb()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_mnb()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_mnb()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_mnb()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_mnb()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_mnb()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_mnb()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_mnb()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_mnb()
                                                                    

<randomizedsearch_asgn_mnb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_mnb()        
                	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.mnnbc_save_gs()                                              
                                                  
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	            	
<prameter_optimizer_wid_mnb@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_mnb 
            	    on_press:app.add_grdscv_mnb()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_mnb
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_mnb()  
 
          

<gridsearchcv_wid_mnb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                
      
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0                             
            spacing:10 
            
            MDLabel:
                text:""
                height:1              
      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                  
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_mnb
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                                      
                                             
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gmnb_chk
                    on_active:app.retutrasco_gscv_mnb(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
           
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""            
            MDLabel:
                text:""

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_mnb()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_mnb()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_mnb()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_mnb()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_mnb()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_mnb()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_mnb()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_mnb()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_mnb()
                                                      
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
<gridsearch_asgn_mnb@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_mnb()        
              	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.mnnbc_save_gs()                                              
                                                   
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                 
       
<model_random_forest@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing: 10
    
    MDLabel:
        text:""
    MDLabel:
        text:""    
    
    MDLabel:
    	text:"RandomForestClassifier"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'     
        
    MDLabel:
        text:""
    MDLabel:
        text:""
  
        
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height 
        spacing:10   
        cols:4      
         
                       
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0    
               	                
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:1 
                padding:[12,0]
                               	            
                MDTextField:
                	hint_text:'n_estimators'      
                	id:n_estimators_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:"100"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                 int"   
                                    
                MDTextField:
                	hint_text:'max_depth'      
                	id:max_depth_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:'None'
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                             int/None"         
                
                MDTextField:
            	    hint_text:'min_samples_split'      
                	id:min_samples_split_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:'2'
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                            int/float"       
                
                MDTextField:
                	hint_text:'min_samples_leaf'      
                	id:min_samples_leaf_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:'1'
                    
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"      
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0    
                               
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:1 
                padding:[12,0]
                                                               
                MDTextField:
                	hint_text:'max_leaf_nodes'      
                	id:max_leaf_nodes_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:'None'
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                             int/None"         
                
                MDTextField:
                	hint_text:'min_impurity_decrease'      
                	id:min_impurity_decrease_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:'0.0'
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                               float"       
                
                MDTextField:
                	hint_text:'n_jobs'      
                	id:n_jobs_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:'None'
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                             int/None"       
 
                MDTextField:
                	hint_text:'min_weight_fraction_leaf'      
                	id:min_weight_fraction_leaf_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:'0.0'
                    #helper_text_mode: "on_focus"
                    #helper_text: "   
             
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"   
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0    
            
                               
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:1 
                padding:[12,0]           
                 
                MDTextField:
                	hint_text:'random_state'      
                	id:random_state_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:'None'
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                             int/None"                           

                MDTextField:
                	hint_text:'verbose'      
                	id:verbose_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                 int"   
                          
                MDTextField:
                	hint_text:'ccp_alpha'      
                	id:ccp_alpha_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:"0.0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                               float"      

                MDTextField:
                	hint_text:'max_samples'      
                	id:max_samples_rdfc
    		        current_hint_text_color:hex('#b2b2b2')
                    text:'None'
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                    int or float/None"
                                        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,42]
            size_hint: None, None
            size: "310dp", "296dp"        
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0      
      
            MDLabel:
                text:''
            MDLabel:
                text:''       
                                                                
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:2 
                padding:[0,5] 
          
                MDCheckbox:
                	size_hint:None,None   
                	id:bootstrap_rdfc_chk
                	on_active:app.bootstrap_rdfc(*args)
                	height:18        
                MDLabel:
        	        text:'bootstrap'
        	        color:hex('#FFFFFF')
        	        bold:True 
                	
                MDCheckbox:
                	size_hint:None,None   
                	id:oob_score_rdfc_chk
                	on_active:app.oob_score_rdfc(*args)
                	height:18        	
                MDLabel:
                	color:hex('#FFFFFF') 
                	text:'oob_score'
                	bold:True 
  
                MDCheckbox:
                	size_hint:None,None   
                	id:warm_start_rdfc_chk
                	on_active:app.warm_start_rdfc(*args)
                	height:18
                MDLabel:
                	color:hex('#FFFFFF') 
                	text:'warm_start'
                	bold:True 
     
            MDLabel:
                text:''
            MDLabel:
                text:''                 	
             
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "310dp", "296dp"        
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0       
            
            MDLabel:
            	text:'criterion'
            	color:hex('#FFFFFF')
            	font_size:55
                font_style:'H6'     
    
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:2 
                padding:[10,0]         
                      	                                      
                MDRoundFlatButton:
                    text:'gini'
                	line_width:10
                	id:gini_rdfc_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.gini_rdfc()     
                                	          
                MDRoundFlatButton:
                    text:'entropy'
                	line_width:10
                	id:entropy_rdfc_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.entropy_rdfc()     
          
            MDLabel:
            	text:'class_weight'
            	color:hex('#FFFFFF')
            	font_size:55
                font_style:'H6'     
    
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:2 
                padding:[10,0]         
                
                MDRoundFlatButton:
                    text:'balanced'
                	line_width:10
                	id:balanced_rdfc_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.balanced_rdfc()     
                             
                MDRoundFlatButton:
                    text:'balanced_subsample'
                	line_width:10
                	id:balanced_subsample_rdfc_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.balanced_subsample_rdfc()
                                                                   
                MDRoundFlatButton:
                    text:'None'
                	line_width:10
                	id:None_rdfc_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.None_rdfc()      
        
            MDLabel:
            	text:''
            	color:hex('#FFFFFF')
            	font_size:55
                font_style:'H6'     
                padding:[0,10]
    
    MDLabel:
        text:""
    #MDLabel:
     #   text:""
        
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
            
        MDRectangleFlatButton:
            text:"Train"
            on_press:
            	app.rndmfrst_btn()          
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.rndmfrst_save()
          	
    MDLabel:
        text:""
    MDLabel:
        text:""
            	
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height
        spacing:10   
        cols:2
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "440dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10      
                
                MDRoundFlatButton:
                    text:"base_estimator_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.base_estimator_rdfcc()
            	      
            	    
                MDRoundFlatButton:
                    text:"estimators_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043')
            	    on_press:app.estimators_rdfcc()   
                        	     	 	 	
            	                	     	 	 	
                MDRoundFlatButton:
                    text:"n_classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF') 
            	    md_bg_color:hex('#323043')   
            	    on_press:app.n_classes_rdfcc()  
         
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10      
                                        	    
                MDRoundFlatButton:
                    text:"n_outputs_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_outputs_rdfcc()  
            	    
                MDRoundFlatButton:
                    text:"feature_importances_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_importances_rdfcc()                 	    
   	    
                MDRoundFlatButton:
                    text:"n_features_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')  
            	    md_bg_color:hex('#323043')  
            	    on_press:app.n_features_rdfcc()   


            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10      
                                        	    
            	    
                MDRoundFlatButton:
                    text:"oob_decision_function_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
            	    md_bg_color:hex('#323043')
            	    on_press:app.oob_decision_function_rdfcc()                 	        
            	    
                MDRoundFlatButton:
                    text:"oob_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
            	    md_bg_color:hex('#323043')
            	    on_press:app.oob_score_rdfcc()     
                             
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')     
            	    md_bg_color:hex('#323043')
            	    on_press:app.classes_rdfcc()  
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:10                                            	    
            	    
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_rdfcc()   
            	     
            	      	                                                	    
    MDLabel:
        text:""
    MDLabel:
        text:""
                    	                	             
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_rdfc
        height:self.minimum_height         
        cols:2
        spacing:5               	  
        
    MDLabel:
        text:""
    MDLabel:
        text:""
                
        
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_rdfc 
    	spacing:5
                            	           
                   
<randomizedsearchcv_wid_rdfc@BoxLayout>:

 
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
               
    MDLabel:
        text:""
    MDLabel:
        text:""   
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                
                                              
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
                                               
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
                                 
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
              
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:0      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_rdfc_chk
                    on_active:app.returtraiscor_rscv_rdfc(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")                                               


        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_rdfc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_rdfc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_rdfc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_rdfc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_rdfc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_rdfc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_rdfc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_rdfc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_rdfc()

<randomizedsearch_asgn_rdfc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_rdfc()        
             	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.rndmfrst_save_gs()                                              
                                                   
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	              	
<prameter_optimizer_wid_rdfc@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_rdfc 
            	    on_press:app.add_grdscv_rdfc()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_rdfc
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_rdfc()  
 
          

<gridsearchcv_wid_rdfc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
       
    MDLabel:
        text:""
    MDLabel:
        text:""    
 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""    
                
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
           
                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0              
            spacing:10 
            
            MDLabel:
                text:""
                height:1                             
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_rdfc
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"     
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_grdfc_chk
                    on_active:app.retutrasco_gscv_rdfc(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True 
                    color:hex("#FFFFFF")
                    
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
            MDLabel:
                text:""
                                                
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_rdfc()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_rdfc()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_rdfc()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_rdfc()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_rdfc()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_rdfc()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_rdfc()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_rdfc()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_rdfc()
                                                      
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
<gridsearch_asgn_rdfc@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_rdfc()        
                             	  
             	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.rndmfrst_save_gs()                                              
                                                  
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	                       	      	    
                    	      	        	    
                    	      	        	        	        	    
<model_dt@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:10
    
    MDLabel:
        text:""
    MDLabel:
        text:""
            
    MDLabel:
    	text:"Decision Tree Classifier"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'     
        

    MDLabel:
        text:""
    MDLabel:
        text:""
  
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height 
        spacing:10   
        cols:3
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,72]
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0    
               	
            MDLabel:
            	text:'criterion'
            	color:hex('#FFFFFF')
            	font_size:55
                font_style:'H6'     
    
            GridLayout:
                size_hint_y:None 
                spacing:10
                adaptive_height:True
                height:self.minimum_height                
                cols:2 
                padding:[20,0] 
                
                MDRoundFlatButton:
                    text:'gini'
                	line_width:10
                	id:gini_dt_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.gini_dt()                  
     
                MDRoundFlatButton:
                    text:'entropy'
                	line_width:10
                	id:entropy_dt_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.entropy_dt()     
                                 
 
            MDLabel:
            	text:'splitter'
            	color:hex('#FFFFFF')
            	font_size:55
                font_style:'H6'                 	
    
      	  GridLayout:
                size_hint_y:None 
            	spacing:10
            	adaptive_height:True
       	     height:self.minimum_height                
            	cols:2 
            	padding:[20,0]  
            	
                MDRoundFlatButton:
                    text:'best'
                	line_width:10
                	id:best_dt_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.best_dt()     
                                             	
                MDRoundFlatButton:
                    text:'random'
                	line_width:10
                	id:random_dt_chk
            	    md_bg_color:hex('#323043')  
                    line_color:1,1,1,1
                    text_color:hex('#FFFFFF')
                    on_press:app.random_dt()      
                    
        

        MDCard:                	                
            orientation: "vertical"
            padding: "20dp"
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]         
            elevation:0
            
            MDTextField:
            	hint_text:'max depth'       
            	id:max_dt 
    		    current_hint_text_color:hex('#b2b2b2')
                text:"None"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                             int/None"               		    
    		    
            MDTextField:
            	hint_text:'min samples split'
            	id:min_split_dt
            	current_hint_text_color:hex('#b2b2b2')
                text:"2"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                               int/float"               	
    	
            MDTextField:
            	hint_text:'min sample leaf'
            	id:min_leaf_dt
            	current_hint_text_color:hex('#b2b2b2')
                text:"1"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                               int/float"                           	
    		      	
            MDTextField:
    	        hint_text:'min weight fraction leaf'  
            	id:min_weigh_dt	
            	current_hint_text_color:hex('#b2b2b2')
                text:"0.0"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                    float"            	
    	
        MDCard:                	                
            orientation: "vertical"
            padding: "20dp"
            size_hint: None, None
            size: "355dp", "296dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]             	
            elevation:0
    	
            MDTextField:
            	hint_text:'random state'  
            	id:rndm_dt
            	current_hint_text_color:hex('#b2b2b2')
            	text:"None"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                     int"            		
    		
            MDTextField:
            	hint_text:'max leaf nodes'  
            	id:max_leaf_dt	
            	current_hint_text_color:hex('#b2b2b2')
            	text:"None"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                             int/None"     		
    		    	
            MDTextField:
    	        hint_text:'min impurity decrease'  
            	id:min_impurity_dt	
            	current_hint_text_color:hex('#b2b2b2')
                text:"0.0"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                    float"                       	
    
            MDTextField:
    	        hint_text:'cpp alpha'  
            	id:cpp_dt
            	current_hint_text_color:hex('#b2b2b2')
                text:"0.0"
                #helper_text_mode: "on_focus"
                #helper_text: "                                                                                    float"           
                    	          	        	                	    
    MDLabel:
        text:""
    #MDLabel:
     #   text:""
            	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:5     
          
        MDRectangleFlatButton:
            text:"Train"
            on_release:
            	app.dt_btn()
                  	
        MDRectangleFlatButton:
            text:"Save"
            on_press:
            	app.dt_save()
         	
    MDLabel:
        text:""
    MDLabel:
        text:""
 
    GridLayout:
        orientation:'vertical'
        size_hint_y:None
        adaptive_height: True
        height:self.minimum_height
        spacing:10   
        cols:2
        
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "410dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]     
            elevation:0
            spacing:10 
            
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
       	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10         
                
            	              	               	    
                MDRoundFlatButton:
                    text:"tree_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.tree_dt()
            	                    
                MDRoundFlatButton:
                    text:"classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')     
            	    md_bg_color:hex('#323043') 
            	    on_press:app.classes_dt()
            	    
                MDRoundFlatButton:
                    text:"feature_importances_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')       
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_importances_dt()
            	                	     	
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10         
            	                	     	
                MDRoundFlatButton:
                    text:"max_features_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')      
            	    md_bg_color:hex('#323043') 
            	    on_press:app.max_features_dt()
            	                	     	 	 	
                MDRoundFlatButton:
                    text:"n_classes_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')    
            	    md_bg_color:hex('#323043')  
            	    on_press:app.n_classes_dt()
            	    
                MDRoundFlatButton:
                    text:"n_features_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_features_in_dt()
            	                    	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10         
            	                    	    
                MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')   
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_dt()
            	    
                MDRoundFlatButton:
                    text:"n_outputs_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')     
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_outputs_dt()
            	                    	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10           	                    	    
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0] 
                spacing:10                 
                
                                     
    MDLabel:
        text:""
    MDLabel:
        text:""
                                    	                	    
    BoxLayout:
        size_hint_y:None 
        orientation:"vertical"
        adaptive_height:True
        id:hypopt_grid_dtre
        height:self.minimum_height         
        cols:2
        spacing:5       
        
    MDLabel:
        text:""
    MDLabel:
        text:""
  
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_dtre 
    	spacing:5       
    	
    	                      
<randomizedsearchcv_wid_dtre@BoxLayout>:

  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                
    MDLabel:
        text:""
    MDLabel:
        text:""  
    MDLabel:
        text:""
    MDLabel:
        text:"" 
    
    MDLabel:
    	text:"RandomizedSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    

                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                        
                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"10"
                    hint_text:'n_iter'
                    id:n_iter_rscv_dtre
                    current_hint_text_color:hex('#b2b2b2')

                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'scoring'
                    id:scoring_rscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'n_jobs'
                    id:n_jobs_rscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
                                                     
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"True"
                    hint_text:'refit'
                    id:refit_rscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
             
        MDCard:                	                
            orientation: "vertical"
            padding:[8,10]
            size_hint: None, None
            size: "320dp", "290dp"            
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
                            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                    
                                        
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'cv'
                    id:cv_rscv_dtre
                    current_hint_text_color:hex('#b2b2b2')                                                   
                                             
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    text:"0"
                    id:verbose_rscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
                                 
                MDTextField:
                    line_color_focus: 1,1,1,1
                    text:"None"
                    hint_text:'random_state'
                    id:random_state_rscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
             
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[4,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None
                    id:return_train_score_rscv_dtre_chk
                    on_active:app.returtraiscor_rscv_dtre(*args)
#
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")
          
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_rscv_dtre()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_rscv_dtre()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_rscv_dtre()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_rscv_dtre()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_rscv_dtre()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_rscv_dtre()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_rscv_dtre()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_rscv_dtre()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_rscv_dtre()     

<randomizedsearch_asgn_dtre@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
                  
                                          
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.rndmstvhact_dtre()        
               	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.dt_save_gs()                                              
                                                     
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	          	
<prameter_optimizer_wid_dtre@BoxLayout>:    
  
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
             
    MDLabel:
        text:""
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"Hyperparameter Optimisation"
    	color:hex("#FFFFFF")
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""                 
    MDLabel:
        text:""
    MDLabel:
        text:""    
        
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:2
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "360dp", "100dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [12]       
            elevation:0    
            
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"GridSearchCV"
            	    line_color:1,1,1,1
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    id:gridsearchcv_chk_dtre 
            	    on_press:app.add_grdscv_dtre()
            	    
            	MDRoundFlatButton:
                    text:"RandomizedSearchCV"
            	    line_color:1,1,1,1
            	    id:randomizedsearchcv_chk_dtre
            	    md_bg_color:hex('#323043')
            	    text_color:hex('#FFFFFF')
            	    on_press:app.add_rndmcv_dtre()  
 
          

<gridsearchcv_wid_dtre@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
        
    MDLabel:
        text:""
    MDLabel:
        text:""    

    MDLabel:
        text:""
    MDLabel:
        text:""    
            
    MDLabel:
    	text:"GridSearchCV"
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H6'      
             
    MDLabel:
        text:""
    MDLabel:
        text:""    
    MDLabel:
        text:""
    MDLabel:
        text:""            
    
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height          
        cols:3
    	spacing:10
    	
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0    
   
   
                                                                        
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:0      
                                
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'scoring'
                    id:scoring_gscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        str/None"                          
                          
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'n_jobs'
                    id:n_jobs_gscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                       int/None"          
                                                    
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'refit'
                    id:refit_gscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
                    text:"True"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                    True/False/None"          
                                            
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'cv'
                    id:cv_gscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
                    text:"None"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                        int/None"         
                
          
        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "320dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0                             
            spacing:10 
            
            MDLabel:
                text:""
                height:1           
                
                
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:1
                padding:[12,0]
                spacing:10      
                                  
                MDTextField:
                    line_color_focus: 1,1,1,1
                    hint_text:'verbose'
                    id:verbose_gscv_dtre
                    current_hint_text_color:hex('#b2b2b2')
                    text:"0"
                    #helper_text_mode: "on_focus"
                    #helper_text: "                                                                                         int"                                      
                                                               
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:2
                padding:[20,0]
                spacing:10      
                
                MDCheckbox:
                    size_hint:None,None 
                    id:return_train_score_gdtre_chk
                    on_active:app.retutrasco_gscv_dtre(*args)
                MDLabel:
                    text:"return_train_score"
                    bold:True
                    color:hex("#FFFFFF")

            MDLabel:
                text:""
            MDLabel:
                text:""     
            MDLabel:
                text:""
            MDLabel:
                text:""                                
                    

        MDCard:                	                
            orientation: "vertical"
            padding:[8,32]
            size_hint: None, None
            size: "350dp", "290dp"       
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]       
            elevation:0
            spacing:10             
               
            MDLabel:
                text:'Attributes'
                color:hex('#FFFFFF')
                font_size:55
                font_style:'H6'                   
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
                
            	MDRoundFlatButton:
                    text:"cv_results_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.cv_results_gscv_dtre()
                                                          
            	MDRoundFlatButton:
                    text:"best_score_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_score_gscv_dtre()
     
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5        
                
                       
            	MDRoundFlatButton:
                    text:"best_params_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_params_gscv_dtre()
             	                     
            	MDRoundFlatButton:
                    text:"best_index_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.best_index_gscv_dtre()
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5         
            	          	          	    
            	MDRoundFlatButton:
                    text:"scorer_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.scorer_gscv_dtre()
                                   	    
            	MDRoundFlatButton:
                    text:"n_splits_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.n_splits_gscv_dtre()
              	                      
            	MDRoundFlatButton:
                    text:"multimetric_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.multimetric_gscv_dtre()
                               	                      
              	                      
            GridLayout:
                size_hint_y:None 
            	adaptive_height:True
                height:self.minimum_height   
                cols:3
                padding:[20,0]
                spacing:5                                            	    
                                   	             
            	MDRoundFlatButton:
                    text:"refit_time_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.refit_time_gscv_dtre()
                           	    
                                     
            	MDRoundFlatButton:
                    text:"feature_names_in_"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex('#323043')
            	    on_press:app.feature_names_in_gscv_dtre()
                                                      
    MDLabel:
        text:""
    MDLabel:
        text:""    

<gridsearch_asgn_dtre@BoxLayout>:

    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5
    
                                                                                    
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	               	                	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:10     
                       
        MDRectangleFlatButton:
            text:"Train"         
            on_press:
            	app.grdsrchacte_dtre()        
                 	
        MDRectangleFlatButton:
            text:"Save"         
            on_press:
            	app.dt_save_gs()                                              
            
                                                 
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	     

<misng_val@MDCard>:
	size_hint:None,None
	size: "500dp", "45dp"
	orientation: "vertical"              	                
    padding:[8,32]
    md_bg_color:hex('#0b091b')      
    border_radius: 20
    radius: [14]         
   
               	 	     
    MDLabel:
        id:card_lbl
        text: ""
        color:hex('#FFFFFF') 
        
    MDLabel:
    	text:""
    MDLabel:
    	text:""
    	
<si_imp_wid@BoxLayout>:
	
    orientation:'vertical'
    size_hint_y:None
    adaptive_height: True
    height:self.minimum_height 
    spacing:5    
                
    MDLabel:
        text:""
    MDLabel:
        text:""	                        
                
    MDLabel:
    	text:'SimpleImputer'
    	color:hex('#FFFFFF')
        font_size:55
        font_style:'H5'   
        
    MDLabel:
        text:""
    MDLabel:
        text:""	                    
    MDLabel:
        text:""
    MDLabel:
        text:""	          
            
    GridLayout:
        size_hint_y:None 
        spacing:10
        adaptive_height:True
        height:self.minimum_height                
        cols:2 
             
        MDCard:
        	size_hint:None,None
        	size: "355dp", "290dp"
        	orientation: "vertical"    
            padding:[8,32]
            spacing:5
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            elevation:0
            radius: [14]
                    
            
            GridLayout:
                size_hint_y:None 
                spacing:0
                adaptive_height:True
                height:self.minimum_height                
                cols:1
                padding:[12,0] 
                
                MDTextField:
                	id:si_imp_msgval
                	hint_text:"missing values"
                	current_hint_text_color:hex('#b2b2b2')
                	text:"nan"

                MDTextField:
                	id:si_imp_vrbs
                	hint_text:"verbose"
                	current_hint_text_color:hex('#b2b2b2')
                	text:"0"

            MDLabel:
        	    text:""
                font_size:45
                color:hex('#FFFFFF')
                font_style:'H6'            
                
            GridLayout:
                size_hint_y:None 
                spacing:5
                adaptive_height:True
                height:self.minimum_height                
                cols:2
                padding:[20,0] 
 
                MDCheckbox:
                	id:copy_smitr_chk
                	size_hint:None,None
                	on_active:app.copy_smitr(*args)
                	height:18 
                	 
                MDLabel:
                	color:hex('#FFFFFF') 
                	text:"copy"
                	bold:True 

                MDCheckbox:
                	size_hint:None, None
                	id:add_smtrm_chk
                	on_active:app.add_smtrm(*args)
                	height:18 

                MDLabel:
                	text:"add indicator"
                	color:hex('#FFFFFF') 
                	bold:True 
                	
            MDLabel:
        	    text:""
                font_size:45
                color:hex('#FFFFFF')
                font_style:'H6'            
            MDLabel:
        	    text:""
                font_size:45
                color:hex('#FFFFFF')
                font_style:'H6'            
                                                	
        MDCard:
        	size_hint:None,None
        	size: "355dp", "290dp"
        	orientation: "vertical"              	                
            padding:[8,32]
            md_bg_color:hex('#0b091b')      
            border_radius: 20
            radius: [14]                 
            elevation:0
            spacing:10 
                               
            MDLabel:
        	    text:'strategy'
                font_size:45
                color:hex('#FFFFFF')
                font_style:'H6'       
                  
            GridLayout:
                size_hint_y:None 
                spacing:10
                adaptive_height:True
                height:self.minimum_height                
                cols:2      
                padding:[20,0]
                
            
                MDRoundFlatButton:
                    text:"mean"
            	    line_color:1,1,1,1
            	    md_bg_color:hex("#323043")
            	    text_color:hex('#FFFFFF')
            	    id:mean_smitr_chk
            	    on_press:
            	    	app.mean_smitr()
            	    
                MDRoundFlatButton:
                    text:"median"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')       
            	    md_bg_color:hex("#323043")
            	    on_press:app.simtr_median()  
            	    id:simtr_median_chk
            	    
            GridLayout:
                size_hint_y:None 
                spacing:10
                adaptive_height:True
                height:self.minimum_height                
                cols:2      
                padding:[20,0]            	    
          
                MDRoundFlatButton:
                    text:"most frequent"
            	    line_color:1,1,1,1
            	    text_color:hex('#FFFFFF')
            	    md_bg_color:hex("#323043")
            	    on_press:app.mstfr_smitr()
            	    id:mstfr_smitr_chk
            	                	                     	         
            MDLabel:
        	    text:""                              
            MDLabel:
        	    text:""
            MDLabel:
        	    text:""     
                
                                            
    MDLabel:
    	text:""         	
    MDLabel:
    	text:""         	    	           	 
    	    	
    GridLayout:
        size_hint_y:None 
        adaptive_height:True
        height:self.minimum_height         
        cols:2
        spacing:15     
                       
        MDRectangleFlatButton:
            text:"Assign"
            on_press:                
                app.si_imp_btn()                           
    
    MDLabel:
    	text:""         	
    MDLabel:
    	text:""         	    	
    MDLabel:
    	text:""         	
    MDLabel:
    	text:""         	 
    MDLabel:
    	text:""            	
    	    	      
    BoxLayout:
        orientation:"vertical"
        size_hint_y:None 
        adaptive_height:True
    	height:self.minimum_height    
    	id:out_grid_si_imp_wid 
    	spacing:5
                                                                   
                 
            		    	    		        	    	    
screen:

    canvas.before:
        
        Rectangle:
            pos: self.pos
            size: self.size
            source:"000000.png"
            
            
           
    BoxLayout:
    	MDCard: 
        	size_hint:(.01,1)
    	    md_bg_color:hex('#000000')
    	    
        ScrollView:            
            scroll_wheel_distance:60
        	BoxLayout:
        	                   
        	    orientation:'vertical'
                size_hint_y:None
                adaptive_height: True
                height:self.minimum_height 
                padding: 25
                spacing:25
                #scroll_type:['bars','content']
                #scroll_wheel_distance:80
                
                
               
                MDLabel:
                	text:""
                MDLabel:
                	text:""               	
                MDLabel:
                	text:""
                MDLabel:
                	text:""
                MDLabel:
                	text:""                	                	             
                    
                MDLabel:
                	text:'Data'
                    font_size:40
                    color: hex('#FFFFFF')
                    
                MDLabel:
                	text:""             
                
                GridLayout:
                    cols:4
                    orientation:'vertical'
                    size_hint_y:None
                    adaptive_height: True
                    height:self.minimum_height 
                    spacing:10
                    
                                           
                  	          
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[4,1]
                  	  size_hint: None, None
             	       size: "322dp", "296dp"       
             	       border_radius: 20
             	       radius: [14]
                  	  md_bg_color:hex('#0b091b')  
                  	  elevation:0         
                  	  spacing:0         
                  	  
                    	MDLabel:
                    	    text:''	
                    	MDLabel:
                    	    text:''
                    	MDLabel:
                    	    text:''	
                                   
                	    GridLayout:              
                    		cols:1                    		
                    		spacing:0
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height 
                    		padding:20
                    	
                       	 MDTextField:
                       	 	color_mode: 'custom'
              	          	line_color_focus: hex('#FFFFFF')
                          	  
                	     	   id: file
                	  	      hint_text:'csv file path'    
                	  	      current_hint_text_color:hex('#b2b2b2') 
                    
               	  	   MDTextField:
               	  	       color_mode: 'custom'
                  	  	    line_color_focus: hex('#FFFFFF')    	               		 
                  	      	id: target
                    	 	   hint_text: 'target variable'  
                    	 	   
                    	 	   current_hint_text_color:hex('#b2b2b2')
                                
              	      	MDTextField:
              	      	    color_mode: 'custom'
                  	 	     line_color_focus: hex('#FFFFFF')    	        	       	 
              	       	   id: test
              	       	   text:"0.25"
              	        	  hint_text:'test size'    
                      	 	 #helper_text_mode: "on_focus"
                    	 	   #helper_text: "                                                                                           float"
                    	 	                 	        
              	        	  current_hint_text_color:hex('#b2b2b2')          
                	
          	        	  MDTextField:
                 	    	   color_mode: 'custom'
              	   	       line_color_focus: hex('#FFFFFF')    	   	        	     
    	   	        	     text:"None"
                	 	       id: random 
                      	 	 hint_text: 'random state'    
                      	 	 #helper_text_mode: "on_focus"

                    	 	   #helper_text: "                                                                                   int/None"
                      	 	 current_hint_text_color:hex('#b2b2b2')     
                      	 	 
          	        	  MDTextField:
                 	    	   color_mode: 'custom'
                 	    	   id:shuffle_dta
              	   	       line_color_focus: hex('#FFFFFF')    	   	        	     
    	   	        	     text:"True" 
                      	 	 hint_text: 'shuffle'    
                      	 	 current_hint_text_color:hex('#b2b2b2')
                      	 	 #helper_text_mode: "on_focus"
                    	 	   #helper_text: "                                                                                 True/False"
                    	 	   
                    	 	   
                  	          
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[4,5]
                  	  size_hint: None, None
             	       size: "340dp", "296dp"       
             	       border_radius: 20
             	       radius: [14]
                  	  md_bg_color:hex('#0b091b')  
                  	  elevation:0
                  	  spacing:5               
                    	padding:20 
                    	
                	    MDLabel:              
                    		text:""      
                        MDLabel:
                            text:"DataFrame"
                            color:hex('#FFFFFF')
                            font_size:55
                            font_style:'H6'                              
                    		                       		                    		
                	    GridLayout:              
                    		cols:3                    		
                    		spacing:5
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0]
                    		
                	    	MDRoundFlatButton:
                	    	    text:"head"
                	    	    line_width:10
                	    	    id:head_datainf_chk
                	    	    md_bg_color:hex("#323043")
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.head_datainf()
                	    	    
                	    	MDRoundFlatButton:
                	    	    text:"tail"
                	    	    line_width:10
                	    	    id:tail_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.tail_datainf()
                	    	    
                	    	MDRoundFlatButton:
                	    	    text:"info"
                	    	    line_width:10
                	    	    id:info_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.info_datainf()
                	    	    
                    		
                	    GridLayout:              
                    		cols:5                    		
                    		spacing:5
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0]
                    	
                	    	MDRoundFlatButton:
                	    	    text:"isna"
                	    	    line_width:10
                	    	    id:isna_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.isna_datainf()
                	    	    
                	 	                   	    	                   	    
                	    	MDRoundFlatButton:
                	    	    text:"duplicated"
                	    	    line_width:10
                	    	    id:duplicated_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.duplicated_datainf()
                    	    
                
                	    	MDRoundFlatButton:
                	    	    text:"corr"
                	    	    line_width:10
                	    	    id:corr_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.corr_datainf()
                    	    
 	                    	                 	    	    
                	    GridLayout:              
                    		cols:3                    		
                    		spacing:5
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0]
                    	            	    	   
                	    	MDRoundFlatButton:
                	    	    text:"describe"
                	    	    line_width:10
                	    	    id:describe_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.describe_datainf()
                	    	    
                	    	    
                	    	MDRoundFlatButton:
                	    	    text:"sample"
                	    	    line_width:10
                	    	    id:sample_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.sample_datainf()
                	    	    
                	    	    
                	    	MDRoundFlatButton:
                	    	    text:"nunique"
                	    	    line_width:10
                	    	    id:nunique_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.nunique_datainf()
                	    	    
                	    GridLayout:              
                    		cols:3                    		
                    		spacing:5
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0]
                    		    	
                	    	MDRoundFlatButton:
                	    	    text:"memory_usage"
                	    	    line_width:10
                	    	    id:memory_usage_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.memory_usage_datainf()

                    	              	    	                    	  
                	    	MDRoundFlatButton:
                	    	    text:"total null values"
                	    	    line_width:10
                	    	    id:isnullsum_datainf_chk
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.isnullsum_datainf()                              	    	    
                	                   	    	                    	  
                    	
                	    MDLabel:              
                    		text:""         
                    		                   
                  	          
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[4,1]
                  	  size_hint: None, None
             	       size: "310dp", "296dp"         
             	       border_radius: 20
             	       radius: [14]
                  	  md_bg_color:hex('#0b091b')  
                  	  elevation:0
                  	  spacing:1           
     
                        MDLabel:
                            text:"" 
                	    MDLabel:              
                    		text:""                                                           	  
                     
                        MDLabel:
                            text:"drop"
                            color:hex('#FFFFFF')
                            font_size:55
                            font_style:'H6'                              
                    		                    		
                	    GridLayout:              
                    		cols:1                    		
                    		spacing:0
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height 
                    		padding:10
                    		
                       	 MDTextField:
                       	 	color_mode: 'custom'
              	          	line_color_focus: hex('#FFFFFF')
                          	  
                	     	   id:columns_data
                	     	   text:"None"
                	  	      hint_text:"columns"    
                	  	      current_hint_text_color:hex('#b2b2b2')
                	  	                      	  	      
                       	 MDTextField:
                       	 	color_mode: 'custom'
              	          	line_color_focus: hex('#FFFFFF')
                          	  
                	     	   id:rows_data
                	     	   text:"None"
                	  	      hint_text:"rows"    
                	  	      current_hint_text_color:hex('#b2b2b2')  
         
                	  	             
                        MDLabel:
                            text:""                        	  	             
                        MDLabel:
                            text:""                        	  	             
                        MDLabel:
                            text:""         
         
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[4,3]
                  	  size_hint: None, None
             	       size: "310dp", "296dp"        
             	       border_radius: 20
             	       radius: [14]
                  	  md_bg_color:hex('#0b091b')  
                  	  elevation:0
                  	  spacing:10           
                  	  
                        MDLabel:
                            text:""                   	  
                        MDLabel:
                            text:""
  
                	  	                    	  	      
                        MDLabel:
                            text:"dropna rows"
                            color:hex('#FFFFFF')
                            font_size:55
                            font_style:'H6'            
                    		                    		
                	    GridLayout:              
                    		cols:1                    		
                    		spacing:0
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height 
                    		padding:10		
                    		                    		
                       	 MDTextField:
                       	 	color_mode: 'custom'
              	          	line_color_focus: hex('#FFFFFF')
                          	  
                	     	   id:dropna_rows_data
                	     	   text:"None"
                	  	      hint_text:"thresh"    
                	  	      current_hint_text_color:hex('#b2b2b2')    
                                             	  
                        MDLabel:
                            text:"dropna columns"
                            color:hex('#FFFFFF')
                            font_size:55
                            font_style:'H6'                              
                    		                    		
                	    GridLayout:              
                    		cols:1                    		
                    		spacing:0
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height 
                    		padding:10
                    		                		
                       	 MDTextField:
                       	 	color_mode: 'custom'
              	          	line_color_focus: hex('#FFFFFF')
                	     	   id:dropna_columns_data
                	     	   text:"None"
                	  	      hint_text:"thresh"    
                	  	      current_hint_text_color:hex('#b2b2b2')  

                        MDLabel:
                            text:""
               
                     
                                    
                BoxLayout:
                	
                	spacing:9
                	size_hint_y:None 
                	adaptive_height:True
                	height:self.minimum_height
                	orientation:"horizontal"
                	
                    MDRectangleFlatButton:
                        text:'Assign'                           
                        on_press:                   	            	   
                        	app.data_btn()     
                    
                    MDRectangleFlatButton:
                        text:'Drop'                           
                        on_press:                   	            	   
                        	app.drop_data_btn() 
               	
                BoxLayout:              
  
                	spacing:1
                	orientation:'vertical' 
                	size_hint_y:None 
                	adaptive_height:True
                	height:self.minimum_height 
                	id:data_grid

                MDLabel:
                	text:""             
                                    	 	                       	 	   
                MDLabel:
                	text:'Visualization'
                    font_size:40
                    color: hex('#FFFFFF')
                    
                MDLabel:
                	text:""             
                
                GridLayout:
                    cols:3
                    orientation:'vertical'
                    size_hint_y:None
                    adaptive_height: True
                    height:self.minimum_height 
                    spacing:10                    	 	   
                    	 	   
                    	 	                         	 	 
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[8,32]
                  	  size_hint: None, None
             	       size: "355dp", "290dp"       
             	       border_radius: 20
             	       spacing:17
             	       radius: [14]
                  	  md_bg_color:hex('#0b091b')  
                  	  elevation:0                  
                  	  
                        MDLabel:
                            text:""
                                              	     
                        MDLabel:
                            text:'missing values'
                            color:hex('#FFFFFF')
                            font_size:55
                            font_style:'H6'                              
                    		
                	    GridLayout:              
                    		cols:3                    		
                    		spacing:10
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0] 
                    		
                	    	MDRoundFlatButton:
                	    	    text:"matrix"
                	    	    line_width:10
                	    	    id:data_matrix_msg
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.matrix_msg()
                  	                    	    	                       		                	   
                  	  MDLabel:
                      	  text:'clustering'
                            color:hex('#FFFFFF')
                	    	font_size:55
                	    	font_style:'H6'           
                	    	 
                	    GridLayout:              
                    		cols:3                    		
                    		spacing:10
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0] 
                    		                    		   
                	    	MDRoundFlatButton:
                	    	    text:"clustermap"
                	    	    line_width:10
                	    	    id:data_cltrmap
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.cltrmap_sbn()
                  	                      		                   	  
                        MDLabel:
                            text:"Relational plots"
                            color:hex('#FFFFFF')
                            font_size:55
                            font_style:'H6'                              
                    		
                	    GridLayout:              
                    		cols:2                    		
                    		spacing:7
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0] 
                    		                    	
                	    	MDRoundFlatButton:
                	    	    text:"scatterplot"
                	    	    line_width:10
                	    	    id:data_sctplo
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.scatterplot_sbn()
                      		                    	
                	    	MDRoundFlatButton:
                	    	    text:"lineplot"
                	    	    line_width:10
                	    	    id:data_lnplo
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.lineplot_sbn()
                	  
                        MDLabel:
                            text:""                 	  

                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[8,32]
                  	  size_hint: None, None
             	       size: "355dp", "290dp"       
             	       border_radius: 20
             	       radius: [14]
             	       spacing:17
                  	  md_bg_color:hex('#0b091b')  
                  	  elevation:0    
                  	      
                        MDLabel:
                            text:""
                                              	  
                                	  
                        MDLabel:
                            text:"Categorical plots"
                            color:hex('#FFFFFF')
                            font_size:55
                            font_style:'H6'                              
                    		
                	    GridLayout:              
                    		cols:3                   		
                    		spacing:5
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0]     
                    		                		
                	    	MDRoundFlatButton:
                	    	    text:"violinplot"
                	    	    line_width:10
                	    	    id:data_vnplo
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.violinplot_sbn()
                	    	    
                    		                		
                	    	MDRoundFlatButton:
                	    	    text:"boxplot"
                	    	    line_width:10
                	    	    id:data_bxtplo
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.boxplot_sbn()                	    	    
                  	                     	     
                    		                		
                	    	MDRoundFlatButton:
                	    	    text:"pointplot"
                	    	    line_width:10
                	    	    id:data_pntxplo
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.pointplot_sbn()           
                	    	                        		                		
                	    	MDRoundFlatButton:
                	    	    text:"stripplot"
                	    	    line_width:10
                	    	    id:data_strpxplo
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.stripplot_sbn()                   	    	                   	    	                      	     
                 	    	                        		                		
                	    	MDRoundFlatButton:
                	    	    text:"barplot"
                	    	    line_width:10
                	    	    id:data_brxplo
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.barplot_sbn()
                 	    	    
                        MDLabel:
                            text:""                  	    	    
                        MDLabel:
                            text:""                 	    	    
                        MDLabel:
                            text:""            	    	                       
                        MDLabel:
                            text:""                                     
                        MDLabel:
                            text:""
                                      
                         	                
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[8,32]
                  	  size_hint: None, None
             	       size: "355dp", "290dp"       
             	       border_radius: 20
             	       radius: [14]
             	       spacing:17
                  	  md_bg_color:hex('#0b091b')  
                  	  elevation:0    
                  	      
                        MDLabel:
                            text:""
                                              	  
                        MDLabel:
                            text:"Distribution plots"
                            color:hex('#FFFFFF')
                            font_size:55
                            font_style:'H6'                              
                    		
                	    GridLayout:              
                    		cols:2                    		
                    		spacing:1
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0]     
                    		                		
                	    	MDRoundFlatButton:
                	    	    text:"kdeplot"
                	    	    line_width:10
                	    	    id:data_kde
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.kde_sbn()
                  	     
	    	                      	     
                        MDLabel:
                            text:"Multi-plots"
                            color:hex('#FFFFFF')
                            font_size:55
                            font_style:'H6'       
                  
                	    GridLayout:              
                    		cols:3                    		
                    		spacing:5
                    		size_hint_y:None 
                    		adaptive_height:True
                    		height:self.minimum_height
                    		padding: [10,0]    
                    		            	    	       		 
                	    	MDRoundFlatButton:
                	    	    text:"pairplot"
                	    	    line_width:10
                	    	    id:data_prplt
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.pairplt_sbn() 
    	    	          
                	    	MDRoundFlatButton:
                	    	    text:"jointplot"
                	    	    line_width:10
                	    	    id:data_jntplt
                	    	    md_bg_color:hex('#323043')  
                	    	    line_color:1,1,1,1
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.jointplot_sbn()
                	    	     
                        MDLabel:
                            text:""    	    	                         	             
                        MDLabel:
                            text:""                          	  
                        MDLabel:
                            text:""
                                                                                                         
                GridLayout:
                	
                	spacing:15
                	size_hint_y:None 
                	adaptive_height:True
                	height:self.minimum_height             	
                	cols:1
                	id:dtprlt_wid_grid    
                	                             
                MDLabel:
                	text:'Preprocessing'
                	font_size:40        
                	color:hex('#FFFFFF')        	
                	
                MDLabel:
                	text:""
           
                GridLayout:              
                	cols:3
                	spacing:10
                	size_hint_y:None 
                	adaptive_height:True
                	height:self.minimum_height 
                	
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[8,32]
                  	  size_hint: None, None
             	       size: "415dp", "315dp"       
             	       border_radius: 20
             	       radius: [14]
                  	  md_bg_color:hex('#0b091b')
                  	  elevation:0
                  	  spacing:17      
                  	  
                		MDLabel:
                	    	text:''
                	    	                  	         
                		MDLabel:
                	    	text:'Scaling'
                	    	color:hex('#FFFFFF')
                	    	font_size:55
                	    	font_style:'H6'      
                	
                        GridLayout:              
                	    	cols:2
                        	spacing:5
                	    	size_hint_y:None 
                		    adaptive_height:True
                	    	height:self.minimum_height
                	    	padding: [10,0]
                	    	
                	    	MDRoundFlatButton:
                	    	    text:"StandardScaler"
                	    	    line_width:10
                	    	    id:stad_chk
                	    	    line_color:1,1,1,1
                	    	    md_bg_color:hex('#323043')
                	    	    text_color:hex('#FFFFFF')
                	    	    on_press:app.stdscl_cls()
                      	                      
                    	    MDRoundFlatButton:
                      	      text:'MinMaxScaler'
                      	      md_bg_color:hex('#323043')
                      	      id:min_chk                         	      
                      	      text_color:hex('#FFFFFF') 
                      	      on_press:app.mnwid_cls()
                		
                        #GridLayout:              
                	    #	cols:2
                        #	spacing:10
                	    #	size_hint_y:None 
                		 #   adaptive_height:True
                	    #	height:self.minimum_height
                	    #	padding: [10,0]
                	               	  	
                	        MDRoundFlatButton:
                    	    	text:'MaxAbsScaler'
                    	    	md_bg_color:hex('#323043')
                    	        text_color:hex('#FFFFFF')
                    	    	id:max_chk   
                    	    	on_press:app.maxabsscls_cls()
                    	    	        	
             	           MDRoundFlatButton:
             	               text:'RobustScaler'
             	               text_color:hex('#FFFFFF')
             	               id:rbst_chk
             	               on_press:app.robst_cls()
             	               md_bg_color:hex('#323043')
             	      	             	               
                		MDLabel:
                	    	text:'Normalization'
                	    	color:hex('#FFFFFF')
                	    	font_size:55
                	    	font_style:'H6'       
                		 	
                        GridLayout:              
                	    	cols:2
                        	spacing:10
                	    	size_hint_y:None 
                		    adaptive_height:True
                	    	height:self.minimum_height
                	    	padding: [10,0]
                	       	          	      	            
       	                 MDRoundFlatButton:
        	                    text:'Normalizer' 
        	                    text_color:hex('#FFFFFF')
        	                    id:nrmlz_cls_chk     
        	                    on_press:app.nrmlz_cls()
        	                    md_bg_color:hex('#323043')
	
                		MDLabel:
                	    	text:'Transformations'
                	    	color:hex('#FFFFFF')
                	    	font_size:55
                	    	font_style:'H6'       
                	 	
                        GridLayout:              
                	    	cols:2
                        	spacing:5
                	    	size_hint_y:None 
                		    adaptive_height:True
                	    	height:self.minimum_height
                	    	padding: [10,0]
                	    
                	    
          	              MDRoundFlatButton:
            	                text:'QuantileTransformer'
            	                text_color:hex('#FFFFFF')
            	                md_bg_color:hex('#323043')
            	                id:qt_chk              	                
            	                on_press:app.quatcls_cls()
  	               
          	              MDRoundFlatButton:
            	                text:'PowerTransformer'
            	                text_color:hex('#FFFFFF')
            	                id:pwr_chk  
            	                md_bg_color:hex('#323043')
            	                on_press:app.pwr_cls()
            	                            	                
   
                      	                                   	                
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[8,32]
                  	  size_hint: None, None
             	       size: "415dp", "315dp"       
             	       border_radius: 20
             	       radius: [14]
                  	  md_bg_color:hex('#0b091b')  
                  	  elevation:0
                  	  spacing:17
                  	                              
                		MDLabel:
                	    	text:''
                	    	                  	                                  
                  	  MDLabel:
                      	  text:'Imputation'
                	    	color:hex('#FFFFFF')
                	    	font_size:55
                	    	font_style:'H6'     
                	           	       	  
              		  GridLayout:
             		   	size_hint_y:None 
                			adaptive_height:True
                			height:self.minimum_height        
                    		spacing:5                 	
                    		cols:2              
                    		padding: [10,0]                     
                    	
                            MDRoundFlatButton:
                                id:si_imp_chk
                                text:"SimpleImputer"
                                md_bg_color:hex('#323043')
                                text_color:hex('#FFFFFF')
                                size_hint:None,None 
                                on_press:
                                	app.si_cls()
                                	
                            MDRoundFlatButton:
                                text:"KNNImputer"
                                id:knnimp_chk
                                md_bg_color:hex('#323043')
                                text_color:hex('#FFFFFF')
                                size_hint:None,None 
                                on_press:
                                	app.knni_cls()
                       
                  	  MDLabel:
                      	  text:'Dimentionality reduction'
                	    	color:hex('#FFFFFF')
                	    	font_size:55
                	    	font_style:'H6'     
                		
                              	  	       	  
              		  GridLayout:
             		   	size_hint_y:None 
                			adaptive_height:True
                			height:self.minimum_height        
                    		spacing:5
                    		cols:2             
                    		padding: [10,0]
                    
                            MDRoundFlatButton:
                                                            
                                text:"PCA"
                                size_hint:None,None
                                text_color:hex('#FFFFFF')
                                id:pca_chk
                                md_bg_color:hex('#323043')
                                on_press:app.pca_cls()
                                                            
                            MDRoundFlatButton:
                            	text:"IncrementalPCA"
                            	text_color:hex('#FFFFFF')
                            	size_hint:None,None 
                            	id:incpca_chk
                                md_bg_color:hex('#323043')
                                on_press:app.incpca_cls()
                                
                		
                  	  MDLabel:
                      	  text:'Feature Discretization'
                	    	color:hex('#FFFFFF')
                	    	font_size:55
                	    	font_style:'H6'         
                		    
              	      GridLayout:
             		   	size_hint_y:None 
                			adaptive_height:True
                			height:self.minimum_height        
                    		spacing:10
                    		cols:2
                    		padding: [10,0]               
                    	
          	              MDRoundFlatButton:
            	                text:'KBinsDiscretizer'
            	                text_color:hex('#FFFFFF')
            	                md_bg_color:hex('#323043')
            	                id:dztr_chk              	                
            	                on_press:app.discretizer_cls()
	                
                		MDLabel:
                	    	text:''            	                
            	                
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[8,32]
                  	  size_hint: None, None
             	       size: "415dp", "315dp"       
             	       border_radius: 20
             	       radius: [14]
                  	  md_bg_color:hex('#0b091b')  
                  	  elevation:0 
                  	  spacing:17 

                		MDLabel:
                	    	text:''             	    	

                  	  MDLabel:
                      	  text:"Polynomial features"
                	    	color:hex('#FFFFFF')
                	    	font_size:55
                	    	font_style:'H6'              
                	
                        GridLayout:
             		   	size_hint_y:None 
                			adaptive_height:True
                			height:self.minimum_height        
                    		spacing:10
                    		cols:2  
                    		padding: [10,0]   
                    		 	
          	              MDRoundFlatButton:
            	                text:"PolynomialFeatures"
            	                text_color:hex('#FFFFFF')
            	                md_bg_color:hex('#323043')
            	                id:polyft_chk    
            	                on_press:app.polyft_cls()
            	             	                                     
                  	  MDLabel:
                      	  text:'Encoding'
                	    	color:hex('#FFFFFF')
                	    	font_size:55
                	    	font_style:'H6'     
                	    	
                        GridLayout:
             		   	size_hint_y:None 
                			adaptive_height:True
                			height:self.minimum_height        
                    		spacing:10
                    		cols:2
                    		padding: [10,0]    
                    
          	              MDRoundFlatButton:
            	                text:'OneHotEncoder'
            	                text_color:hex('#FFFFFF')
            	                md_bg_color:hex('#323043')
            	                id:ohecdr_chk    
            	                on_press:app.ohecdr_cls()
            	                
                  	  MDLabel:
                      	  text:''                             
                  	  MDLabel:
                      	  text:''                    
                		MDLabel:
                	    	text:''            
                		MDLabel:
                	    	text:''           
                		MDLabel:
                	    	text:''                   
                                        
                MDLabel:
                	text:""  	          
                MDLabel:
                	text:""   	

                GridLayout:
                    cols:1
                	spacing:5
                	size_hint_y:None 
                	adaptive_height:True
                	height:self.minimum_height 
                	id:preprocessing_grid 
                     	
                MDLabel:
                	text:""              	
              
                MDLabel:
                    text:'Model'
                    font_size:40
                    color:hex('#FFFFFF') 
                    
                MDLabel:
                	text:""
               	               	
                GridLayout:
                    cols:4
                	spacing:7
                	size_hint_y:None 
                	adaptive_height:True
                	height:self.minimum_height 
                	               	
            	                     	                
          	      MDCard:                	                
                		orientation: "vertical"
              		  padding:[2,7]
                	    size_hint: None, None
             		   size: "415dp", "320dp"       
                 	   md_bg_color:hex('#0b091b')      
                  	  border_radius: 10
             	 	  radius: [14]                    
             		   elevation:0
             	 	  orientation:"horizontal"
             	   
           	  	   GridLayout:
                			cols:1
                			spacing:1
                			size_hint_y:None 
                			adaptive_height:True
                			height:self.minimum_height 
                			padding:[2,32]
                			orientation:"vertical"
                			spacing:20
                			
                			MDLabel:
                				text:""  
                				color:hex('#FFFFFF') 
                				bold:True		
                			MDLabel:
                				text:""  
                				color:hex('#FFFFFF') 
                				bold:True		
                			            			
                		             	                   		             
             			   MDLabel:
             	 	 	 	text:"Support Vector Machine"
             		   		color:hex('#FFFFFF')
             	  		 	font_style:'H6'
             	   	             
           	   	 	 GridLayout:
                				cols:2
                				spacing:5
                				size_hint_y:None 
                				adaptive_height:True
                				height:self.minimum_height 
                				padding:[10,0]
                	                	
                	                	
                				MDRoundFlatButton:
                 	   			text:'SVC'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:sm_cls_chk              	                
            	                    on_press:app.sm_cls()             	             	 	                             	                	
                 		  
                				MDRoundFlatButton:
                 	   			text:'LinearSVC'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:lsvm_cls_chk              	                
            	                    on_press:app.lsvm_cls()                       		  
                		             	                   	               	                	
                				MDRoundFlatButton:
                 	   			text:'NuSVC'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:nu_cls_chk              	                
            	                    on_press:app.nu_cls()                    	               		
	             
             			   MDLabel:
             	 	 	 	text:"Neighbours"
             		   		color:hex('#FFFFFF')
             	  		 	font_style:'H6'
             	   	             
           	   	 	 GridLayout:
                				cols:1
                				spacing:5
                				size_hint_y:None 
                				adaptive_height:True
                				height:self.minimum_height 
                				padding:[10,0]
                	                	               	                	
                				MDRoundFlatButton:
                 	   			text:'KNeighboursClassifier'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:knn_cls_chk              	                
            	                    on_press:app.knn_cls()                    	      
                	                	
                				MDRoundFlatButton:
                 	   			text:'NearestCentroid'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:nrctc_cls_chk              	                
            	                    on_press:app.nrctc_cls()                    	
                			
          	      MDCard:                	                
                		orientation: "vertical"
              		  padding:[2,7]
                	    size_hint: None, None
             		   size: "415dp", "320dp"       
                 	   md_bg_color:hex('#0b091b')      
                  	  border_radius: 10
             	 	  radius: [14]                    
             		   elevation:0
             	 	  orientation:"horizontal"
             	   
           	  	   GridLayout:
                			cols:1
                			spacing:1
                			size_hint_y:None 
                			adaptive_height:True
                			height:self.minimum_height 
                			padding:[2,32]
                			orientation:"vertical"
                			spacing:20
                			
                			MDLabel:
                				text:""  
                				color:hex('#FFFFFF') 
                				bold:True		
                			MDLabel:
                				text:""  
                				color:hex('#FFFFFF') 
                				bold:True		
                	      
                				
             		 	  MDLabel:
             	 	  		text:"Ensemble"
             		   		color:hex('#FFFFFF')
             	  	 		font_style:'H6'
             	   	             
           	    		 GridLayout:
                				cols:1
                				spacing:7
                				size_hint_y:None 
                				adaptive_height:True
                				height:self.minimum_height 
                				padding:[10,0]

                	                	
                				MDRoundFlatButton:
                 	   			text:'RandomForestClassifier'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:rdmfc_cls_chk              	                
            	                    on_press:app.rdmfc_cls()                      	                	
                	      
                	                	
                				MDRoundFlatButton:
                 	   			text:'GradientBoostingClassifier'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:gradient_cls_chk              	                
            	                    on_press:app.gradient_cls()                      	                	
                	                     	               				                
		                   		    
             		       MDLabel:
             	   	    	text:"Linear model"
             	   	    	color:hex('#FFFFFF')
             	  	     	font_style:'H6'
             	   	             
           	 	        GridLayout:
                		    	cols:2
                		    	spacing:5
                		    	size_hint_y:None 
                    	    	adaptive_height:True
                		    	height:self.minimum_height 
                    	    	padding:[10,0]
                		                		                 	                     	                              		                		                		                		       
                	                	
                				MDRoundFlatButton:
                 	   			text:'RidgeClassifier'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:rdgcl_cls_chk              	                
            	                    on_press:app.rdgcl_cls()                                      		    


                		  #  	MDCheckbox:
                 	   	   # 	size_hint:None,None
                		    #		id:onesvm_cls_chk
                			 #       on_active:app.onesvm_cls(*args)
                			  #      height:23
                			    
                	    	#    MDLabel:
                		    #		text:"OneClassSVM"  
                			 #   	color:hex('#FFFFFF') 
                			  #  	bold:True		
                		    
                		    
               	                	
                				MDRoundFlatButton:
                 	   			text:'LogisticRegression'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:log_cls_chk              	                
            	                    on_press:app.log_cls()          
            	                    
                	                	
                				MDRoundFlatButton:
                 	   			text:'SGDClassifier'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:sgd_cls_chk              	                
            	                    on_press:app.sgd_cls()                      	                	
            	                
                	    	
                	    
                    MDCard:                	                
                    	orientation: "vertical"
              	      padding:[8,32]
                        size_hint: None, None
             	       size: "415dp", "320dp"       
                        md_bg_color:hex('#0b091b')      
                        border_radius: 10
             	       radius: [14]                    
             	       elevation:0
             	       orientation:"horizontal"

           	         GridLayout:
                	    	cols:1
                		    spacing:5
                    		size_hint_y:None 
                	    	adaptive_height:True
                	    	height:self.minimum_height 
                		    padding:[2,10]
                	    	orientation:"vertical"
                	    	spacing:20
                		 
                      			
                			MDLabel:
                				text:""  
                				color:hex('#FFFFFF') 
                				bold:True		
                			MDLabel:
                				text:""  
                				color:hex('#FFFFFF') 
                				bold:True		
                			            	          			            			
                		             	                   		             
             			   MDLabel:
             	 	 	 	text:"Tree"
             		   		color:hex('#FFFFFF')
             	  		 	font_style:'H6'
             	   	             
           	   	 	 GridLayout:
                				cols:2
                				spacing:5
                				size_hint_y:None 
                				adaptive_height:True
                				height:self.minimum_height 
                				padding:[10,0]
                	                	
                	                	
                				MDRoundFlatButton:
                 	   			text:'DecisionTreeClassifier'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:dt_cls_chk              	                
            	                    on_press:app.dt_cls()                      	                	
                		 
                		 
                		             	                   		
             		       MDLabel:
             	   	    	text:"Naive Bayes"
             	   	    	color:hex('#FFFFFF')
             	  	     	font_style:'H6'
             	   	             
           		         GridLayout:
                	    		cols:2
                		    	spacing:5
                		    	size_hint_y:None 
                		    	adaptive_height:True
                		    	height:self.minimum_height 
                	    		padding:[10,0]
                			             
            	                	
                				MDRoundFlatButton:
                 	   			text:'MultinomialNB'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:multinomial_nbc_cls_chk              	                
            	                    on_press:app.multinomial_nbc_cls()          
            	                               	                	
                				MDRoundFlatButton:
                 	   			text:'BernoulliNB'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:bnnb_cls_chk              	                
            	                    on_press:app.bnnb_cls()          
            	               
            	                               	                	
                				MDRoundFlatButton:
                 	   			text:'GaussianNB'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:ganb_cls_chk              	                
            	                    on_press:app.ganb_cls()          
            	               
            	                               	                	
                				MDRoundFlatButton:
                 	   			text:'ComplementNB'
            	                    text_color:hex('#FFFFFF')
            	                    md_bg_color:hex('#323043')
            	                    id:conb_cls_chk              	                
            	                    on_press:app.conb_cls()                      	               

                		    MDLabel:
                		    	text:""  
                	    		color:hex('#FFFFFF') 
                		    	bold:True		               		  
                		    MDLabel:
                		    	text:""  
                	    		color:hex('#FFFFFF') 
                		    	bold:True		
                		  

                GridLayout:
                	cols:1
                	spacing:1
                	size_hint_y:None 
                	adaptive_height:True
                	height:self.minimum_height		     
                	id:model_grid                                        

             
                MDLabel
                    text:""
                    id:model_output   
                    color:hex('#FFFFFF')      
                    size_hint_y: None
                    height: self.texture_size[1] + 2*self.padding[1]
 
                     	            
                MDLabel:
                    text:""                       
                                                    	       		              
                                                    	       		              
                                                    	       		                
    	                                  	                                    	
'''


gnrl_fit_status=[]
preprocessing_fit_status=[]

class param_popup(BoxLayout):
	pass

class scn1(Screen):
	pass
class scn2(Screen):
	pass

# global preprocessing pipeline

gbl_pl=[]
gbl_test_pl=[]

#..../

global param_range

jsk=[]
rnm_l=[]
global grid_params_svm
grid_params_svm = {}
clfkrnl='clf__kernel'
clfgma='clf__gamma'
clfrndm='clf__random_state'
clfc='clf__C'
clfcache='clf__cache_size'
clfdegree='clf__degree'
clfco0='clf__coef0'
clftltxt='clf__tol'
clfmax='clf__max_iter'
clfdfs='clf__decision_function_shape'
clfdfs_l=[]

global spw
spw=[]


global gridparams
gridparams= [grid_params_svm]

#SVC

pipe_svm = Pipeline([
('clf', svm.SVC())])

#.../

#dtre
clfcrdt='clfdt__criterion'
clf_spltr_dt='clfdt__splitter'
clf_min_splt_dt='clfdt__min_samples_split'
clfmldtre='clfdt__min_samples_leaf'
clfmaxd='clfdt__max_depth'
clfmwdtre='clfdt__min_weight_fraction_leaf'
clfrdtre='clfdt__random_state'
clfmlndtre='clfdt__max_leaf_nodes'
#clfmaxf='clfdt__max_features'
clfmindtre='clfdt__min_impurity_decrease'
#clfclswt='clfdt__class_weight'
clf_cpalha_dt='clfdt__cpp_alpha'

cridt_l=[]
splitter_dt_l=[]
max_depth_l=[]
#max_features_l=[]
#class_weight_l=[]

grid_params_dtre={}
gridparamsdtre=[grid_params_dtre]

pipe_dtrc=Pipeline([('clfdt',
DecisionTreeClassifier())])

#...../

#linear SVC

tollsvc='clfl__tol'
clsvc='clfl__C'
intsvlscv='clfl__intercept_scaling'
verblsv='clfl__verbose'
rndmlsv='clfl__random_state'
mxitlsv='clfl__max_iter'
penlsv='clfl__penalty'
lslsv='clfl__loss'
dulsv='clfl__dual'
fintlsv='clfl__fit_intercept'
mlclsv='clfl__multi_class'

penaltylsv=[]
losslsv=[]
mltclslsv=[]

grid_params_lsvc={}
gridparamslsvc=[grid_params_lsvc]

pipe_lsvc=Pipeline([('clfl',LinearSVC())])

#....../

# Logistic  regression classifier

penlogr='clflog__penalty'
dualogr='clflog__dual'
tologr='clflog__tol'
clogr='clflog__C'
fitlogr='clflog__fit_intercept'
intrlogr='clflog__intercept_scaling'
rndmlogr='clflog__random_state'
slvrlogr='clflog__solver'
mxitlogr='clflog__max_iter'
mltclogr='clflog__multi_class'
vrbslogr='clflog__verbose'
wrmlogr='clflog__warm_start'
njbslogr='clflog__n_jobs'
l1logr='clflog__l1_ratio'

penaltylreg=[]
solverlreg=[]
multilreg=[]

grid_params_logreg={}
gridparamslogreg=[grid_params_logreg]

pipe_logreg=Pipeline([('clflog',
LogisticRegression())])


#.../

#knn classifier

nneihkn ='clfknn__n_neighbors'
wghtknb='clfknn__weights'
algknb='clfknn__algorithm'
lefknb='clfknn__leaf_size'
pknb='clfknn__p'
mtrcknb='clfknn__metric'
njknb='clfknn__n_jobs'

weightsknb=[]
algorithmknb=[]

grid_params_knn={}
gridparamsknn=[grid_params_knn]

pipe_knn=Pipeline([('clfknn',KNeighborsClassifier())])


#......./

#NuSVC

nu_nugrlst='clfnusvc__nu'
kernel_nugrlst='clfnusvc__kernel'
gamma_nugrlst='clfnusvc__gamma'
degree_nugrlst='clfnusvc__degree'
coef0_nugrlst='clfnusvc__coef0'
tol_nugrlst='clfnusvc__tol'
decision_function_shape_nugrlst='clfnusvc__decision_function_shape'
cache_size_nugrlst='clfnusvc__cache_size'
max_iter_nugrlst='clfnusvc__max_iter'
random_state_nugrlst='clfnusvc__random_state'

kernel_nugrlst_l=[]
gamma_nugrlst_l=[]
decision_function_shape_nugrlst_l=[]
shrinking_nublnlst=[]
probability_nublnlst=[]
class_weight_nublnlst=[]
verbose_nublnlst=[]
break_ties_nublnlst=[]


grid_params_nusvc={}
gridparamsnusvc=[grid_params_nusvc]


pipe_nusvc=Pipeline([('clfnusvc',
NuSVC())])

        #nu=(nu_txt_nusvc),
    	#kernel='rbf',
    	#degree=(degree_txt_nusvc),
    	#gamma='scale',
    	#coef0=(coef0_txt_nusvc),
    	#shrinking=True,
    	#probability=False,
    	#tol=(tol_txt_nusvc),
    	#cache_size=(cache_txt_nusvc),
    	#class_weight=None,
    	#verbose=False,
    	#max_iter=(max_iter_txt_nusvc),
    	#decision_function_shape='ovr',
    	#break_ties=False,
    	#random_state=(random_state_txt_nusvc)))])



#........../


#SGD Classifier

loss_sgdgrlst='clfsgd__loss'
penalty_sgdgrlst='clfsgd__penalty'
alpha_sgdgrlst='clfsgd__alpha'
l1_ratio_sgdgrlst='clfsgd__l1_ratio'
max_iter_sgdgrlst='clfsgd__max_iter'
tol_sgdgrlst='clfsgd__tol'
verbose_sgdgrlst='clfsgd__verbose'
epsilon_sgdgrlst='clfsgd__epsilon'
n_jobs_sgdgrlst='clfsgd__n_jobs'
random_state_sgdgrlst='clfsgd__random_state'
learning_rate_sgdgrlst='clfsgd__learning_rate'
class_weight_sgdgrlst='clfsgd__class_weight'
#eta0_sgdgrlst='clfsgd__eta0'
#power_t_sgdgrlst='clfsgd__power_t'
validation_fraction_sgdgrlst='clfsgd__validation_fraction'
n_iter_no_change_sgdgrlst='clfsgd__n_iter_no_change'
average_sgdgrlst='clfsgd__average'

loss_sgdgrlst_l=[]
penalty_sgdgrlst_l=[]
learning_rate_sgdgrlst=[]
class_weight_sgdgrlst_l=[]
fit_intercept_blst=[]
shuffle_blst=[]
early_stopping_blst=[]
warm_start_blst=[]

grid_params_sgdc={}
gridparamssgdc=[grid_params_sgdc]


pipe_sgdc=Pipeline([('clfsgd',
SGDClassifier())])

#............/

# gradient boosting classifier

loss_grdcgrlst='clfgrdc__loss'
learning_rate_grdcgrlst='clfgrdc__learning_rate'
n_estimators_grdcgrlst='clfgrdc__n_estimators'
subsample_grdcgrlst='clfgrdc__subsample'
criterion_grdcgrlst='clfgrdc__criterion'
min_samples_split_grdcgrlst='clfgrdc__min_samples_split'
min_samples_leaf_grdcgrlst='clfgrdc__min_samples_leaf'
min_weight_fraction_leaf_grdcgrlst='clfgrdc__min_weight_fraction_leaf'
max_depth_grdcgrlst='clfgrdc__max_depth'
min_impurity_decrease_grdcgrlst='clfgrdc__min_impurity_decrease'
#init_grdcgrlst='clfgrdc__init'
random_state_grdcgrlst='clfgrdc__random_state'
max_features_grdcgrlst='clfgrdc__max_features'
verbose_grdcgrlst='clfgrdc__verbose'
max_leaf_nodes_grdcgrlst='clfgrdc__max_leaf_nodes'
validation_fraction_grdcgrlst='clfgrdc__validation_fraction'
n_iter_no_change_grdcgrlst='clfgrdc__n_iter_no_change'
tol_grdcgrlst='clfgrdc__tol'
ccp_alpha_grdcgrlst='clfgrdc__ccp_alpha'


loss_grdcgrlst_l=[]
criterion_grdcgrlst_l=[]
warm_start_grblt=[]


grid_params_grdc={}
gridparamsgrdc=[grid_params_grdc]


pipe_grdc=Pipeline([('clfgrdc',
GradientBoostingClassifier())])


#......./

#RandomForest classifier

n_estimators_rdfcgrlst='clfrdfc__n_estimators'
criterion_rdfcgrlst='clfrdfc__criterion'
max_depth_rdfcgrlst='clfrdfc__max_depth'
min_samples_split_rdfcgrlst='clfrdfc__min_samples_split'
min_samples_leaf_rdfcgrlst='clfrdfc__min_samples_leaf'
min_weight_fraction_leaf_rdfcgrlst='clfrdfc__min_weight_fraction_leaf'
max_features_rdfcgrlst='clfrdfc__max_features'
max_leaf_nodes_rdfcgrlst='clfrdfc__max_leaf_nodes'
min_impurity_decrease_rdfcgrlst='clfrdfc__min_impurity_decrease'
n_jobs_rdfcgrlst='clfrdfc__n_jobs'
random_state_rdfcgrlst='clfrdfc__random_state'
verbose_rdfcgrlst='clfrdfc__verbose'
class_weight_rdfcgrlst='clfrdfc__class_weight'
ccp_alpha_rdfcgrlst='clfrdfc__ccp_alpha'
max_samples_rdfcgrlst='clfrdfc__max_samples'

criterion_rdfcgrlst_l=[]
max_features_rdfcgrlst_l=[]
class_weight_rdfcgrlst_l=[]
bootstrap_rdfcgrlst=[]
oob_score_rdfcgrlst=[]


grid_params_rdfc={}
gridparamsrdfc=[grid_params_rdfc]


pipe_rdfc=Pipeline([('clfrdfc',
RandomForestClassifier())])


#............/

# Mutinomial NB

alpha_mnbgrlst='clfmnb__alpha'

fit_prior_mnbgrlst=[]

grid_params_mnb={}
gridparamsmnb=[grid_params_mnb]


pipe_mnb=Pipeline([('clfmnb',
MultinomialNB())])



#......./

# BernoulliNB

alpha_bnnbgrlst="clfbnnb__alpha"
binarize_bnnbgrlst="clfbnnb__binarize"

fit_prior_bnnbgrlst=[]


grid_params_bnnb={}
gridparamsbnnb=[grid_params_bnnb]


pipe_bnnb=Pipeline([('clfbnnb',
BernoulliNB())])



#.........../

# ComplementNB

alpha_conbgrlst="clfconb__alpha"

fit_prior_conbgrlst=[]
norm_conbgrlst=[]

grid_params_conb={}
gridparamsconb=[grid_params_conb]


pipe_conb=Pipeline([('clfconb',
ComplementNB())])



#.........../


#GaussianNB

var_smoothing_ganbgrlst="clfganb__var_smoothing"


grid_params_ganb={}
gridparamsganb=[grid_params_ganb]


pipe_ganb=Pipeline([('clfganb',
GaussianNB())])


#................../



#Ridge classifier

solver_rdgclgrlst="clfrdgcl__solver"
alpha_rdgclgrlst="clfrdgcl__alpha"
max_iter_rdgclgrlst="clfrdgcl__max_iter"
tol_rdgclgrlst="clfrdgcl__tol"
random_state_rdgclgrlst="clfrdgcl__random_state"

solver_rdgclgrlst_l=[]
fit_intercept_rdgclgrlst=[]
normalize_rdgclgrlst=[]
copy_X_rdgclgrlst=[]
positive_rdgclgrlst=[]

grid_params_rdgcl={}
gridparamsrdgcl=[grid_params_rdgcl]


pipe_rdgcl=Pipeline([('clfrdgcl',
RidgeClassifier())])


#........./


#OneClass SVM

degree_onesvmgrlst="clfonesvm__degree"
coef0_onesvmgrlst="clfonesvm__coef0"
tol_onesvmgrlst="clfonesvm__tol"
nu_onesvmgrlst="clfonesvm__nu"
cache_size_onesvmgrlst="clfonesvm__cache_size"
max_iter_onesvmgrlst="clfonesvm__max_iter"
kernel_onesvmgrlst="clfonesvm__kernel"
gamma_onesvmgrlst="clfonesvm__gamma"

kernel_onesvmgrlst_l=[]
gamma_onesvmgrlst_l=[]
shrinking_onesvmgrlst=[]
verbose_onesvmgrlst=[]


grid_params_onesvm={}
gridparamsonesvm=[grid_params_onesvm]


pipe_onesvm=Pipeline([('clfonesvm',
OneClassSVM())])

#........./


#NearestCentroid Classifier

metric_nrctcgrlst="clfnrctc__metric"
shrink_threshold_nrctcgrlst="clfnrctc__shrink_threshold"


grid_params_nrctc={}
gridparamsnrctc=[grid_params_nrctc]


pipe_nrctc=Pipeline([('clfnrctc',
NearestCentroid())])


#............./



#current parameter optimizer

current_paramopt_svc=[]
current_paramopt_nusvc=[]
current_paramopt_lsvc=[]
current_paramopt_logreg=[]
current_paramopt_knn=[]
current_paramopt_dtre=[]
current_paramopt_rdfc=[]
current_paramopt_sgdc=[]
current_paramopt_grdc=[]
current_paramopt_mnb=[]
current_paramopt_bnnb=[]
current_paramopt_ganb=[]
current_paramopt_conb=[]
current_paramopt_rdgcl=[]
current_paramopt_onesvm=[]
current_paramopt_nrctc=[]

class screen(Screen):
	pass

class output_crd(BoxLayout):
	pass
class output_crd_err(BoxLayout):
	pass

class Arc(MDApp):
    dialog = None
    def build(self):
        self.icon ="Arc logo PNG-01 (2) (1).png"
        from kivy.core.text import LabelBase
        self.theme_cls.theme_style="Dark"
        self.theme_cls.primary_palette="Gray"
        LabelBase.register(
        name="JetBrainsMono",
        fn_regular="jetbrains-mono.regular.ttf")
        theme_font_styles.append('JetBrainsMono')
        self.theme_cls.font_styles["JetBrainsMono"]= ["JetBrainsMono",
        16,
        False,
        0.15,
        ]
        return Builder.load_string(KV)


    def drop_data_btn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        try:
        	self.root.ids.data_grid.clear_widgets()
        except:
        	pass


        try:
        	gnrl_fit_status.remove("data")
        except:
        	pass

        global DATA
        columns_data=self.root.ids.columns_data.text
        rows_data=self.root.ids.rows_data.text
        dropna_rows_data=self.root.ids.dropna_rows_data.text.replace(" ","")
        dropna_columns_data=self.root.ids.dropna_columns_data.text.replace(" ","")

        if dropna_rows_data.replace("-","").isdigit()==True:
            try:
            	dropna_rows_data=int(dropna_rows_data)
            except:
            	print("unexpected input")
            	self.root.ids.data_grid.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text="rows: unexpected input"
            	return
        elif dropna_rows_data=="None":
        	pass
        else:
        	print("unexpected input")
        	self.root.ids.data_grid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="rows: unexpected input"
        	return

        if dropna_columns_data.replace("-","").isdigit()==True:
            try:
            	dropna_columns_data=int(dropna_columns_data)
            except:
            	print("unexpected input")
            	self.root.ids.data_grid.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text="columns: unexpected input"
            	return
        elif dropna_columns_data=="None":
        	pass
        else:
        	print("unexpected input")
        	self.root.ids.data_grid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="columns: unexpected input"
        	return

        if "," in columns_data:
            try:
            	columns_data_l=list(map(str, columns_data.split(',')))
            except:
            	self.root.ids.data_grid.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text="columns: unexpected input"
            	return

        elif "," not in columns_data:
        	if columns_data=="None":
        		pass
        	else:
    		    columns_data_l=[columns_data]
    		    print(columns_data_l)
        else:
        	self.root.ids.data_grid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="columns: unexpected input"
        	return

        if columns_data=="None":
        	pass
        else:
            try:
            	DATA=DATA.drop(columns_data_l,axis = 'columns')
            except Exception as e:
            	self.root.ids.data_grid.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(e)
            	return

        if "," in rows_data:
            try:
            	rows_data_l=list(map(str, rows_data.split(',')))
            except:
            	self.root.ids.data_grid.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text="rows: unexpected input"
            	return
        elif "," not in rows_data:
        	if rows_data=="None":
        		pass
        	else:
        		rows_data_l=[rows_data]
        else:
        	self.root.ids.data_grid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="rows: unexpected input"
        	return

        if rows_data=="None":
        	pass
        else:
        	try:
        		DATA=DATA.drop(rows_data_l,axis ="index")
        	except Exception as e:
        		self.root.ids.data_grid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(e)
        		return

        if dropna_rows_data=="None":
        	pass
        else:
        	try:
        		DATA=DATA.dopna(thresh=(dropna_rows_data),axis="index")
        	except Exception as e:
        		self.root.ids.data_grid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(e)
        		return


        if dropna_columns_data=="None":
        	pass
        else:
        	try:
        		DATA=DATA.dopna(thresh=(dropna_columns_data),axis="columns")
        	except Exception as e:
        		self.root.ids.data_grid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(e)
        		return


    def data_btn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        try:
        	self.root.ids.data_grid.clear_widgets()
        except:
        	pass


        try:
        	gnrl_fit_status.remove("data")
        except:
        	pass

        data_err_lst=[]
        target=self.root.ids.target
        file=self.root.ids.file
        global gt
        gt=file.text
        global tgt
        tgt=target.text
        test=self.root.ids.test
        global tst
        tst=test.text.replace(" ", "")
        random=self.root.ids.random
        global rndm
        rndm=random.text.replace(" ", "")
        global shuffle_dta
        shuffle_dta=self.root.ids.shuffle_dta.text.replace(" ","")

        if os.path.isfile(gt)==True:
        	if gt.endswith('.csv'):
        		try:
        			global DATA
        			DATA = pd.read_csv(gt)
        		except Exception as e:
        			print(e)
        			data_err_lst.append("read_csv")
        			self.root.ids.data_grid.add_widget(self.output_crd_err)
        			self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        			self.output_crd_err.ids.output_text_err.text=str(e)
        	else:
        		print("unsupported file format")
        		data_err_lst.append("unsupported_file_format")
        		self.root.ids.data_grid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="unsupported file format"
        		return

        else:
        	print("file not found")
        	data_err_lst.append("file_not_found")
        	self.root.ids.data_grid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="file not found"
        	return

        if "." in tst and tst.replace(".","").isdigit()==True:
        	tst=float(tst)

        elif tst.isdigit()==True:
        	tst=int(tst)

        elif tst=="None":
        	tst=None

        else:
        	print("unexpected input")
        	data_err_lst.append("test_size")
        	self.root.ids.data_grid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="test_size: unexpected input"
        	return

        if  rndm.isdigit()==True:
        	rndm=int(rndm)

        elif rndm=="None":
        	rndm=None

        else:
        	print("unexpected input")
        	data_err_lst.append("random_state")
        	self.root.ids.data_grid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
        	return

        if shuffle_dta=="True":
        	shuffle_dta=True
        elif shuffle_dta=="False":
        	shuffle_dta=False
        else:
        	print("unexpected input")
        	data_err_lst.append("shuffle")
        	self.root.ids.data_grid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="shuffle: unexpected input"
        	return

        try:
        	X = DATA.drop([tgt], axis = 'columns')
        	y = DATA[tgt].values

        	X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as ne:
        	self.root.ids.data_grid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(ne)


        if len(data_err_lst)==0:
            pass
        else:
            gnrl_fit_status.append("data")



    def head_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
    	    	dta_head=DATA.head()
    	    	print(dta_head)
    	    	self.root.ids.data_grid.add_widget(self.output_crd)
    	    	self.output_crd.ids.output_text_heading.text="[b]head"
    	    	self.output_crd.ids.output_text.text=str(dta_head)

    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def tail_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():

    	    try:
        		dta_tail=DATA.tail()
        		print(dta_tail)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]tail"
        		self.output_crd.ids.output_text.text=str(dta_tail)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def info_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_info=DATA.info()
        		print(dta_info)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]info"
        		self.output_crd.ids.output_text.text=str(dta_info)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def shape_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
    		    dta_shape=DATA.shape()
    		    print(dta_shape)
    		    self.root.ids.data_grid.add_widget(self.output_crd)
    		    self.output_crd.ids.output_text_heading.text="[b]shape"
    		    self.output_crd.ids.output_text.text=str(dta_shape)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def size_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_size=DATA.size()
        		print(dta_size)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]size"
        		self.output_crd.ids.output_text.text=str(dta_size)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def ndim_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_ndim=DATA.ndim()
        		print(dta_ndim)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]ndim"
        		self.output_crd.ids.output_text.text=str(dta_ndim)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def describe_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_describe=DATA.describe()
        		print(dta_describe)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]describe"
        		self.output_crd.ids.output_text.text=str(dta_describe)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def sample_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_sample=DATA.sample()
        		print(dta_sample)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]sample"
        		self.output_crd.ids.output_text.text=str(dta_sample)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def isnullsum_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_isnullsum=DATA.isnull().sum().sum()
        		print(dta_isnullsum)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]total null values"
        		self.output_crd.ids.output_text.text=str(dta_isnullsum)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def nunique_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_nunique=DATA.nunique()
        		print(dta_nunique)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]nunique"
        		self.output_crd.ids.output_text.text=str(dta_nunique)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def index_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_index=DATA.index()
        		print(dta_index)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]index"
        		self.output_crd.ids.output_text.text=str(dta_index)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def columns_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
    		    dta_columns=DATA.columns()
    		    print(dta_columns)
    		    self.root.ids.data_grid.add_widget(self.output_crd)
    		    self.output_crd.ids.output_text_heading.text="[b]columns"
    		    self.output_crd.ids.output_text.text=str(dta_columns)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def memory_usage_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_memory=DATA.memory_usage()
        		print(dta_memory)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]memory_usage"
        		self.output_crd.ids.output_text.text=str(dta_memory)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def nlargest_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
    	  	  dta_nlargest=DATA.nlargest()
    	  	  print(dta_nlargest)
    	  	  self.root.ids.data_grid.add_widget(self.output_crd)
    	  	  self.output_crd.ids.output_text_heading.text="[b]nlargest"
    	  	  self.output_crd.ids.output_text.text=str(dta_nlargest)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def isna_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_isna=DATA.isna()
        		print(dta_isna)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]isna"
        		self.output_crd.ids.output_text.text=str(dta_isna)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def duplicated_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_duplicated=DATA.duplicated()
        		print(dta_duplicated)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]duplicated"
        		self.output_crd.ids.output_text.text=str(dta_duplicated)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def corr_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_corr=DATA.corr()
        		print(dta_corr)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]corr"
        		self.output_crd.ids.output_text.text=str(dta_corr)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def dtypes_datainf(self):
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	if "DATA" in globals():
    	    try:
        		dta_dtypes=DATA.dtypes()
        		print(dta_dtypes)
        		self.root.ids.data_grid.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]dtypes"
        		self.output_crd.ids.output_text.text=str(dta_dtypes)
    	    except Exception as e:
    	    	self.root.ids.data_grid.add_widget(self.output_crd_err)
    	    	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    	    	self.output_crd_err.ids.output_text_err.text=str(e)

    def svm_btn(self):

        svm_err_lst=[]

        c_txt=self.svm_model.ids.c_txt
        global c_svm_txt
        c_svm_txt=c_txt.text.replace(" ", "")
        #gamma_txt=self.svm_model.ids.gamma_txt
        #global gma_txt
        #gma_txt=gamma_txt.text.replace(" ", "")
        degree_txt=self.svm_model.ids.degree_txt
        global dgr_txt
        dgr_txt=degree_txt.text.replace(" ", "")
        cache_txt=self.svm_model.ids.cache_txt
        global ch_txt
        ch_txt=cache_txt.text.replace(" ", "")
        coef0_txt=self.svm_model.ids.coef0_txt
        global co0_txt
        co0_txt=coef0_txt.text.replace(" ", "")
        tol_txt=self.svm_model.ids.tol_txt
        global tltxt
        tltxt=tol_txt.text.replace(" ", "")
        max_iter_txt=self.svm_model.ids.max_iter_txt
        global mter
        mter=max_iter_txt.text.replace(" ", "")


        if ',' in c_svm_txt and c_svm_txt.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global param_range
                param_range=list(map(float, c_svm_txt.split(',')))
                grid_params_svm[clfc]=param_range
            except:
            	print("unexpected input C")
            	svm_err_lst.append("C")
        elif  "." in c_svm_txt and  c_svm_txt.replace(".", "").replace("-","").isdigit()==True or c_svm_txt.replace("-","").isdigit()==True:
            try:
                pipe_svm['clf'].C=(float(c_svm_txt))
            except:
            	print("unexpected input")
            try:
                del grid_params_svm['clf__C']
            except:
                pass
        else:
            print("C")
            svm_err_lst.append("C")

        if ',' in ch_txt and ch_txt.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global clfcache_l
                clfcache_l=list(map(float, ch_txt.split(',')))
                grid_params_svm[clfcache]=clfcache_l
            except:
            	print("unexpected input")
            	svm_err_lst.append("cache_size")

        elif "." in ch_txt and  ch_txt.replace(".", "").replace("-","").isdigit()==True or ch_txt.replace("-","").isdigit()==True:
            try:
                pipe_svm['clf'].cache_size=(float(ch_txt))
            except:
            	print("unexpected input")
            try:
            	del grid_params_svm['clf__cache_size']
            except:
            	pass
        else:
        	print("cache_size")
        	svm_err_lst.append("cache_size")

        if ',' in dgr_txt and dgr_txt.replace(",","").replace("-","").isdigit()==True:
            try:
                global clfdgr_l
                clfdgr_l=list(map(int, dgr_txt.split(',')))
                grid_params_svm[clfdegree]=clfdgr_l
            except:
            	print("unexpected input")
            	svm_err_lst.append("degree")

        elif dgr_txt.replace(".", "").replace("-","").isdigit()==True:
            try:
                pipe_svm['clf'].degree=(int(dgr_txt))
            except:
            	print("unexpected input")
            try:
            	del grid_params_svm['clf__degree']
            except:
            	pass
        else:
            print("degree")
            svm_err_lst.append("degree")

        if ',' in co0_txt and co0_txt.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global clfco_l
                clfco_l=list(map(float,co0_txt.split(',')))
                grid_params_svm[clfco0]=clfco_l
            except:
            	print("unexpected input")
            	svm_err_lst.append("coef0")

        elif "." in co0_txt and  co0_txt.replace(".", "").replace(".", "").isdigit()==True or co0_txt.replace(".", "").isdigit()==True:
            try:
                pipe_svm['clf'].coef0=(float(co0_txt))
            except:
            	print("unexpected input")
            try:
            	del grid_params_svm['clf__coef0']
            except:
            	pass
        else:
            print("coef0")
            svm_err_lst.append("coef0")

        if ',' in tltxt and tltxt.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global tltxt_l
                tltxt_l=list(map(float,tltxt.split(',')))
                grid_params_svm[clftltxt]=tltxt_l
            except:
            	print("unexpected input")
            	svm_err_lst.append("tol")

        elif "." in tltxt and  tltxt.replace(".", "").replace(".", "").isdigit()==True or tltxt.replace(".", "").isdigit()==True:
            try:
                pipe_svm['clf'].tol=(float(tltxt))
            except:
            	print("unexpected input")
            try:
            	del grid_params_svm['clf__tol']
            except:
            	pass
        else:
            print("tol")
            svm_err_lst.append("tol")

        if ',' in mter and mter.replace(",","").replace("-","").isdigit()==True :
            try:
                global clfmter
                clfmter=list(map(int,mter.split(',')))
                grid_params_svm[clfmax]=clfmter
            except:
            	print("unexpected input")
            	svm_err_lst.append("max_iter")

        elif mter.replace("-","").isdigit()==True:
            try:
                pipe_svm['clf'].max_iter=int((mter))
            except:
            	print("unexpected input")
            try:
            	del grid_params_svm['clf__max_iter']
            except:
            	pass
        else:
        	print("max_iter")
        	svm_err_lst.append("max_iter")

        self.model_svc()

    def deviance_grdc(self):

        if self.model_gradient_boosting.ids.deviance_grdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_gradient_boosting.ids.deviance_grdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfgrdc__loss' in grid_params_grdc:
        	    pass
        	else:
        	   grid_params_grdc[loss_grdcgrlst]=loss_grdcgrlst_l
        	loss_grdcgrlst_l.append('deviance')
        else:
            self.model_gradient_boosting.ids.deviance_grdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_grdcgrlst_l.remove('deviance')
            	del grid_params_grdc['clfgrdc__loss']

            except:
            	pass



    def exponential_grdc(self):

        if self.model_gradient_boosting.ids.exponential_grdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_gradient_boosting.ids.exponential_grdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfgrdc__loss' in grid_params_grdc:
        	    pass
        	else:
        	   grid_params_grdc[loss_grdcgrlst]=loss_grdcgrlst_l
        	loss_grdcgrlst_l.append('exponential')
        else:
            self.model_gradient_boosting.ids.exponential_grdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_grdcgrlst_l.remove('exponential')
            	del grid_params_grdc['clfgrdc__loss']

            except:
            	pass

    def friedman_mse_grdc(self):

        if self.model_gradient_boosting.ids.friedman_mse_grdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_gradient_boosting.ids.friedman_mse_grdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfgrdc__criterion' in grid_params_grdc:
        	    pass
        	else:
        	   grid_params_grdc[criterion_grdcgrlst]=criterion_grdcgrlst_l
        	criterion_grdcgrlst_l.append('friedman_mse')
        else:
            self.model_gradient_boosting.ids.friedman_mse_grdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	criterion_grdcgrlst_l.remove('friedman_mse')
            	del grid_params_grdc['clfgrdc__criterion']

            except:
            	pass

    def squared_error_grdc(self):

        if self.model_gradient_boosting.ids.squared_error_grdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_gradient_boosting.ids.squared_error_grdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfgrdc__criterion' in grid_params_grdc:
        	    pass
        	else:
        	   grid_params_grdc[criterion_grdcgrlst]=criterion_grdcgrlst_l
        	criterion_grdcgrlst_l.append('squared_error')
        else:
            self.model_gradient_boosting.ids.squared_error_grdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	criterion_grdcgrlst_l.remove('squared_error')
            	del grid_params_grdc['clfgrdc__criterion']

            except:
            	pass

    def warm_start_grdc(self,checkbox,value):

    	if value:
    		pipe_grdc['clfgrdc'].warm_start=True
    	else:
    		pipe_grdc['clfgrdc'].warm_start=False


    def grbst_btn(self):

    	global learning_rate_grdc
    	learning_rate_grdc=self.model_gradient_boosting.ids.learning_rate_grdc.text.replace(" ", "")
    	global n_estimators_grdc
    	n_estimators_grdc=self.model_gradient_boosting.ids.n_estimators_grdc.text.replace(" ", "")
    	global subsample_grdc
    	subsample_grdc=self.model_gradient_boosting.ids.subsample_grdc.text.replace(" ", "")
    	global min_samples_split_grdc
    	min_samples_split_grdc=self.model_gradient_boosting.ids.min_samples_split_grdc.text.replace(" ", "")
    	global min_samples_leaf_grdc
    	min_samples_leaf_grdc=self.model_gradient_boosting.ids.min_samples_leaf_grdc.text.replace(" ", "")
    	global min_weight_fraction_leaf_grdc
    	min_weight_fraction_leaf_grdc=self.model_gradient_boosting.ids.min_weight_fraction_leaf_grdc.text.replace(" ", "")
    	global max_depth_grdc
    	max_depth_grdc=self.model_gradient_boosting.ids.max_depth_grdc.text.replace(" ", "")
    	global min_impurity_decrease_grdc
    	min_impurity_decrease_grdc=self.model_gradient_boosting.ids.min_impurity_decrease_grdc.text.replace(" ", "")
    	global random_state_grdc
    	random_state_grdc=self.model_gradient_boosting.ids.random_state_grdc.text.replace(" ", "")
    	global verbose_grdc
    	verbose_grdc=self.model_gradient_boosting.ids.verbose_grdc.text.replace(" ", "")
    	global max_leaf_nodes_grdc
    	max_leaf_nodes_grdc=self.model_gradient_boosting.ids.max_leaf_nodes_grdc.text.replace(" ", "")
    	global validation_fraction_grdc
    	validation_fraction_grdc=self.model_gradient_boosting.ids.validation_fraction_grdc.text.replace(" ", "")
    	global n_iter_no_change_grdc
    	n_iter_no_change_grdc=self.model_gradient_boosting.ids.n_iter_no_change_grdc.text.replace(" ", "")
    	global tol_grdc
    	tol_grdc=self.model_gradient_boosting.ids.tol_grdc.text.replace(" ", "")
    	global ccp_alpha_grdc
    	ccp_alpha_grdc=self.model_gradient_boosting.ids.ccp_alpha_grdc.text.replace(" ", "")

    	if ',' in  learning_rate_grdc and learning_rate_grdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
    	    try:
    	        global learning_rate_grdc_range
    	        learning_rate_grdc_range=list(map(float,learning_rate_grdc.split(',')))
    	        grid_params_grdc[learning_rate_grdcgrlst]=learning_rate_grdc_rangel
    	    except:
            	print("unexpected input")

    	elif "." in learning_rate_grdc and  learning_rate_grdc.replace(".", "").replace("-","").isdigit()==True or learning_rate_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].learning_rate=float((learning_rate_grdc))
    	    except:
            	pass
    	    try:
            	del grid_params_grdc['clfgrdc__learning_rate']
    	    except:
            	print("unexpected input")
    	else:
        	print("learning_rate")

    	if ',' in  n_estimators_grdc and n_estimators_grdc.replace(",","").replace("-","").isdigit()==True:
    	    try:
    	        global n_estimators_grdc_range
    	        n_estimators_grdc_range=list(map(int,n_estimators_grdc.split(',')))
    	        grid_params_grdc[n_estimators_grdcgrlst]=n_estimators_grdc_range
    	    except:
            	print("unexpected input")

    	elif  n_estimators_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].n_estimators=int((n_estimators_grdc))
    	    except:
            	print("unexpected input")
    	    try:
            	del grid_params_grdc['clfgrdc__n_estimators']
    	    except:
            	pass
    	else:
        	print("n_estimators")

    	if ',' in  subsample_grdc and subsample_grdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
    	    try:
        	    global subsample_grdc_range
        	    subsample_grdc_range=list(map(float,subsample_grdc.split(',')))
        	    grid_params_grdc[subsample_grdcgrlst]=subsample_grdc_range
    	    except:
            	print("unexpected input")

    	elif "." in subsample_grdc and  subsample_grdc.replace(".", "").replace("-","").isdigit()==True or subsample_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].subsample=float((subsample_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__subsample']
    	    except:
            	pass
    	else:
        	print("subsample")

    	global min_samples_split_grdc_range

    	if ',' in  min_samples_split_grdc and min_samples_split_grdc.replace(",","").replace("-","").isdigit()==True:
    	    try:
        	    min_samples_split_grdc_range=list(map(int,min_samples_split_grdc.split(',')))
        	    grid_params_grdc[min_samples_split_grdcgrlst]=min_samples_split_grdc_range
    	    except:
            	print("unexpected input")

    	elif ',' in  min_samples_split_grdc and min_samples_split_grdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
    	    try:

        	    min_samples_split_grdc_range=list(map(float,min_samples_split_grdc.split(',')))
        	    grid_params_grdc[min_samples_split_grdcgrlst]=min_samples_split_grdc_range
    	    except:
            	print("unexpected input")

    	elif "." in min_samples_split_grdc and  min_samples_split_grdc.replace(".", "").replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].min_samples_split=float((min_samples_split_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__min_samples_split']
    	    except:
            	pass

    	elif min_samples_split_grdc and  min_samples_split_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].min_samples_split=int((min_samples_split_grdc))

    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__min_samples_split']
    	    except:
            	pass

    	else:
        	print("min_samples_split")

    	global min_samples_leaf_grdc_range

    	if ',' in  min_samples_leaf_grdc and min_samples_leaf_grdc.replace(",","").replace("-","").isdigit()==True:
    	    try:
        	     min_samples_leaf_grdc_range=list(map(int,    min_samples_leaf_grdc.split(',')))
        	     grid_params_grdc[min_samples_leaf_grdcgrlst]=min_samples_leaf_grdc_range
    	    except:
            	print("unexpected input")

    	elif ',' in  min_samples_leaf_grdc and min_samples_leaf_grdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
    	    try:
        	    min_samples_leaf_grdc_range=list(map(float,    min_samples_leaf_grdc.split(',')))
        	    grid_params_grdc[min_samples_leaf_grdcgrlst]=min_samples_leaf_grdc_range
    	    except:
            	print("unexpected input")

    	elif "." in min_samples_leaf_grdc and  min_samples_leaf_grdc.replace(".", "").replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].min_samples_leaf=float((min_samples_leaf_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__min_samples_leaf']
    	    except:
            	pass

    	elif min_samples_leaf_grdc and  min_samples_leaf_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].min_samples_leaf=int((min_samples_leaf_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__min_samples_leaf']
    	    except:
            	pass
    	else:
        	print("min_samples_leaf")

    	if ',' in  min_weight_fraction_leaf_grdc and min_weight_fraction_leaf_grdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
    	    try:
    	        global min_weight_fraction_leaf_grdc_range
    	        min_weight_fraction_leaf_grdc_range=list(map(float,min_weight_fraction_leaf_grdc.split(',')))
    	        grid_params_grdc[min_weight_fraction_leaf_grdcgrlst]=min_weight_fraction_leaf_grdc_range
    	    except:
            	print("unexpected input")

    	elif "." in min_weight_fraction_leaf_grdc and  min_weight_fraction_leaf_grdc.replace(".", "").replace("-","").isdigit()==True or min_weight_fraction_leaf_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].min_weight_fraction_leaf=float((min_weight_fraction_leaf_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__min_weight_fraction_leaf']
    	    except:
            	pass
    	else:
        	print("min_weight_fraction_leaf")

    	if ',' in  max_depth_grdc and max_depth_grdc.replace(",","").replace("-","").isdigit()==True:
    	    try:
        	    global max_depth_grdc_range
        	    max_depth_grdc_range=list(map(int,max_depth_grdc.split(',')))
        	    grid_params_grdc[max_depth_grdcgrlst]=max_depth_grdc_range
    	    except:
            	print("unexpected input")

    	elif  max_depth_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].max_depth=int((max_depth_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__max_depth']
    	    except:
            	pass
    	else:
        	print("max_depth")

    	if ',' in  min_impurity_decrease_grdc and min_impurity_decrease_grdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
    	    try:
        	    global min_impurity_decrease_grdc_range
        	    min_impurity_decrease_grdc_range=list(map(float,min_impurity_decrease_grdc.split(',')))
        	    grid_params_grdc[min_impurity_decrease_grdcgrlst]=min_impurity_decrease_grdc_range
    	    except:
            	print("unexpected input")


    	elif "." in min_impurity_decrease_grdc and  min_impurity_decrease_grdc.replace(".", "").replace("-","").isdigit()==True or min_impurity_decrease_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].min_impurity_decrease=float((min_impurity_decrease_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__min_impurity_decrease']
    	    except:
            	pass
    	else:
        	print("min_impurity_decrease")

    	if ',' in  random_state_grdc and random_state_grdc.replace(",","").replace("-","").isdigit()==True:
    	    try:
        	    global random_state_grdc_range
        	    random_state_grdc_range=list(map(int,random_state_grdc.split(',')))
    	    except:
            	print("unexpected input")
    	        grid_params_grdc[random_state_grdcgrlst]=random_state_grdc_range

    	elif  random_state_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].random_state=int((random_state_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__random_state']
    	    except:
            	pass
    	elif random_state_grdc=="None":
            pipe_grdc['clfgrdc'].random_state=None

            try:
            	del grid_params_grdc['clfgrdc__random_state']
            except:
            	pass
    	else:
        	print("random_state")


    	if ',' in  verbose_grdc and verbose_grdc.replace(",","").replace("-","").isdigit()==True:
    	    try:
        	    global verbose_grdc_range
        	    verbose_grdc_range=list(map(int,verbose_grdc.split(',')))
    	    except:
            	print("unexpected input")
    	        grid_params_grdc[verbose_grdcgrlst]=verbose_grdc_range

    	elif  verbose_grdc.replace("-","").isdigit()==True or verbose_grdc.isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].verbose=int((verbose_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__verbose']
    	    except:
            	pass
    	else:
        	print("verbose")

    	if ',' in  max_leaf_nodes_grdc and max_leaf_nodes_grdc.replace(",","").replace("-","").isdigit()==True:
    	    try:
    	        global max_leaf_nodes_grdc_range
    	        max_leaf_nodes_grdc_range=list(map(int,max_leaf_nodes_grdc.split(',')))
    	        grid_params_grdc[max_leaf_nodes_grdcgrlst]=max_leaf_nodes_grdc_range
    	    except:
            	print("unexpected input")

    	elif  max_leaf_nodes_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].max_leaf_nodes=int((max_leaf_nodes_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__max_leaf_nodes']
    	    except:
            	pass
    	elif max_leaf_nodes_grdc=="None":
            pipe_grdc['clfgrdc'].max_leaf_nodes=None

            try:
            	del grid_params_grdc['clfgrdc__max_leaf_nodes']
            except:
            	pass
    	else:
        	print("max_leaf_nodes")

    	if ',' in  validation_fraction_grdc and validation_fraction_grdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
    	    try:
    	        global validation_fraction_grdc_range
    	        validation_fraction_grdc_range=list(map(float,validation_fraction_grdc.split(',')))
    	        grid_params_grdc[validation_fraction_grdcgrlst]=validation_fraction_grdc_range
    	    except:
            	print("unexpected input")

    	elif "." in validation_fraction_grdc and  validation_fraction_grdc.replace(".", "").replace("-","").isdigit()==True or validation_fraction_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].validation_fraction=float((validation_fraction_grdc))
    	    except:
            	print("unexpected input")

    	    try:
    	    	del grid_params_grdc['clfgrdc__validation_fraction']
    	    except:
            	pass
    	else:
        	print("validation_fraction")

    	if ',' in  n_iter_no_change_grdc and n_iter_no_change_grdc.replace(",","").replace("-","").isdigit()==True:
    	    try:
        	    global n_iter_no_change_grdc_range
        	    n_iter_no_change_grdc_range=list(map(int,n_iter_no_change_grdc.split(',')))
        	    grid_params_grdc[n_iter_no_change_grdcgrlst]=n_iter_no_change_grdc_range
    	    except:
            	print("unexpected input")


    	elif  n_iter_no_change_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].n_iter_no_change=int((n_iter_no_change_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__n_iter_no_change']
    	    except:
            	pass
    	elif n_iter_no_change_grdc=="None":
            pipe_grdc['clfgrdc'].n_iter_no_change=None

            try:
            	del grid_params_grdc['clfgrdc__n_iter_no_change']
            except:
            	pass
    	else:
        	print("n_iter_no_change")

    	if ',' in  tol_grdc and tol_grdc.replace(",","").replace(".","").replace("-","").isdigit()==True:

    	    try:
        	    global tol_grdc_range
        	    tol_grdc_range=list(map(float,tol_grdc.split(',')))
        	    grid_params_grdc[tol_grdcgrlst]=tol_grdc_range
    	    except:
            	print("unexpected input")

    	elif "." in tol_grdc and  tol_grdc.replace(".", "").replace("-","").isdigit()==True or tol_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].tol=float((tol_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__tol']
    	    except:
            	pass
    	else:
        	print("tol")

    	if ',' in  ccp_alpha_grdc and ccp_alpha_grdc.replace(",","").replace(".","").replace("-","").isdigit()==True:

    	    try:
        	    global ccp_alpha_grdc_range
        	    ccp_alpha_grdc_range=list(map(float,ccp_alpha_grdc.split(',')))
        	    grid_params_grdc[ccp_alpha_grdcgrlst]=ccp_alpha_grdc_range
    	    except:
            	print("unexpected input")

    	elif "." in ccp_alpha_grdc and  ccp_alpha_grdc.replace(".", "").replace("-","").isdigit()==True or ccp_alpha_grdc.replace("-","").isdigit()==True:
    	    try:
                pipe_grdc['clfgrdc'].ccp_alpha=float((ccp_alpha_grdc))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_grdc['clfgrdc__ccp_alpha']
    	    except:
            	pass
    	else:
        	print("ccp_alpha")


    	print(grid_params_grdc)
    	self.model_grdc()

    def fit_prior_mnbc(self,checkbox,value):

    	if value:
    		pipe_mnb['clfmnb'].fit_prior=True
    	else:
    		pipe_mnb['clfmnb'].fit_prior=False

    def mnnbc_btn(self):

    	global alpha_mnbc
    	alpha_mnbc=self.mnb_model.ids.alpha_mnbc.text.replace(" ", "")

    	if ',' in  alpha_mnbc and alpha_mnbc.replace(",","").replace(".","").replace("-","").isdigit()==True:

    	    try:
        	    global alpha_mnbc_range
        	    alpha_mnbc_range=list(map(float,alpha_mnbc.split(',')))
        	    grid_params_mnb[alpha_mnbgrlst]=alpha_mnbc_range
    	    except:
            	print("unexpected input")

    	elif "." in alpha_mnbc and  alpha_mnbc.replace(".", "").replace("-","").isdigit()==True or alpha_mnbc.replace("-","").isdigit()==True:
    	    try:
                pipe_mnb['clfmnb'].alpha=float((alpha_mnbc))
    	    except:
                print("unexpected input")

    	    try:
            	del grid_params_mnb['clfmnb__alpha']
    	    except:
            	pass
    	else:
        	print("alpha")


    	print(grid_params_mnb)
    	self.model_mnb()


    def gini_rdfc(self):

        if self.model_random_forest.ids.gini_rdfc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_random_forest.ids.gini_rdfc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdfc__criterion' in grid_params_rdfc:
        	    pass
        	else:
        	   grid_params_rdfc[criterion_rdfcgrlst]=criterion_rdfcgrlst_l
        	criterion_rdfcgrlst_l.append('gini')
        else:
            self.model_random_forest.ids.gini_rdfc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	criterion_rdfcgrlst_l.remove('gini')
            	del grid_params_rdfc['clfrdfc__criterion']

            except:
            	pass


    def entropy_rdfc(self):

        if self.model_random_forest.ids.entropy_rdfc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_random_forest.ids.entropy_rdfc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdfc__criterion' in grid_params_rdfc:
        	    pass
        	else:
        	   grid_params_rdfc[criterion_rdfcgrlst]=criterion_rdfcgrlst_l
        	criterion_rdfcgrlst_l.append('entropy')
        else:
            self.model_random_forest.ids.entropy_rdfc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	criterion_rdfcgrlst_l.remove('entropy')
            	del grid_params_rdfc['clfrdfc__criterion']

            except:
            	pass


    def auto_rdfc(self):

        if self.model_random_forest.ids.auto_rdfc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_random_forest.ids.auto_rdfc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdfc__max_features' in grid_params_rdfc:
        	    pass
        	else:
        	   grid_params_rdfc[max_features_rdfcgrlst]=max_features_rdfcgrlst_l
        	max_features_rdfcgrlst_l.append('auto')
        else:
            self.model_random_forest.ids.auto_rdfc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	max_features_rdfcgrlst_l.remove('auto')
            	del grid_params_rdfc['clfrdfc__max_features']

            except:
            	pass


    def sqrt_rdfc(self):

        if self.model_random_forest.ids.sqrt_rdfc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_random_forest.ids.sqrt_rdfc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdfc__max_features' in grid_params_rdfc:
        	    pass
        	else:
        	   grid_params_rdfc[max_features_rdfcgrlst]=max_features_rdfcgrlst_l
        	max_features_rdfcgrlst_l.append('sqrt')
        else:
            self.model_random_forest.ids.sqrt_rdfc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	max_features_rdfcgrlst_l.remove('sqrt')
            	del grid_params_rdfc['clfrdfc__max_features']

            except:
            	pass


    def log2_rdfc(self):

        if self.model_random_forest.ids.log2_rdfc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_random_forest.ids.log2_rdfc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdfc__max_features' in grid_params_rdfc:
        	    pass
        	else:
        	   grid_params_rdfc[max_features_rdfcgrlst]=max_features_rdfcgrlst_l
        	max_features_rdfcgrlst_l.append('log2')
        else:
            self.model_random_forest.ids.log2_rdfc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	max_features_rdfcgrlst_l.remove('log2')
            	del grid_params_rdfc['clfrdfc__max_features']

            except:
            	pass


    def balanced_rdfc(self):

        if self.model_random_forest.ids.balanced_rdfc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_random_forest.ids.balanced_rdfc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdfc__class_weight' in grid_params_rdfc:
        	    pass
        	else:
        	   grid_params_rdfc[class_weight_rdfcgrlst]=class_weight_rdfcgrlst_l
        	class_weight_rdfcgrlst_l.append('balanced')
        else:
            self.model_random_forest.ids.balanced_rdfc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	class_weight_rdfcgrlst_l.remove('balanced')
            	del grid_params_rdfc['clfrdfc__class_weight']

            except:
            	pass


    def balanced_subsample_rdfc(self):

        if self.model_random_forest.ids.balanced_subsample_rdfc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_random_forest.ids.balanced_subsample_rdfc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdfc__class_weight' in grid_params_rdfc:
        	    pass
        	else:
        	   grid_params_rdfc[class_weight_rdfcgrlst]=class_weight_rdfcgrlst_l
        	class_weight_rdfcgrlst_l.append('balanced_subsample')
        else:
            self.model_random_forest.ids.balanced_subsample_rdfc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	class_weight_rdfcgrlst_l.remove('balanced_subsample')
            	del grid_params_rdfc['clfrdfc__class_weight']

            except:
            	pass

    def None_rdfc(self):

        if self.model_random_forest.ids.None_rdfc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_random_forest.ids.None_rdfc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdfc__class_weight' in grid_params_rdfc:
        	    pass
        	else:
        	   grid_params_rdfc[class_weight_rdfcgrlst]=class_weight_rdfcgrlst_l
        	class_weight_rdfcgrlst_l.append(None)
        else:
            self.model_random_forest.ids.None_rdfc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	class_weight_rdfcgrlst_l.remove(None)
            	del grid_params_rdfc['clfrdfc__class_weight']

            except:
            	pass

    def bootstrap_rdfc(self,checkbox,value):

    	if value:
    		pipe_rdfc['clfrdfc'].bootstrap=True
    	else:
    		pipe_rdfc['clfrdfc'].bootstrap=False

    def oob_score_rdfc(self,checkbox,value):

    	if value:
    		pipe_rdfc['clfrdfc'].oob_score=True
    	else:
    		pipe_rdfc['clfrdfc'].oob_score=False

    def warm_start_rdfc(self,checkbox,value):

    	if value:
    		pipe_rdfc['clfrdfc'].warm_start=True
    	else:
    		pipe_rdfc['clfrdfc'].warm_start=False



    def rndmfrst_btn(self):

    	global n_estimators_rdfc
    	n_estimators_rdfc=self.model_random_forest.ids.n_estimators_rdfc.text.replace(" ", "")
    	global max_depth_rdfc
    	max_depth_rdfc=self.model_random_forest.ids.max_depth_rdfc.text.replace(" ", "")
    	global min_samples_split_rdfc
    	min_samples_split_rdfc=self.model_random_forest.ids.min_samples_split_rdfc.text.replace(" ", "")
    	global min_samples_leaf_rdfc
    	min_samples_leaf_rdfc=self.model_random_forest.ids.min_samples_leaf_rdfc.text.replace(" ", "")
    	global min_weight_fraction_leaf_rdfc
    	min_weight_fraction_leaf_rdfc=self.model_random_forest.ids.min_weight_fraction_leaf_rdfc.text.replace(" ", "")
    	global max_leaf_nodes_rdfc
    	max_leaf_nodes_rdfc=self.model_random_forest.ids.max_leaf_nodes_rdfc.text.replace(" ", "")
    	global min_impurity_decrease_rdfc
    	min_impurity_decrease_rdfc=self.model_random_forest.ids.min_impurity_decrease_rdfc.text.replace(" ", "")
    	global n_jobs_rdfc
    	n_jobs_rdfc=self.model_random_forest.ids.n_jobs_rdfc.text.replace(" ", "")
    	global random_state_rdfc
    	random_state_rdfc=self.model_random_forest.ids.random_state_rdfc.text.replace(" ", "")
    	global verbose_rdfc
    	verbose_rdfc=self.model_random_forest.ids.verbose_rdfc.text.replace(" ", "")
    	global ccp_alpha_rdfc
    	ccp_alpha_rdfc=self.model_random_forest.ids.ccp_alpha_rdfc.text.replace(" ", "")
    	global max_samples_rdfc
    	max_samples_rdfc=self.model_random_forest.ids.max_samples_rdfc.text.replace(" ", "")
    	#global max_features_rdfc
    	#max_features_rdfc=self.model_random_forest.ids.max_features_rdfc.text.replace(" ", "")

   	 #pending
        #if "auto" in max_features_rdfc:

        	#max_features_rdfc="auto"
    	    #try:
              #  pipe_rdfc['clfrdfc'].n_estimators="auto"
    	   # except:
           # 	print("unexpected input")
    	#    try:
           # 	del grid_params_rdfc['clfrdfc__max_features]
    #	    except:
          #  	pass

   	 #pending
   #     elif "sqrt" in max_features_rdfc:
        #	max_features_rdfc="sqrt"
   	 #pending
     #   elif "log2" in max_features_rdfc:
        #	max_features_rdfc="log2"
   	 #pending
      #  elif "None" in max_features_rdfc:
        #	max_features_rdfc=None

    	if ',' in n_estimators_rdfc and n_estimators_rdfc.replace(",", "").replace("-","").isdigit()==True:

    	    global n_estimators_rdfc_range
    	    try:
    	        n_estimators_rdfc_range=list(map(int, n_estimators_rdfc.split(',')))
    	        grid_params_rdfc[n_estimators_rdfcgrlst]=n_estimators_rdfc_range
    	    except:
    	    	print("unexpected input")
    	elif n_estimators_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].n_estimators=(int(n_estimators_rdfc))
    	    except:
            	print("unexpected input")
    	    try:
            	del grid_params_rdfc['clfrdfc__n_estimators']
    	    except:
            	pass
    	else:
        	print("n_estimators")

    	if ',' in max_depth_rdfc and max_depth_rdfc.replace(",", "").replace("-","").isdigit()==True:

    	    global max_depth_rdfc_range
    	    try:
    	        max_depth_rdfc_range=list(map(int, max_depth_rdfc.split(',')))
    	        grid_params_rdfc[max_depth_rdfcgrlst]=max_depth_rdfc_range
    	    except:
    	    	print("unexpected input")

    	elif max_depth_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].max_depth=(int(max_depth_rdfc))
    	    except:
    	        print("unexpected input")
    	    try:
            	del grid_params_rdfc['clfrdfc__max_depth']
    	    except:
            	pass
    	elif max_depth_rdfc=="None":
            pipe_rdfc['clfrdfc'].max_depth=None
            try:
            	del grid_params_rdfc['clfrdfc__max_depth']
            except:
            	pass
    	else:
        	print("max_depth")

        #int or float
    	global min_samples_split_rdfc_range
    	if ',' in  min_samples_split_rdfc and min_samples_split_rdfc.replace(",","").replace("-","").isdigit()==True:

            try:
            	min_samples_split_rdfc_range=list(map(int,min_samples_split_rdfc.split(',')))
            	grid_params_rdfc[min_samples_split_rdfcgrlst]=min_samples_split_rdfc_range
            except:
            	print("unexpected input")

    	elif ',' in  min_samples_split_rdfc and min_samples_split_rdfc.replace(",","").replace(".","").replace("-","").isdigit()==True:

            try:
            	min_samples_split_rdfc_range=list(map(float,min_samples_split_rdfc.split(',')))
            	grid_params_rdfc[min_samples_split_rdfcgrlst]=min_samples_split_rdfc_range
            except:
            	print("unexpected input")

    	elif "." in min_samples_split_rdfc and  min_samples_split_rdfc.replace(".", "").replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].min_samples_split=float((min_samples_split_rdfc))
    	    except:
    	    	print("unexpected input")
    	    try:
            	del grid_params_rdfc['clfrdfc__min_samples_split']
    	    except:
            	pass

    	elif min_samples_split_rdfc and  min_samples_split_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].min_samples_split=int((min_samples_split_rdfc))

    	    except:
    	    	print("unexpected input")
    	    try:
            	del grid_params_rdfc['clfrdfc__min_samples_split']
    	    except:
            	pass
    	else:
          	print("min_samples_split")

    	global min_samples_leaf_rdfc_range
    	if ',' in  min_samples_leaf_rdfc and min_samples_leaf_rdfc.replace(",","").replace("-","").isdigit()==True:

       	 try:
       	 	min_samples_leaf_rdfc_range=list(map(int,min_samples_leaf_rdfc.split(',')))
       	 	grid_params_rdfc[min_samples_leaf_rdfcgrlst]=min_samples_leaf_rdfc_range
       	 except:
            	print("unexpected input")

    	elif ',' in  min_samples_leaf_rdfc and min_samples_leaf_rdfc.replace(",","").replace("-","").replace(".","").isdigit()==True:

       	 try:
       	 	min_samples_leaf_rdfc_range=list(map(float,min_samples_leaf_rdfc.split(',')))
       	 	grid_params_rdfc[min_samples_leaf_rdfcgrlst]=min_samples_leaf_rdfc_range
       	 except:
            	print("unexpected input")

    	elif "." in min_samples_leaf_rdfc and  min_samples_leaf_rdfc.replace(".", "").replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].min_samples_leaf=float((min_samples_leaf_rdfc))
    	    except:
    	    	print("unexpected input")

    	    try:
            	del grid_params_rdfc['clfrdfc__min_samples_leaf']
    	    except:
            	pass

    	elif min_samples_leaf_rdfc and  min_samples_leaf_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].min_samples_leaf=int((min_samples_leaf_rdfc))
    	    except:
    	    	print("unexpected input")

    	    try:
            	del grid_params_rdfc['clfrdfc__min_samples_leaf']
    	    except:
            	pass
    	else:
          	print("min_samples_leaf")

    	if ',' in  min_weight_fraction_leaf_rdfc and min_weight_fraction_leaf_rdfc.replace(",","").replace(".","").replace("-","").isdigit()==True:

            global min_weight_fraction_leaf_rdfc_range
            try:
    	       	min_weight_fraction_leaf_rdfc_range=list(map(float,min_weight_fraction_leaf_rdfc.split(',')))
    	       	grid_params_rdfc[min_weight_fraction_leaf_rdfcgrlst]=min_weight_fraction_leaf_rdfc_range
            except:
            	print("unexpected input")

    	elif "." in min_weight_fraction_leaf_rdfc and  min_weight_fraction_leaf_rdfc.replace(".", "").replace("-","").isdigit()==True or min_weight_fraction_leaf_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].min_weight_fraction_leaf=float((min_weight_fraction_leaf_rdfc))
    	    except:
    	        print("unexpected  input")
    	    try:
            	del grid_params_rdfc['clfrdfc__min_weight_fraction_leaf']
    	    except:
            	pass
    	else:
          	print("min_weight_fraction_leaf")

    	if ',' in max_leaf_nodes_rdfc and max_leaf_nodes_rdfc.replace(",", "").replace("-","").isdigit()==True:
    	    global max_leaf_nodes_rdfc_range
    	    try:
    	        max_leaf_nodes_rdfc_range=list(map(int, max_leaf_nodes_rdfc.split(',')))
    	        grid_params_rdfc[max_leaf_nodes_rdfcgrlst]=max_leaf_nodes_rdfc_range
    	    except:
    	    	print("unexpected input")
    	elif max_leaf_nodes_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].max_leaf_nodes=(int(max_leaf_nodes_rdfc))
    	    except:
    	        print("unexpected  input")
    	    try:
            	del grid_params_rdfc['clfrdfc__max_leaf_nodes']
    	    except:
            	pass
    	else:
        	print("max_leaf_nodes")

    	if ',' in  min_impurity_decrease_rdfc and min_impurity_decrease_rdfc.replace(",","").replace(".","").replace("-","").isdigit()==True:

            global min_impurity_decrease_rdfc_range
            try:
            	min_impurity_decrease_rdfc_range=list(map(float,min_impurity_decrease_rdfc.split(',')))
            	grid_params_rdfc[min_impurity_decrease_rdfcgrlst]=min_impurity_decrease_rdfc_range
            except:
            	print("unexpected input")

    	elif "." in min_impurity_decrease_rdfc and  min_impurity_decrease_rdfc.replace(".", "").replace("-","").isdigit()==True or min_impurity_decrease_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].min_impurity_decrease=float((min_impurity_decrease_rdfc))
    	    except:
    	        print("unexpected  input")
    	    try:
            	del grid_params_rdfc['clfrdfc__min_impurity_decrease']
    	    except:
            	pass
    	else:
          	print("min_impurity_decrease")

    	if ',' in n_jobs_rdfc and n_jobs_rdfc.replace(",", "").replace("-","").isdigit()==True:
    	    global n_jobs_rdfc_range
    	    try:
    	    	n_jobs_rdfc_range=list(map(int, n_jobs_rdfc.split(',')))
    	    	grid_params_rdfc[n_jobs_rdfcgrlst]=n_jobs_rdfc_range
    	    except:
    	    	print("unexpected input")

    	elif n_jobs_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].n_jobs=(int(n_jobs_rdfc))
    	    except:
    	        print("unexpected  input")
    	    try:
            	del grid_params_rdfc['clfrdfc__n_jobs']
    	    except:
            	pass
    	elif n_jobs_rdfc=="None":
            pipe_rdfc['clfrdfc'].n_jobs=None
            try:
            	del grid_params_rdfc['clfrdfc__n_jobs']
            except:
            	pass
    	else:
        	print("n_jobs")

    	if ',' in random_state_rdfc and random_state_rdfc.replace(",", "").replace("-","").isdigit()==True:
    	    global random_state_rdfc_range
    	    try:
    	    	random_state_rdfc_range=list(map(int, random_state_rdfc.split(',')))
    	    	grid_params_rdfc[random_state_rdfcgrlst]=random_state_rdfc_range
    	    except:
    	    	print("unexpected input")
    	elif random_state_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].random_state=(int(random_state_rdfc))
    	    except:
    	        print("unexpected  input")
    	    try:
            	del grid_params_rdfc['clfrdfc__random_state']
    	    except:
            	pass
    	elif random_state_rdfc=="None":
            pipe_rdfc['clfrdfc'].random_state=None
            try:
            	del grid_params_rdfc['clfrdfc__random_state']
            except:
            	pass
    	else:
        	print("random_state")

    	if ',' in verbose_rdfc and verbose_rdfc.replace(",", "").replace("-","").isdigit()==True:
    	    global verbose_rdfc_range
    	    try:
    	    	verbose_rdfc_range=list(map(int, verbose_rdfc.split(',')))
    	    	grid_params_rdfc[verbose_rdfcgrlst]=verbose_rdfc_range
    	    except:
    	    	print("unexpected input")
    	elif verbose_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].verbose=(int(verbose_rdfc))
    	    except:
    	        print("unexpected  input")
    	    try:
            	del grid_params_rdfc['clfrdfc__verbose']
    	    except:
            	pass
    	elif verbose_rdfc=="None":
            pipe_rdfc['clfrdfc'].verbose=None
            try:
            	del grid_params_rdfc['clfrdfc__verbose']
            except:
            	pass
    	else:
        	print("verbose")

    	if ',' in  ccp_alpha_rdfc and ccp_alpha_rdfc.replace(",","").replace(".","").replace("-","").isdigit()==True:

            global ccp_alpha_rdfc_range
            try:
            	ccp_alpha_rdfc_range=list(map(float,ccp_alpha_rdfc.split(',')))
            	grid_params_rdfc[ccp_alpha_rdfcgrlst]=ccp_alpha_rdfc_range
            except:
            	print("unexpected input")

    	elif "." in ccp_alpha_rdfc and  ccp_alpha_rdfc.replace(".", "").replace("-","").isdigit()==True or ccp_alpha_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].ccp_alpha=float((ccp_alpha_rdfc))
    	    except:
    	        print("unexpected  input")
    	    try:
            	del grid_params_rdfc['clfrdfc__ccp_alpha']
    	    except:
            	pass
    	else:
          	print("ccp_alpha")

    	if ',' in  max_samples_rdfc and max_samples_rdfc.replace(",","").replace(".","").replace("-","").isdigit()==True:

            global max_samples_rdfc_range
            try:
            	max_samples_rdfc_range=list(map(float,max_samples_rdfc.split(',')))
            	grid_params_rdfc[max_samples_rdfcgrlst]=max_samples_rdfc_range
            except:
            	print("unexpected input")

    	elif "." in max_samples_rdfc and  max_samples_rdfc.replace(".", "").replace("-","").isdigit()==True or max_samples_rdfc.replace("-","").isdigit()==True:
    	    try:
                pipe_rdfc['clfrdfc'].max_samples=float((max_samples_rdfc))
    	    except:
    	        print("unexpected  input")
    	    try:
            	del grid_params_rdfc['clfrdfc__max_samples']
    	    except:
            	pass
    	elif max_samples_rdfc=="None":
            pipe_rdfc['clfrdfc'].max_samples=None

            try:
            	del grid_params_rdfc['clfrdfc__max_samples']
            except:
            	pass
    	else:
          	print("max_samples")



    	print(grid_params_rdfc)
    	self.model_rdfc()

    def hinge_sgdc(self):

        if self.model_sgd.ids.hinge_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.hinge_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l
        	loss_sgdgrlst_l.append('hinge')
        else:
            self.model_sgd.ids.hinge_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_sgdgrlst_l.remove('hinge')
            	del grid_params_sgdc['clfsgd__loss']

            except:
            	pass


    def log_sgdc(self):

        if self.model_sgd.ids.log_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.log_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l
        	loss_sgdgrlst_l.append('log')
        else:
            self.model_sgd.ids.log_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_sgdgrlst_l.remove('log')
            	del grid_params_sgdc['clfsgd__loss']

            except:
            	pass

    def modified_huber_sgdc(self):

        if self.model_sgd.ids.modified_huber_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.modified_huber_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l
        	loss_sgdgrlst_l.append('modified_huber')
        else:
            self.model_sgd.ids.modified_huber_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_sgdgrlst_l.remove('modified_huber')
            	del grid_params_sgdc['clfsgd__loss']

            except:
            	pass

    def squared_hinge_sgdc(self):

        if self.model_sgd.ids.squared_hinge_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.squared_hinge_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l
        	loss_sgdgrlst_l.append('squared_hinge')
        else:
            self.model_sgd.ids.squared_hinge_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_sgdgrlst_l.remove('squared_hinge')
            	del grid_params_sgdc['clfsgd__loss']

            except:
            	pass

    def perceptron_sgdc(self):

        if self.model_sgd.ids.perceptron_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.perceptron_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l
        	loss_sgdgrlst_l.append('perceptron')
        else:
            self.model_sgd.ids.perceptron_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_sgdgrlst_l.remove('perceptron')
            	del grid_params_sgdc['clfsgd__loss']

            except:
            	pass

    def squared_error_sgdc(self):

        if self.model_sgd.ids.squared_error_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.squared_error_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l
        	loss_sgdgrlst_l.append('squared_error')
        else:
            self.model_sgd.ids.squared_error_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_sgdgrlst_l.remove('squared_error')
            	del grid_params_sgdc['clfsgd__loss']

            except:
            	pass

    def huber_sgdc(self):

        if self.model_sgd.ids.huber_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.huber_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l
        	loss_sgdgrlst_l.append('huber')
        else:
            self.model_sgd.ids.huber_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_sgdgrlst_l.remove('huber')
            	del grid_params_sgdc['clfsgd__loss']

            except:
            	pass

    def epsilon_insensitive_sgdc(self):

        if self.model_sgd.ids.epsilon_insensitive_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.epsilon_insensitive_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l
        	loss_sgdgrlst_l.append('epsilon_insensitive')
        else:
            self.model_sgd.ids.epsilon_insensitive_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_sgdgrlst_l.remove('epsilon_insensitive')
            	del grid_params_sgdc['clfsgd__loss']

            except:
            	pass

    def squared_epsilon_insensitive_sgdc(self):

        if self.model_sgd.ids.squared_epsilon_insensitive_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.squared_epsilon_insensitive_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l
        	loss_sgdgrlst_l.append('squared_epsilon_insensitive')
        else:
            self.model_sgd.ids.squared_epsilon_insensitive_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	loss_sgdgrlst_l.remove('squared_epsilon_insensitive')
            	del grid_params_sgdc['clfsgd__loss']

            except:
            	pass

    def constant_sgdc(self):

        if self.model_sgd.ids.constant_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.constant_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__learning_rate' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[learning_rate_sgdgrlst]=learning_rate_sgdgrlst_l
        	learning_rate_sgdgrlst_l.append('constant')
        else:
            self.model_sgd.ids.constant_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	learning_rate_sgdgrlst_l.remove('constant')
            	del grid_params_sgdc['clfsgd__learning_rate']

            except:
            	pass

    def optimal_sgdc(self):

        if self.model_sgd.ids.optimal_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.optimal_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__learning_rate' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[learning_rate_sgdgrlst]=learning_rate_sgdgrlst_l
        	learning_rate_sgdgrlst_l.append('optimal')
        else:
            self.model_sgd.ids.optimal_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	learning_rate_sgdgrlst_l.remove('optimal')
            	del grid_params_sgdc['clfsgd__learning_rate']

            except:
            	pass

    def invscaling_sgdc(self):

        if self.model_sgd.ids.invscaling_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.invscaling_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__learning_rate' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[learning_rate_sgdgrlst]=learning_rate_sgdgrlst_l
        	learning_rate_sgdgrlst_l.append('invscaling')
        else:
            self.model_sgd.ids.invscaling_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	learning_rate_sgdgrlst_l.remove('invscaling')
            	del grid_params_sgdc['clfsgd__learning_rate']

            except:
            	pass

    def balanced_sgdc(self):

        if self.model_sgd.ids.balanced_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.balanced_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__class_weight' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[class_weight_sgdgrlst]=class_weight_sgdgrlst_l
        	class_weight_sgdgrlst_l.append('balanced')
        else:
            self.model_sgd.ids.balanced_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	class_weight_sgdgrlst_l.remove('balanced')
            	del grid_params_sgdc['clfsgd__class_weight']

            except:
            	pass

    def None_sgdc(self):

        if self.model_sgd.ids.None_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.None_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__class_weight' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[class_weight_sgdgrlst]=class_weight_sgdgrlst_l
        	class_weight_sgdgrlst_l.append(None)
        else:
            self.model_sgd.ids.None_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	class_weight_sgdgrlst_l.remove(None)
            	del grid_params_sgdc['clfsgd__class_weight']

            except:
            	pass

    def l2_sgdc(self):

        if self.model_sgd.ids.l2_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.l2_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__penalty' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[penalty_sgdgrlst]=penalty_sgdgrlst_l
        	penalty_sgdgrlst_l.append('l2')
        else:
            self.model_sgd.ids.l2_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	penalty_sgdgrlst_l.remove('l2')
            	del grid_params_sgdc['clfsgd__penalty']

            except:
            	pass

    def l1_sgdc(self):

        if self.model_sgd.ids.l1_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.l1_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__penalty' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[penalty_sgdgrlst]=penalty_sgdgrlst_l
        	penalty_sgdgrlst_l.append('l1')
        else:
            self.model_sgd.ids.l1_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	penalty_sgdgrlst_l.remove('l1')
            	del grid_params_sgdc['clfsgd__penalty']

            except:
            	pass


    def elasticnet_sgdc(self):

        if self.model_sgd.ids.elasticnet_sgdc_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_sgd.ids.elasticnet_sgdc_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfsgd__penalty' in grid_params_sgdc:
        	    pass
        	else:
        	   grid_params_sgdc[penalty_sgdgrlst]=penalty_sgdgrlst_l
        	penalty_sgdgrlst_l.append('elasticnet')
        else:
            self.model_sgd.ids.elasticnet_sgdc_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	penalty_sgdgrlst_l.remove('elasticnet')
            	del grid_params_sgdc['clfsgd__penalty']

            except:
            	pass

    def fit_intercept_sgdc(self,checkbox,value):

    	if value:
    		pipe_sgdc['clfsgd'].fit_intercept=True
    	else:
    		pipe_sgdc['clfsgd'].fit_intercept=False

    def shuffle_sgdc(self,checkbox,value):

    	if value:
    		pipe_sgdc['clfsgd'].shuffle=True
    	else:
    		pipe_sgdc['clfsgd'].shuffle=False

    def early_stopping_sgdc(self,checkbox,value):

    	if value:
    		pipe_sgdc['clfsgd'].early_stopping=True
    	else:
    		pipe_sgdc['clfsgd'].early_stopping=False

    def warm_start_sgdc(self,checkbox,value):

    	if value:
    		pipe_sgdc['clfsgd'].warm_start=True
    	else:
    		pipe_sgdc['clfsgd'].warm_start=False



    def add_grdscv_sgdc(self):

        if self.prameter_optimizer_wid_sgdc.ids.gridsearchcv_chk_sgdc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_sgdc.ids.gridsearchcv_chk_sgdc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_sgdc.ids.gridsearchcv_chk_sgdc.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_sgdc=Factory.gridsearchcv_wid_sgdc()
        	self.model_sgd.ids.hypopt_grid_sgdc.add_widget(self.gridsearchcv_wid_sgdc)
        	self.gridsearch_asgn_sgdc=Factory.gridsearch_asgn_sgdc()
        	self.model_sgd.ids.hypopt_grid_sgdc.add_widget(self.gridsearch_asgn_sgdc)
        	self.gridsearchcv_wid_sgdc.ids.return_train_score_gsgdc_chk.active=True
        	self.gridsearchcv_wid_sgdc.ids.return_train_score_gsgdc_chk.active=False


        else:
        	self.prameter_optimizer_wid_sgdc.ids.gridsearchcv_chk_sgdc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_sgdc.ids.gridsearchcv_chk_sgdc.text_color=get_color_from_hex('ffffff')

        	self.model_sgd.ids.hypopt_grid_sgdc.remove_widget(self.gridsearchcv_wid_sgdc)
        	self.model_sgd.ids.hypopt_grid_sgdc.remove_widget(self.gridsearch_asgn_sgdc)



    def grdsrchacte_sgdc(self):

    	try:
    		current_paramopt_sgdc.clear()
    		current_paramopt_sgdc.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.model_sgd.ids.out_grid_sgdc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_sgdc=self.gridsearchcv_wid_sgdc.ids.scoring_gscv_sgdc.text.replace(" ", "")

    	n_jobs_gscv_sgdc=self.gridsearchcv_wid_sgdc.ids.n_jobs_gscv_sgdc.text.replace(" ", "")

    	refit_gscv_sgdc=self.gridsearchcv_wid_sgdc.ids.refit_gscv_sgdc.text.replace(" ", "")

    	cv_gscv_sgdc=self.gridsearchcv_wid_sgdc.ids.cv_gscv_sgdc.text.replace(" ", "")

    	verbose_gscv_sgdc=self.gridsearchcv_wid_sgdc.ids.verbose_gscv_sgdc.text.replace(" ", "")

    	if scoring_gscv_sgdc=="None":
    		scoring_gscv_sgdc=None
    	elif "," in scoring_gscv_sgdc:
    		scoring_gscv_sgdc=list(map(str,scoring_gscv_sgdc.split(',')))
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_sgdc=="None":
    		n_jobs_gscv_sgdc=None
    	elif n_jobs_gscv_sgdc.isdigit()==True:
    		n_jobs_gscv_sgdc=int(n_jobs_gscv_sgdc)
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_sgdc=="True":
    		refit_gscv_sgdc=True
    	elif refit_gscv_sgdc=="False":
    		refit_gscv_sgdc=False
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_sgdc=="None":
    		cv_gscv_sgdc=None
    	elif cv_gscv_sgdc.isdigit()==True:
    		cv_gscv_sgdc=int(cv_gscv_sgdc)
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_sgdc.isdigit()==True:
    		verbose_gscv_sgdc=int(verbose_gscv_sgdc)
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_sgdc = GridSearchCV(estimator=pipe_sgdc,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_sgdc),
      	  n_jobs=(n_jobs_gscv_sgdc),
       	 refit=(refit_gscv_sgdc),
       	 cv=(cv_gscv_sgdc),
   	     verbose=(verbose_gscv_sgdc),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_sgdc
      	  )
    	except Exception as e:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gsgdc

    	    if len(gbl_pl)==0:
    	        try:
    	        	gsgdc=gs_sgdc.fit(X_train, y_train)
    	        	y_pred = gsgdc.predict(X_test)
    	        	cr_gsgdcs=(classification_report(y_test, y_pred))

            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gsgdcs)
            	except Exception as e:
            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gsgdc=gs_sgdc.fit(X_train_1, y_train)
    	        	y_pred = gsgdc.predict(X_test_1)
    	        	cr_gsgdcr=(classification_report(y_test, y_pred))

            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gsgdcr)
            	except Exception as e:
            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass
    		#self.root.ids.model_output.text=str(e)
    		#print(e)


    def retutrasco_gscv_sgdc(self,checkbox,value):
    	global retutrval_gscv_sgdc
    	if value:
    		retutrval_gscv_sgdc=True
    	else:
    		retutrval_gscv_sgdc=False



    def add_rndmcv_sgdc(self):

        if self.prameter_optimizer_wid_sgdc.ids.randomizedsearchcv_chk_sgdc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_sgdc.ids.randomizedsearchcv_chk_sgdc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_sgdc.ids.randomizedsearchcv_chk_sgdc.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_sgdc=Factory.randomizedsearchcv_wid_sgdc()
        	self.model_sgd.ids.hypopt_grid_sgdc.add_widget(self.randomizedsearchcv_wid_sgdc)
        	self.randomizedsearch_asgn_sgdc=Factory.randomizedsearch_asgn_sgdc()
        	self.model_sgd.ids.hypopt_grid_sgdc.add_widget(self.randomizedsearch_asgn_sgdc)
        	self.randomizedsearchcv_wid_sgdc.ids.return_train_score_rscv_sgdc_chk.active=True
        	self.randomizedsearchcv_wid_sgdc.ids.return_train_score_rscv_sgdc_chk.active=False

        else:
        	self.prameter_optimizer_wid_sgdc.ids.randomizedsearchcv_chk_sgdc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_sgdc.ids.randomizedsearchcv_chk_sgdc.text_color=get_color_from_hex('ffffff')

        	self.model_sgd.ids.hypopt_grid_sgdc.remove_widget(self.randomizedsearchcv_wid_sgdc)
        	self.model_sgd.ids.hypopt_grid_sgdc.remove_widget(self.randomizedsearch_asgn_sgdc)



    def rndmstvhact_sgdc(self):

    	try:
    		current_paramopt_sgdc.clear()
    		current_paramopt_sgdc.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.model_sgd.ids.out_grid_sgdc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_sgdc=self.randomizedsearchcv_wid_sgdc.ids.n_iter_rscv_sgdc.text.replace(" ", "")
    	scoring_rscv_sgdc=self.randomizedsearchcv_wid_sgdc.ids.scoring_rscv_sgdc.text.replace(" ", "")
    	n_jobs_rscv_sgdc=self.randomizedsearchcv_wid_sgdc.ids.n_jobs_rscv_sgdc.text.replace(" ", "")
    	refit_rscv_sgdc=self.randomizedsearchcv_wid_sgdc.ids.refit_rscv_sgdc.text.replace(" ", "")
    	cv_rscv_sgdc=self.randomizedsearchcv_wid_sgdc.ids.cv_rscv_sgdc.text.replace(" ", "")
    	verbose_rscv_sgdc=self.randomizedsearchcv_wid_sgdc.ids.verbose_rscv_sgdc.text.replace(" ", "")
    	random_state_rscv_sgdc=self.randomizedsearchcv_wid_sgdc.ids.random_state_rscv_sgdc.text.replace(" ", "")

    	if n_iter_rscv_sgdc=="None":
    		n_iter_rscv_sgdc=None
    	elif n_iter_rscv_sgdc.isdigit()==True:
    		n_iter_rscv_sgdc=int(n_iter_rscv_sgdc)
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_sgdc=="None":
    		scoring_rscv_sgdc=None
    	elif "," in scoring_rscv_sgdc:
    		scoring_rscv_sgdc=list(map(str,scoring_rscv_sgdc.split(',')))
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_sgdc=="None":
    		n_jobs_rscv_sgdc=None
    	elif n_jobs_rscv_sgdc.isdigit()==True:
    		n_jobs_rscv_sgdc=int(n_jobs_rscv_sgdc)
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_sgdc=="True":
    		refit_rscv_sgdc=True
    	elif refit_rscv_sgdc=="False":
    		refit_rscv_sgdc=False
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_sgdc=="None":
    		cv_rscv_sgdc=None
    	elif cv_rscv_sgdc.isdigit()==True:
    		cv_rscv_sgdc=int(cv_rscv_sgdc)
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_sgdc.isdigit()==True:
    		verbose_rscv_sgdc=int(verbose_rscv_sgdc)
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_sgdc=="None":
    		random_state_rscv_sgdc=None
    	elif random_state_rscv_sgdc.isdigit()==True:
    		random_state_rscv_sgdc=int(random_state_rscv_sgdc)
    	else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_sgdc =RandomizedSearchCV(
        	estimator=pipe_sgdc,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_sgdc),
       	 scoring=(scoring_rscv_sgdc),
       	 n_jobs=(n_jobs_rscv_sgdc),
       	 refit=(refit_rscv_sgdc),
       	 cv=(cv_rscv_sgdc),
        	verbose=(verbose_rscv_sgdc),
        	random_state=(random_state_rscv_sgdc),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_sgdc)

    	except Exception as e:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gsgdc

    	    if len(gbl_pl)==0:
    	        try:
    	        	gsgdc=gs_sgdc.fit(X_train, y_train)
    	        	y_pred = gsgdc.predict(X_test)
    	        	cr_gsgdcs=(classification_report(y_test, y_pred))
            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gsgdcs)

            	except Exception as e:
            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gsgdc=gs_sgdc.fit(X_train_1, y_train)
    	        	y_pred = gsgdc.predict(X_test_1)
    	        	cr_gsgdcr=(classification_report(y_test, y_pred))
            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gsgdcr)

            	except Exception as e:
            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
        	#self.root.ids.model_output.text=str(e)
        	#print(e)



    def returtraiscor_rscv_sgdc(self,checkbox,value):
    	global rtrntrscr_rscv_sgdc
    	if value:
    		rtrntrscr_rscv_sgdc=True
    	else:
    		rtrntrscr_rscv_sgdc=False



    def cv_results_gscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "gridsearchcv" in current_paramopt_sgdc:
        	try:
        		cv_results_gscv_sgdc_out=gsgdc.cv_results_
        		print(cv_results_gscv_sgdc_out)
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "gridsearchcv" in current_paramopt_sgdc:
        	try:
        		best_score_gscv_sgdc_out=gsgdc.best_score_
        		print(best_score_gscv_sgdc_out)
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "gridsearchcv" in current_paramopt_sgdc:
        	try:
        		best_params_gscv_sgdc_out=gsgdc.best_params_
        		print(best_params_gscv_sgdc_out)
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "gridsearchcv" in current_paramopt_sgdc:
        	try:
        		best_index_gscv_sgdc_out=gsgdc.best_index_
        		print(best_index_gscv_sgdc_out)
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "gridsearchcv" in current_paramopt_sgdc:
        	try:
        		scorer_gscv_sgdc_out=gsgdc.scorer_
        		print(scorer_gscv_sgdc_out)
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "gridsearchcv" in current_paramopt_sgdc:
        	try:
        		n_splits_gscv_sgdc_out=gsgdc.n_splits_
        		print(n_splits_gscv_sgdc_out)
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "gridsearchcv" in current_paramopt_sgdc:
        	try:
        		refit_time_gscv_sgdc_out=gsgdc.refit_time_
        		print(refit_time_gscv_sgdc_out)
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "gridsearchcv" in current_paramopt_sgdc:
        	try:
        		multimetric_gscv_sgdc_out=gsgdc.multimetric_
        		print(multimetric_gscv_sgdc_out)
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "gridsearchcv" in current_paramopt_sgdc:
        	try:
        		feature_names_in_gscv_sgdc_out=gsgdc.feature_names_in_
        		print(feature_names_in_gscv_sgdc_out)
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "randomizedsearchcv" in current_paramopt_sgdc:
        	try:
        		cv_results_rscv_sgdc_out=gsgdc.cv_results_
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "randomizedsearchcv" in current_paramopt_sgdc:
        	try:
        		best_score_rscv_sgdc_out=gsgdc.best_score_
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "randomizedsearchcv" in current_paramopt_sgdc:
        	try:
        		best_params_rscv_sgdc_out=gsgdc.best_params_
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "randomizedsearchcv" in current_paramopt_sgdc:
        	try:
        		best_index_rscv_sgdc_out=gsgdc.best_index_
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "randomizedsearchcv" in current_paramopt_sgdc:
        	try:
        		scorer_rscv_sgdc_out=gsgdc.scorer_
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "randomizedsearchcv" in current_paramopt_sgdc:
        	try:
        		n_splits_rscv_sgdc_out=gsgdc.n_splits_
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "randomizedsearchcv" in current_paramopt_sgdc:
        	try:
        		refit_time_rscv_sgdc_out=gsgdc.refit_time_
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "randomizedsearchcv" in current_paramopt_sgdc:
        	try:
        		multimetric_rscv_sgdc_out=gsgdc.multimetric_
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_sgdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsgdc" in globals() and "randomizedsearchcv" in current_paramopt_sgdc:
        	try:
        		feature_names_in_rscv_sgdc_out=gsgdc.feature_names_in_
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_sgdc_out)
        	except AttributeError as a:
        		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def model_sgdcfr(self):

###
        try:
        	self.model_sgd.ids.out_grid_sgdc.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return
###


        if len(penalty_sgdgrlst_l)==1:
        	pipe_sgdc['clfsgd'].penalty=(penalty_sgdgrlst_l[0])
        	try:
        		del grid_params_sgdc['clfsgd__penalty']
        	except:
        		pass

        elif len(penalty_sgdgrlst_l)==0:

            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: penalty"
            return

        else:
        	if 'clfsgd__penalty' in grid_params_sgdc:
        	    pass
        	else:        	    grid_params_sgdc[penalty_sgdgrlst]=penalty_sgdgrlst_l


        if len(loss_sgdgrlst_l)==1:
        	pipe_sgdc['clfsgd'].loss=(loss_sgdgrlst_l[0])
        	try:
        		del grid_params_sgdc['clfsgd__loss']
        	except:
        		pass

        elif len(loss_sgdgrlst_l)==0:

            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: loss"
            return

        else:
        	if 'clfsgd__loss' in grid_params_sgdc:
        	    pass
        	else:        	    grid_params_sgdc[loss_sgdgrlst]=loss_sgdgrlst_l


        if len(class_weight_sgdgrlst_l)==1:
        	pipe_sgdc['clfsgd'].class_weight=(class_weight_sgdgrlst_l[0])
        	try:
        		del grid_params_sgdc['clfsgd__class_weight']
        	except:
        		pass


        elif len(class_weight_sgdgrlst_l)==0:

            self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: class_weight"
            return

        else:
        	if 'clfsgd__class_weight' in grid_params_sgdc:
        	    pass
        	else:        	    grid_params_sgdc[class_weight_sgdgrlst]=class_weight_sgdgrlst_l



        if  len(grid_params_sgdc)==0:

            global sgdcdat
            try:
            	self.model_sgd.ids.hypopt_grid_sgdc.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		sgdcdat=pipe_sgdc.fit(X_train, y_train)
            		y_pred = sgdcdat.predict(X_test)
            		crsgdc=(classification_report(y_test, y_pred))
            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crsgdc)

            	except Exception as e:
            		print(e)

            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)
            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		sgdcdat=pipe_sgdc.fit(X_train_1, y_train)
            		y_pred = sgdcdat.predict(X_test_1)
            		crsgdc=(classification_report(y_test, y_pred))
            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crsgdc)

            	except Exception as e:
            		print(e)

            		self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.model_sgd.ids.hypopt_grid_sgdc.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_sgdc=Factory.prameter_optimizer_wid_sgdc()
            self.model_sgd.ids.hypopt_grid_sgdc.add_widget(self.prameter_optimizer_wid_sgdc)


    def sgd_btn(self):
        global alpha_sgdc
        alpha_sgdc=self.model_sgd.ids.alpha_sgdc.text.replace(" ", "")
        global l1_ratio_sgdc
        l1_ratio_sgdc=self.model_sgd.ids.l1_ratio_sgdc.text.replace(" ", "")
        global max_iter_sgdc
        max_iter_sgdc=self.model_sgd.ids.max_iter_sgdc.text.replace(" ", "")
        global tol_sgdc
        tol_sgdc=self.model_sgd.ids.tol_sgdc.text.replace(" ", "")
        global verbose_sgdc
        verbose_sgdc=self.model_sgd.ids.verbose_sgdc.text.replace(" ", "")
        global epsilon_sgdc
        epsilon_sgdc=self.model_sgd.ids.epsilon_sgdc.text.replace(" ", "")
        global n_jobs_sgdc
        n_jobs_sgdc=self.model_sgd.ids.n_jobs_sgdc.text.replace(" ", "")
        global random_state_sgdc
        random_state_sgdc=self.model_sgd.ids.random_state_sgdc.text.replace(" ", "")
        global validation_fraction_sgdc
        validation_fraction_sgdc=self.model_sgd.ids.validation_fraction_sgdc.text.replace(" ", "")
        global n_iter_no_change_sgdc
        n_iter_no_change_sgdc=self.model_sgd.ids.n_iter_no_change_sgdc.text.replace(" ", "")
        global average_sgdc
        average_sgdc=self.model_sgd.ids.average_sgdc.text.replace(" ", "")

        # double
        #global eta0_sgdc
        #eta0_sgdc=self.model_sgd.ids.eta0_sgdc.text.replace(" ", "")
        #global power_t_sgdc
        #power_t_sgdc=self.model_sgd.ids.power_t_sgdc.text.replace(" ", "")

        if ',' in  alpha_sgdc and alpha_sgdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global alpha_sgdc_range
                alpha_sgdc_range=list(map(float,alpha_sgdc.split(',')))
                grid_params_sgdc[alpha_sgdgrlst]=alpha_sgdc_range
            except:
            	print("unexpected input")


        elif "." in alpha_sgdc and  alpha_sgdc.replace(".", "").replace("-","").isdigit()==True or alpha_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].alpha=float((alpha_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__alpha']
            except:
            	pass
        else:
          	print("alpha")



        if ',' in  l1_ratio_sgdc and l1_ratio_sgdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global l1_ratio_sgdc_range
                l1_ratio_sgdc_range=list(map(float,l1_ratio_sgdc.split(',')))
                grid_params_sgdc[l1_ratio_sgdgrlst]=l1_ratio_sgdc_range
            except:
            	print("unexpected input")

        elif "." in l1_ratio_sgdc and  l1_ratio_sgdc.replace(".", "").replace("-","").isdigit()==True or l1_ratio_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].l1_ratio=float((l1_ratio_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__l1_ratio']
            except:
            	pass
        else:
          	print("l1_ratio")

        if ',' in  max_iter_sgdc and max_iter_sgdc.replace(",","").replace("-","").isdigit()==True:
            try:
                global max_iter_sgdc_range
                max_iter_sgdc_range=list(map(int,max_iter_sgdc.split(',')))
                grid_params_sgdc[max_iter_sgdgrlst]=max_iter_sgdc_range
            except:
            	print("unexpected input")

        elif max_iter_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].max_iter=int((max_iter_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__max_iter']
            except:
            	pass
        else:
          	print("max_iter")


        if ',' in  tol_sgdc and tol_sgdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global tol_sgdc_range
                tol_sgdc_range=list(map(float,tol_sgdc.split(',')))
                grid_params_sgdc[tol_sgdgrlst]=tol_sgdc_range
            except:
            	print("unexpected input")

        elif "." in tol_sgdc and  tol_sgdc.replace(".", "").replace("-","").isdigit()==True or tol_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].tol=float((tol_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__tol']
            except:
            	pass
        else:
          	print("tol")

        if ',' in  verbose_sgdc and verbose_sgdc.replace(",","").replace("-","").isdigit()==True:
            try:
                global verbose_sgdc_range
                verbose_sgdc_range=list(map(int,verbose_sgdc.split(',')))
                grid_params_sgdc[verbose_sgdgrlst]=verbose_sgdc_range
            except:
            	print("unexpected input")

        elif verbose_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].verbose=int((verbose_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__verbose']
            except:
            	pass
        else:
          	print("verbose")

        if ',' in  epsilon_sgdc and epsilon_sgdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global epsilon_sgdc_range
                epsilon_sgdc_range=list(map(float,epsilon_sgdc.split(',')))
                grid_params_sgdc[epsilon_sgdgrlst]=epsilon_sgdc_range
            except:
            	print("unexpected input")

        elif "." in epsilon_sgdc and  epsilon_sgdc.replace(".", "").replace("-","").isdigit()==True or epsilon_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].epsilon=float((epsilon_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__epsilon']
            except:
            	pass
        else:
          	print("epsilon")

        if ',' in  n_jobs_sgdc and n_jobs_sgdc.replace(",","").replace("-","").isdigit()==True:
            try:

                global n_jobs_sgdc_range
                n_jobs_sgdc_range=list(map(int,n_jobs_sgdc.split(',')))
                grid_params_sgdc[n_jobs_sgdgrlst]=n_jobs_sgdc_range
            except:
            	print("unexpected input")

        elif n_jobs_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].n_jobs=int((n_jobs_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__n_jobs']
            except:
            	pass
        elif n_jobs_sgdc=="None":
            pipe_sgdc['clfsgd'].n_jobs=None

            try:
            	del grid_params_sgdc['clfsgd__n_jobs']
            except:
            	pass
        else:
          	print("n_jobs")

        if ',' in  n_iter_no_change_sgdc and n_iter_no_change_sgdc.replace(",","").replace("-","").isdigit()==True:
            try:
                global n_iter_no_change_sgdc_range
                n_iter_no_change_sgdc_range=list(map(int,n_iter_no_change_sgdc.split(',')))
                grid_params_sgdc[n_iter_no_change_sgdgrlst]=n_iter_no_change_sgdc_range
            except:
            	print("unexpected input")

        elif n_iter_no_change_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].n_iter_no_change=int((n_iter_no_change_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__n_iter_no_change']
            except:
            	pass
        else:
          	print("n_iter_no_change")


        if ',' in  random_state_sgdc and random_state_sgdc.replace(",","").replace("-","").isdigit()==True:
            try:
                global random_state_sgdc_range
                random_state_sgdc_range=list(map(int,random_state_sgdc.split(',')))
                grid_params_sgdc[random_state_sgdgrlst]=random_state_sgdc_range
            except:
            	print("unexpected input")

        elif random_state_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].random_state=int((random_state_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__random_state']
            except:
            	pass
        elif random_state_sgdc=="None":
            pipe_sgdc['clfsgd'].random_state=None

            try:
            	del grid_params_sgdc['clfsgd__random_state']
            except:
            	pass
        else:
          	print("random_state")

        if ',' in  validation_fraction_sgdc and validation_fraction_sgdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global validation_fraction_sgdc_range
                validation_fraction_sgdc_range=list(map(float,validation_fraction_sgdc.split(',')))
                grid_params_sgdc[validation_fraction_sgdgrlst]=validation_fraction_sgdc_range
            except:
            	print("unexpected input")

        elif "." in validation_fraction_sgdc and  validation_fraction_sgdc.replace(".", "").replace("-","").isdigit()==True or validation_fraction_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].validation_fraction=float((validation_fraction_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__validation_fraction']
            except:
            	pass
        else:
          	print("validation_fraction")



        if ',' in  average_sgdc and average_sgdc.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global average_sgdc_range
                average_sgdc_range=list(map(float,average_sgdc.split(',')))
                grid_params_sgdc[average_sgdgrlst]=average_sgdc_range
            except:
            	print("unexpected input")

        elif "." in average_sgdc and  average_sgdc.replace(".", "").replace("-","").isdigit()==True or average_sgdc.replace("-","").isdigit()==True:
            try:
                pipe_sgdc['clfsgd'].average=float((average_sgdc))
            except:
            	print("unexpected input")

            try:
            	del grid_params_sgdc['clfsgd__average']
            except:
            	pass
        elif average_sgdc=="True":
            pipe_sgdc['clfsgd'].average=True

            try:
            	del grid_params_sgdc['clfsgd__average']
            except:
            	pass
        elif average_sgdc=="False":
            pipe_sgdc['clfsgd'].average=False

            try:
            	del grid_params_sgdc['clfsgd__average']
            except:
            	pass

        else:
          	print("average")




        print(grid_params_sgdc)
        self.model_sgdcfr()

    def nrctc_btn(self):

        global metric_nrctc
        metric_nrctc=self.nrctc_model.ids.metric_nrctc.text.replace(" ", "")

        global shrink_threshold_nrctc
        shrink_threshold_nrctc=self.nrctc_model.ids.shrink_threshold_nrctc.text.replace(" ", "")


        if ',' in  metric_nrctc:
            try:
                global metric_nrctc_range
                metric_nrctc_range=list(map(str,metric_nrctc.split(',')))
                grid_params_nrctc[metric_nrctcgrlst]=metric_nrctc_range
            except:
            	print("unexpected input")

        else:
            pipe_nrctc['clfnrctc'].metric=str((metric_nrctc))

            try:
            	del grid_params_nrctc['clfnrctc__metric']
            except:
            	pass


        if ',' in  shrink_threshold_nrctc and shrink_threshold_nrctc.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global shrink_threshold_nrctc_range
                shrink_threshold_nrctc_range=list(map(float,shrink_threshold_nrctc.split(',')))
                grid_params_nrctc[shrink_threshold_nrctcgrlst]=shrink_threshold_nrctc_range
            except:
            	print("unexpected input")

        elif   "." in shrink_threshold_nrctc and  shrink_threshold_nrctc.replace(".", "").replace("-","").isdigit()==True or shrink_threshold_nrctc.replace("-","").isdigit()==True:
            try:
                pipe_nrctc['clfnrctc'].shrink_threshold=float((shrink_threshold_nrctc))
            except:
            	print("unexpected input")


            try:
            	del grid_params_nrctc['clfnrctc__shrink_threshold']
            except:
            	pass
        elif shrink_threshold_nrctc=="None":
            pipe_nrctc['clfnrctc'].shrink_threshold=None

            try:
            	del grid_params_nrctc['clfnrctc__shrink_threshold']
            except:
            	pass
        else:
          	print("shrink_threshold")


        print(grid_params_nrctc)
        self.model_nrctc()

    def fit_prior_conb(self,checkbox,value):

    	if value:
    		pipe_conb['clfconb'].fit_prior=True
    	else:
    		pipe_conb['clfconb'].fit_prior=False

    def norm_conb(self,checkbox,value):

    	if value:
    		pipe_conb['clfconb'].norm=True
    	else:
    		pipe_conb['clfconb'].norm=False


    def conb_btn(self):

        global alpha_conb
        alpha_conb=self.conb_model.ids.alpha_conb.text.replace(" ", "")

        if ',' in  alpha_conb and alpha_conb.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global alpha_conb_range
                alpha_conb_range=list(map(float,alpha_conb.split(',')))
                grid_params_conb[alpha_conbgrlst]=alpha_conb_range
            except:
            	print("unexpected input")

        elif   "." in alpha_conb and  alpha_conb.replace(".", "").replace("-","").isdigit()==True or alpha_conb.replace("-","").isdigit()==True:
            try:
                pipe_conb['clfconb'].alpha=float((alpha_conb))
            except:
            	print("unexpected input")

            try:
            	del grid_params_conb['clfconb__alpha']
            except:
            	pass
        else:
          	print("alpha")
        print(grid_params_conb)
        self.model_conb()

    def ganb_btn(self):

        global var_smoothing_ganb
        var_smoothing_ganb=self.ganb_model.ids.var_smoothing_ganb.text.replace(" ", "")

        if ',' in  var_smoothing_ganb and var_smoothing_ganb.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global var_smoothing_ganb_range
                var_smoothing_ganb_range=list(map(float,var_smoothing_ganb.split(',')))
                grid_params_ganb[var_smoothing_ganbgrlst]=var_smoothing_ganb_range
            except:
            	print("unexpected input")

        elif   "." in var_smoothing_ganb and  var_smoothing_ganb.replace(".", "").replace("-","").isdigit()==True or var_smoothing_ganb.replace("-","").isdigit()==True:
            try:
                pipe_ganb['clfganb'].var_smoothing=float((var_smoothing_ganb))
            except:
            	print("unexpected input")

            try:
            	del grid_params_ganb['clfganb__var_smoothing']
            except:
            	pass
        else:
          	print("var_smoothing")
        print(grid_params_ganb)
        self.model_ganb()

    def auto_rdgcl(self):

        if self.rdgcl_model.ids.auto_rdgcl_chk.md_bg_color==get_color_from_hex('323043'):
        	self.rdgcl_model.ids.auto_rdgcl_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdgcl__solver' in grid_params_rdgcl:
        	    pass
        	else:
        	   grid_params_rdgcl[solver_rdgclgrlst]=solver_rdgclgrlst_l
        	solver_rdgclgrlst_l.append('auto')
        else:
            self.rdgcl_model.ids.auto_rdgcl_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	solver_rdgclgrlst_l.remove('auto')
            	del grid_params_rdgcl['clfrdgcl__solver']

            except:
            	pass

    def svd_rdgcl(self):

        if self.rdgcl_model.ids.svd_rdgcl_chk.md_bg_color==get_color_from_hex('323043'):
        	self.rdgcl_model.ids.svd_rdgcl_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdgcl__solver' in grid_params_rdgcl:
        	    pass
        	else:
        	   grid_params_rdgcl[solver_rdgclgrlst]=solver_rdgclgrlst_l
        	solver_rdgclgrlst_l.append('svd')
        else:
            self.rdgcl_model.ids.svd_rdgcl_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	solver_rdgclgrlst_l.remove('svd')
            	del grid_params_rdgcl['clfrdgcl__solver']

            except:
            	pass

    def cholesky_rdgcl(self):

        if self.rdgcl_model.ids.cholesky_rdgcl_chk.md_bg_color==get_color_from_hex('323043'):
        	self.rdgcl_model.ids.cholesky_rdgcl_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdgcl__solver' in grid_params_rdgcl:
        	    pass
        	else:
        	   grid_params_rdgcl[solver_rdgclgrlst]=solver_rdgclgrlst_l
        	solver_rdgclgrlst_l.append('cholesky')
        else:
            self.rdgcl_model.ids.cholesky_rdgcl_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	solver_rdgclgrlst_l.remove('cholesky')
            	del grid_params_rdgcl['clfrdgcl__solver']

            except:
            	pass

    def lsqr_rdgcl(self):

        if self.rdgcl_model.ids.lsqr_rdgcl_chk.md_bg_color==get_color_from_hex('323043'):
        	self.rdgcl_model.ids.lsqr_rdgcl_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdgcl__solver' in grid_params_rdgcl:
        	    pass
        	else:
        	   grid_params_rdgcl[solver_rdgclgrlst]=solver_rdgclgrlst_l
        	solver_rdgclgrlst_l.append('lsqr')
        else:
            self.rdgcl_model.ids.lsqr_rdgcl_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	solver_rdgclgrlst_l.remove('lsqr')
            	del grid_params_rdgcl['clfrdgcl__solver']

            except:
            	pass

    def sparse_cg_rdgcl(self):

        if self.rdgcl_model.ids.sparse_cg_rdgcl_chk.md_bg_color==get_color_from_hex('323043'):
        	self.rdgcl_model.ids.sparse_cg_rdgcl_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdgcl__solver' in grid_params_rdgcl:
        	    pass
        	else:
        	   grid_params_rdgcl[solver_rdgclgrlst]=solver_rdgclgrlst_l
        	solver_rdgclgrlst_l.append('sparse_cg')
        else:
            self.rdgcl_model.ids.sparse_cg_rdgcl_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	solver_rdgclgrlst_l.remove('sparse_cg')
            	del grid_params_rdgcl['clfrdgcl__solver']

            except:
            	pass

    def sag_rdgcl(self):

        if self.rdgcl_model.ids.sag_rdgcl_chk.md_bg_color==get_color_from_hex('323043'):
        	self.rdgcl_model.ids.sag_rdgcl_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdgcl__solver' in grid_params_rdgcl:
        	    pass
        	else:
        	   grid_params_rdgcl[solver_rdgclgrlst]=solver_rdgclgrlst_l
        	solver_rdgclgrlst_l.append('sag')
        else:
            self.rdgcl_model.ids.sag_rdgcl_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	solver_rdgclgrlst_l.remove('sag')
            	del grid_params_rdgcl['clfrdgcl__solver']

            except:
            	pass

    def saga_rdgcl(self):

        if self.rdgcl_model.ids.saga_rdgcl_chk.md_bg_color==get_color_from_hex('323043'):
        	self.rdgcl_model.ids.saga_rdgcl_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdgcl__solver' in grid_params_rdgcl:
        	    pass
        	else:
        	   grid_params_rdgcl[solver_rdgclgrlst]=solver_rdgclgrlst_l
        	solver_rdgclgrlst_l.append('saga')
        else:
            self.rdgcl_model.ids.saga_rdgcl_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	solver_rdgclgrlst_l.remove('saga')
            	del grid_params_rdgcl['clfrdgcl__solver']

            except:
            	pass

    def lbfgs_rdgcl(self):

        if self.rdgcl_model.ids.lbfgs_rdgcl_chk.md_bg_color==get_color_from_hex('323043'):
        	self.rdgcl_model.ids.lbfgs_rdgcl_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfrdgcl__solver' in grid_params_rdgcl:
        	    pass
        	else:
        	   grid_params_rdgcl[solver_rdgclgrlst]=solver_rdgclgrlst_l
        	solver_rdgclgrlst_l.append('lbfgs')
        else:
            self.rdgcl_model.ids.lbfgs_rdgcl_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	solver_rdgclgrlst_l.remove('lbfgs')
            	del grid_params_rdgcl['clfrdgcl__solver']

            except:
            	pass


    def positive_rdgcl(self,checkbox,value):

    	if value:
    		pipe_rdgcl['clfrdgcl'].positive=True
    	else:
    		pipe_rdgcl['clfrdgcl'].positive=False

    def copy_X_rdgcl(self,checkbox,value):

    	if value:
    		pipe_rdgcl['clfrdgcl'].copy_X=True
    	else:
    		pipe_rdgcl['clfrdgcl'].copy_X=False

    def fit_intercept_rdgcl(self,checkbox,value):

    	if value:
    		pipe_rdgcl['clfrdgcl'].fit_intercept=True
    	else:
    		pipe_rdgcl['clfrdgcl'].fit_intercept=False




    def add_grdscv_rdgcl(self):

        if self.prameter_optimizer_wid_rdgcl.ids.gridsearchcv_chk_rdgcl.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_rdgcl.ids.gridsearchcv_chk_rdgcl.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_rdgcl.ids.gridsearchcv_chk_rdgcl.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_rdgcl=Factory.gridsearchcv_wid_rdgcl()
        	self.rdgcl_model.ids.hypopt_grid_rdgcl.add_widget(self.gridsearchcv_wid_rdgcl)
        	self.gridsearch_asgn_rdgcl=Factory.gridsearch_asgn_rdgcl()
        	self.rdgcl_model.ids.hypopt_grid_rdgcl.add_widget(self.gridsearch_asgn_rdgcl)
        	self.gridsearchcv_wid_rdgcl.ids.return_train_score_grdgcl_chk.active=True
        	self.gridsearchcv_wid_rdgcl.ids.return_train_score_grdgcl_chk.active=False


        else:
        	self.prameter_optimizer_wid_rdgcl.ids.gridsearchcv_chk_rdgcl.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_rdgcl.ids.gridsearchcv_chk_rdgcl.text_color=get_color_from_hex('ffffff')

        	self.rdgcl_model.ids.hypopt_grid_rdgcl.remove_widget(self.gridsearchcv_wid_rdgcl)
        	self.rdgcl_model.ids.hypopt_grid_rdgcl.remove_widget(self.gridsearch_asgn_rdgcl)




    def grdsrchacte_rdgcl(self):

    	try:
    		current_paramopt_rdgcl.clear()
    		current_paramopt_rdgcl.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.rdgcl_model.ids.out_grid_rdgcl.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_rdgcl=self.gridsearchcv_wid_rdgcl.ids.scoring_gscv_rdgcl.text.replace(" ", "")

    	n_jobs_gscv_rdgcl=self.gridsearchcv_wid_rdgcl.ids.n_jobs_gscv_rdgcl.text.replace(" ", "")

    	refit_gscv_rdgcl=self.gridsearchcv_wid_rdgcl.ids.refit_gscv_rdgcl.text.replace(" ", "")

    	cv_gscv_rdgcl=self.gridsearchcv_wid_rdgcl.ids.cv_gscv_rdgcl.text.replace(" ", "")

    	verbose_gscv_rdgcl=self.gridsearchcv_wid_rdgcl.ids.verbose_gscv_rdgcl.text.replace(" ", "")

    	if scoring_gscv_rdgcl=="None":
    		scoring_gscv_rdgcl=None
    	elif "," in scoring_gscv_rdgcl:
    		scoring_gscv_rdgcl=list(map(str,scoring_gscv_rdgcl.split(',')))
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_rdgcl=="None":
    		n_jobs_gscv_rdgcl=None
    	elif n_jobs_gscv_rdgcl.isdigit()==True:
    		n_jobs_gscv_rdgcl=int(n_jobs_gscv_rdgcl)
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_rdgcl=="True":
    		refit_gscv_rdgcl=True
    	elif refit_gscv_rdgcl=="False":
    		refit_gscv_rdgcl=False
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_rdgcl=="None":
    		cv_gscv_rdgcl=None
    	elif cv_gscv_rdgcl.isdigit()==True:
    		cv_gscv_rdgcl=int(cv_gscv_rdgcl)
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_rdgcl.isdigit()==True:
    		verbose_gscv_rdgcl=int(verbose_gscv_rdgcl)
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_rdgcl = GridSearchCV(estimator=pipe_rdgcl,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_rdgcl),
      	  n_jobs=(n_jobs_gscv_rdgcl),
       	 refit=(refit_gscv_rdgcl),
       	 cv=(cv_gscv_rdgcl),
   	     verbose=(verbose_gscv_rdgcl),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_rdgcl
      	  )
    	except Exception as e:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global grdgcl

    	    if len(gbl_pl)==0:
    	        try:
    	        	grdgcl=gs_rdgcl.fit(X_train, y_train)
    	        	y_pred = grdgcl.predict(X_test)
    	        	cr_grdgcls=(classification_report(y_test, y_pred))

            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_grdgcls)
            	except Exception as e:
            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	grdgcl=gs_rdgcl.fit(X_train_1, y_train)
    	        	y_pred = grdgcl.predict(X_test_1)
    	        	cr_grdgclr=(classification_report(y_test, y_pred))

            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_grdgclr)
            	except Exception as e:
            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass
    		#self.root.ids.model_output.text=str(e)
    		#print(e)



    def retutrasco_gscv_rdgcl(self,checkbox,value):
    	global retutrval_gscv_rdgcl
    	if value:
    		retutrval_gscv_rdgcl=True
    	else:
    		retutrval_gscv_rdgcl=False



    def add_rndmcv_rdgcl(self):

        if self.prameter_optimizer_wid_rdgcl.ids.randomizedsearchcv_chk_rdgcl.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_rdgcl.ids.randomizedsearchcv_chk_rdgcl.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_rdgcl.ids.randomizedsearchcv_chk_rdgcl.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_rdgcl=Factory.randomizedsearchcv_wid_rdgcl()
        	self.rdgcl_model.ids.hypopt_grid_rdgcl.add_widget(self.randomizedsearchcv_wid_rdgcl)
        	self.randomizedsearch_asgn_rdgcl=Factory.randomizedsearch_asgn_rdgcl()
        	self.rdgcl_model.ids.hypopt_grid_rdgcl.add_widget(self.randomizedsearch_asgn_rdgcl)
        	self.randomizedsearchcv_wid_rdgcl.ids.return_train_score_rscv_rdgcl_chk.active=True
        	self.randomizedsearchcv_wid_rdgcl.ids.return_train_score_rscv_rdgcl_chk.active=False

        else:
        	self.prameter_optimizer_wid_rdgcl.ids.randomizedsearchcv_chk_rdgcl.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_rdgcl.ids.randomizedsearchcv_chk_rdgcl.text_color=get_color_from_hex('ffffff')

        	self.rdgcl_model.ids.hypopt_grid_rdgcl.remove_widget(self.randomizedsearchcv_wid_rdgcl)
        	self.rdgcl_model.ids.hypopt_grid_rdgcl.remove_widget(self.randomizedsearch_asgn_rdgcl)



    def rndmstvhact_rdgcl(self):

    	try:
    		current_paramopt_rdgcl.clear()
    		current_paramopt_rdgcl.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.rdgcl_model.ids.out_grid_rdgcl.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_rdgcl=self.randomizedsearchcv_wid_rdgcl.ids.n_iter_rscv_rdgcl.text.replace(" ", "")
    	scoring_rscv_rdgcl=self.randomizedsearchcv_wid_rdgcl.ids.scoring_rscv_rdgcl.text.replace(" ", "")
    	n_jobs_rscv_rdgcl=self.randomizedsearchcv_wid_rdgcl.ids.n_jobs_rscv_rdgcl.text.replace(" ", "")
    	refit_rscv_rdgcl=self.randomizedsearchcv_wid_rdgcl.ids.refit_rscv_rdgcl.text.replace(" ", "")
    	cv_rscv_rdgcl=self.randomizedsearchcv_wid_rdgcl.ids.cv_rscv_rdgcl.text.replace(" ", "")
    	verbose_rscv_rdgcl=self.randomizedsearchcv_wid_rdgcl.ids.verbose_rscv_rdgcl.text.replace(" ", "")
    	random_state_rscv_rdgcl=self.randomizedsearchcv_wid_rdgcl.ids.random_state_rscv_rdgcl.text.replace(" ", "")

    	if n_iter_rscv_rdgcl=="None":
    		n_iter_rscv_rdgcl=None
    	elif n_iter_rscv_rdgcl.isdigit()==True:
    		n_iter_rscv_rdgcl=int(n_iter_rscv_rdgcl)
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_rdgcl=="None":
    		scoring_rscv_rdgcl=None
    	elif "," in scoring_rscv_rdgcl:
    		scoring_rscv_rdgcl=list(map(str,scoring_rscv_rdgcl.split(',')))
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_rdgcl=="None":
    		n_jobs_rscv_rdgcl=None
    	elif n_jobs_rscv_rdgcl.isdigit()==True:
    		n_jobs_rscv_rdgcl=int(n_jobs_rscv_rdgcl)
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_rdgcl=="True":
    		refit_rscv_rdgcl=True
    	elif refit_rscv_rdgcl=="False":
    		refit_rscv_rdgcl=False
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_rdgcl=="None":
    		cv_rscv_rdgcl=None
    	elif cv_rscv_rdgcl.isdigit()==True:
    		cv_rscv_rdgcl=int(cv_rscv_rdgcl)
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_rdgcl.isdigit()==True:
    		verbose_rscv_rdgcl=int(verbose_rscv_rdgcl)
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_rdgcl=="None":
    		random_state_rscv_rdgcl=None
    	elif random_state_rscv_rdgcl.isdigit()==True:
    		random_state_rscv_rdgcl=int(random_state_rscv_rdgcl)
    	else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_rdgcl =RandomizedSearchCV(
        	estimator=pipe_rdgcl,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_rdgcl),
       	 scoring=(scoring_rscv_rdgcl),
       	 n_jobs=(n_jobs_rscv_rdgcl),
       	 refit=(refit_rscv_rdgcl),
       	 cv=(cv_rscv_rdgcl),
        	verbose=(verbose_rscv_rdgcl),
        	random_state=(random_state_rscv_rdgcl),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_rdgcl)

    	except Exception as e:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global grdgcl

    	    if len(gbl_pl)==0:
    	        try:
    	        	grdgcl=gs_rdgcl.fit(X_train, y_train)
    	        	y_pred = grdgcl.predict(X_test)
    	        	cr_grdgcls=(classification_report(y_test, y_pred))
            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_grdgcls)

            	except Exception as e:
            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	grdgcl=gs_rdgcl.fit(X_train_1, y_train)
    	        	y_pred = grdgcl.predict(X_test_1)
    	        	cr_grdgclr=(classification_report(y_test, y_pred))
            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_grdgclr)

            	except Exception as e:
            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
        	#self.root.ids.model_output.text=str(e)
        	#print(e)


    def returtraiscor_rscv_rdgcl(self,checkbox,value):
    	global rtrntrscr_rscv_rdgcl
    	if value:
    		rtrntrscr_rscv_rdgcl=True
    	else:
    		rtrntrscr_rscv_rdgcl=False



    def cv_results_gscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "gridsearchcv" in current_paramopt_rdgcl:
        	try:
        		cv_results_gscv_rdgcl_out=grdgcl.cv_results_
        		print(cv_results_gscv_rdgcl_out)
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "gridsearchcv" in current_paramopt_rdgcl:
        	try:
        		best_score_gscv_rdgcl_out=grdgcl.best_score_
        		print(best_score_gscv_rdgcl_out)
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "gridsearchcv" in current_paramopt_rdgcl:
        	try:
        		best_params_gscv_rdgcl_out=grdgcl.best_params_
        		print(best_params_gscv_rdgcl_out)
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "gridsearchcv" in current_paramopt_rdgcl:
        	try:
        		best_index_gscv_rdgcl_out=grdgcl.best_index_
        		print(best_index_gscv_rdgcl_out)
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "gridsearchcv" in current_paramopt_rdgcl:
        	try:
        		scorer_gscv_rdgcl_out=grdgcl.scorer_
        		print(scorer_gscv_rdgcl_out)
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "gridsearchcv" in current_paramopt_rdgcl:
        	try:
        		n_splits_gscv_rdgcl_out=grdgcl.n_splits_
        		print(n_splits_gscv_rdgcl_out)
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "gridsearchcv" in current_paramopt_rdgcl:
        	try:
        		refit_time_gscv_rdgcl_out=grdgcl.refit_time_
        		print(refit_time_gscv_rdgcl_out)
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "gridsearchcv" in current_paramopt_rdgcl:
        	try:
        		multimetric_gscv_rdgcl_out=grdgcl.multimetric_
        		print(multimetric_gscv_rdgcl_out)
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "gridsearchcv" in current_paramopt_rdgcl:
        	try:
        		feature_names_in_gscv_rdgcl_out=grdgcl.feature_names_in_
        		print(feature_names_in_gscv_rdgcl_out)
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "randomizedsearchcv" in current_paramopt_rdgcl:
        	try:
        		cv_results_rscv_rdgcl_out=grdgcl.cv_results_
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "randomizedsearchcv" in current_paramopt_rdgcl:
        	try:
        		best_score_rscv_rdgcl_out=grdgcl.best_score_
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "randomizedsearchcv" in current_paramopt_rdgcl:
        	try:
        		best_params_rscv_rdgcl_out=grdgcl.best_params_
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "randomizedsearchcv" in current_paramopt_rdgcl:
        	try:
        		best_index_rscv_rdgcl_out=grdgcl.best_index_
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "randomizedsearchcv" in current_paramopt_rdgcl:
        	try:
        		scorer_rscv_rdgcl_out=grdgcl.scorer_
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "randomizedsearchcv" in current_paramopt_rdgcl:
        	try:
        		n_splits_rscv_rdgcl_out=grdgcl.n_splits_
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "randomizedsearchcv" in current_paramopt_rdgcl:
        	try:
        		refit_time_rscv_rdgcl_out=grdgcl.refit_time_
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "randomizedsearchcv" in current_paramopt_rdgcl:
        	try:
        		multimetric_rscv_rdgcl_out=grdgcl.multimetric_
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_rdgcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdgcl" in globals() and "randomizedsearchcv" in current_paramopt_rdgcl:
        	try:
        		feature_names_in_rscv_rdgcl_out=grdgcl.feature_names_in_
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_rdgcl_out)
        	except AttributeError as a:
        		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def model_rdgcl(self):

 ###
        try:
        	self.rdgcl_model.ids.out_grid_rdgcl.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return

        if len(solver_rdgclgrlst_l)==1:
        	pipe_rdgcl['clfrdgcl'].solver=(solver_rdgclgrlst_l[0])
        	try:
        		del grid_params_rdgcl['clfrdgcl__solver']
        	except:
        		pass
        elif len(solver_rdgclgrlst_l)==0:

            self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: solver"
            return
        else:
        	if 'clfrdgcl__solver' in grid_params_rdgcl:
        	    pass
        	else:        	    grid_params_rdgcl[solver_rdgclgrlst]=solver_rdgclgrlst_l

        if  len(grid_params_rdgcl)==0:

            global rdgcldat
            try:
            	self.rdgcl_model.ids.hypopt_grid_rdgcl.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		rdgcldat=pipe_rdgcl.fit(X_train, y_train)
            		y_pred = rdgcldat.predict(X_test)
            		crrdgcl=(classification_report(y_test, y_pred))

            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crrdgcl)

            	except Exception as e:
            		print(e)

            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)
            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		rdgcldat=pipe_rdgcl.fit(X_train_1, y_train)
            		y_pred = rdgcldat.predict(X_test_1)
            		crrdgcl=(classification_report(y_test, y_pred))
            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crrdgcl)

            	except Exception as e:
            		print(e)

            		self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.rdgcl_model.ids.hypopt_grid_rdgcl.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_rdgcl=Factory.prameter_optimizer_wid_rdgcl()
            self.rdgcl_model.ids.hypopt_grid_rdgcl.add_widget(self.prameter_optimizer_wid_rdgcl)


    def rdgcl_btn(self):

        global alpha_rdgcl
        alpha_rdgcl=self.rdgcl_model.ids.alpha_rdgcl.text.replace(" ", "")

        global max_iter_rdgcl
        max_iter_rdgcl=self.rdgcl_model.ids.max_iter_rdgcl.text.replace(" ", "")

        global tol_rdgcl
        tol_rdgcl=self.rdgcl_model.ids.tol_rdgcl.text.replace(" ", "")

        global random_state_rdgcl
        random_state_rdgcl=self.rdgcl_model.ids.random_state_rdgcl.text.replace(" ", "")


        if ',' in  alpha_rdgcl and alpha_rdgcl.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global alpha_rdgcl_range
                alpha_rdgcl_range=list(map(float,alpha_rdgcl.split(',')))
                grid_params_rdgcl[alpha_rdgclgrlst]=alpha_rdgcl_range
            except:
            	print("unexpected input")

        elif   "." in alpha_rdgcl and  alpha_rdgcl.replace(".", "").replace("-","").isdigit()==True or alpha_rdgcl.replace("-","").isdigit()==True:
            try:
                pipe_rdgcl['clfrdgcl'].alpha=float((alpha_rdgcl))
            except:
            	print("unexpected input")

            try:
            	del grid_params_rdgcl['clfrdgcl__alpha']
            except:
            	pass
        else:
          	print("alpha")


        if ',' in  max_iter_rdgcl and max_iter_rdgcl.replace(",","").replace("-","").isdigit()==True:
            try:
                global max_iter_rdgcl_range
                max_iter_rdgcl_range=list(map(int,max_iter_rdgcl.split(',')))
                grid_params_rdgcl[max_iter_rdgclgrlst]=max_iter_rdgcl_range
            except:
            	print("unexpected input")

        elif max_iter_rdgcl.replace("-","").isdigit()==True:
            try:
                pipe_rdgcl['clfrdgcl'].max_iter=int((max_iter_rdgcl))
            except:
            	print("unexpected input")

            try:
            	del grid_params_rdgcl['clfrdgcl__max_iter']
            except:
            	pass
        elif max_iter_rdgcl=="None":
            pipe_rdgcl['clfrdgcl'].max_iter=None

            try:
            	del grid_params_rdgcl['clfrdgcl__max_iter']
            except:
            	pass
        else:
          	print("max_iter")

        if ',' in  tol_rdgcl and tol_rdgcl.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global tol_rdgcl_range
                tol_rdgcl_range=list(map(float,tol_rdgcl.split(',')))
                grid_params_rdgcl[tol_rdgclgrlst]=tol_rdgcl_range
            except:
            	print("unexpected input")

        elif   "." in tol_rdgcl and  tol_rdgcl.replace(".", "").replace("-","").isdigit()==True or tol_rdgcl.replace("-","").isdigit()==True:
            try:
                pipe_rdgcl['clfrdgcl'].tol=float((tol_rdgcl))
            except:
            	print("unexpected input")

            try:
            	del grid_params_rdgcl['clfrdgcl__tol']
            except:
            	pass
        else:
          	print("tol")


        if ',' in  random_state_rdgcl and random_state_rdgcl.replace(",","").replace("-","").isdigit()==True:
            try:
                global random_state_rdgcl_range
                random_state_rdgcl_range=list(map(int,random_state_rdgcl.split(',')))
                grid_params_rdgcl[random_state_rdgclgrlst]=random_state_rdgcl_range
            except:
            	print("unexpected input")

        elif random_state_rdgcl.replace("-","").isdigit()==True:
            try:
                pipe_rdgcl['clfrdgcl'].random_state=int((random_state_rdgcl))
            except:
            	print("unexpected input")

            try:
            	del grid_params_rdgcl['clfrdgcl__random_state']
            except:
            	pass
        elif random_state_rdgcl=="None":
            pipe_rdgcl['clfrdgcl'].random_state=None

            try:
            	del grid_params_rdgcl['clfrdgcl__random_state']
            except:
            	pass
        else:
          	print("random_state")




        print(grid_params_rdgcl)
        self.model_rdgcl()

    def poly_onesvm(self):

        if self.onesvm_model.ids.poly_onesvm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.onesvm_model.ids.poly_onesvm_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfonesvm__kernel' in grid_params_onesvm:
        	    pass
        	else:
        	   grid_params_onesvm[kernel_onesvmgrlst]=kernel_onesvmgrlst_l
        	kernel_onesvmgrlst_l.append('poly')
        else:
            self.onesvm_model.ids.poly_onesvm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	kernel_onesvmgrlst_l.remove('poly')
            	del grid_params_onesvm['clfonesvm__kernel']

            except:
            	pass

    def linear_onesvm(self):

        if self.onesvm_model.ids.linear_onesvm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.onesvm_model.ids.linear_onesvm_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfonesvm__kernel' in grid_params_onesvm:
        	    pass
        	else:
        	   grid_params_onesvm[kernel_onesvmgrlst]=kernel_onesvmgrlst_l
        	kernel_onesvmgrlst_l.append('linear')
        else:
            self.onesvm_model.ids.linear_onesvm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	kernel_onesvmgrlst_l.remove('linear')
            	del grid_params_onesvm['clfonesvm__kernel']

            except:
            	pass

    def sigmoid_onesvm(self):

        if self.onesvm_model.ids.sigmoid_onesvm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.onesvm_model.ids.sigmoid_onesvm_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfonesvm__kernel' in grid_params_onesvm:
        	    pass
        	else:
        	   grid_params_onesvm[kernel_onesvmgrlst]=kernel_onesvmgrlst_l
        	kernel_onesvmgrlst_l.append('sigmoid')
        else:
            self.onesvm_model.ids.sigmoid_onesvm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	kernel_onesvmgrlst_l.remove('sigmoid')
            	del grid_params_onesvm['clfonesvm__kernel']

            except:
            	pass

    def rbf_onesvm(self):

        if self.onesvm_model.ids.rbf_onesvm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.onesvm_model.ids.rbf_onesvm_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfonesvm__kernel' in grid_params_onesvm:
        	    pass
        	else:
        	   grid_params_onesvm[kernel_onesvmgrlst]=kernel_onesvmgrlst_l
        	kernel_onesvmgrlst_l.append('rbf')
        else:
            self.onesvm_model.ids.rbf_onesvm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	kernel_onesvmgrlst_l.remove('rbf')
            	del grid_params_onesvm['clfonesvm__kernel']

            except:
            	pass

    def scale_onesvm(self):

        if self.onesvm_model.ids.scale_onesvm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.onesvm_model.ids.scale_onesvm_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfonesvm__gamma' in grid_params_onesvm:
        	    pass
        	else:
        	   grid_params_onesvm[gamma_onesvmgrlst]=gamma_onesvmgrlst_l
        	gamma_onesvmgrlst_l.append('scale')
        else:
            self.onesvm_model.ids.scale_onesvm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	gamma_onesvmgrlst_l.remove('scale')
            	del grid_params_onesvm['clfonesvm__gamma']

            except:
            	pass

    def auto_onesvm(self):

        if self.onesvm_model.ids.auto_onesvm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.onesvm_model.ids.auto_onesvm_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfonesvm__gamma' in grid_params_onesvm:
        	    pass
        	else:
        	   grid_params_onesvm[gamma_onesvmgrlst]=gamma_onesvmgrlst_l
        	gamma_onesvmgrlst_l.append('auto')
        else:
            self.onesvm_model.ids.auto_onesvm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	gamma_onesvmgrlst_l.remove('auto')
            	del grid_params_onesvm['clfonesvm__gamma']

            except:
            	pass

    def verbose_onesvm(self,checkbox,value):

    	if value:
    		pipe_onesvm['clfonesvm'].verbose=True
    	else:
    		pipe_onesvm['clfonesvm'].verbose=False

    def shrinking_onesvm(self,checkbox,value):

    	if value:
    		pipe_onesvm['clfonesvm'].shrinking=True
    	else:
    		pipe_onesvm['clfonesvm'].shrinking=False


    def add_grdscv_onesvm(self):

        if self.prameter_optimizer_wid_onesvm.ids.gridsearchcv_chk_onesvm.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_onesvm.ids.gridsearchcv_chk_onesvm.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_onesvm.ids.gridsearchcv_chk_onesvm.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_onesvm=Factory.gridsearchcv_wid_onesvm()
        	self.onesvm_model.ids.hypopt_grid_onesvm.add_widget(self.gridsearchcv_wid_onesvm)
        	self.gridsearch_asgn_onesvm=Factory.gridsearch_asgn_onesvm()
        	self.onesvm_model.ids.hypopt_grid_onesvm.add_widget(self.gridsearch_asgn_onesvm)
        	self.gridsearchcv_wid_onesvm.ids.return_train_score_gonesvm_chk.active=True
        	self.gridsearchcv_wid_onesvm.ids.return_train_score_gonesvm_chk.active=False


        else:
        	self.prameter_optimizer_wid_onesvm.ids.gridsearchcv_chk_onesvm.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_onesvm.ids.gridsearchcv_chk_onesvm.text_color=get_color_from_hex('ffffff')

        	self.onesvm_model.ids.hypopt_grid_onesvm.remove_widget(self.gridsearchcv_wid_onesvm)
        	self.onesvm_model.ids.hypopt_grid_onesvm.remove_widget(self.gridsearch_asgn_onesvm)




    def grdsrchacte_onesvm(self):

    	try:
    		current_paramopt_onesvm.clear()
    		current_paramopt_onesvm.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.onesvm_model.ids.out_grid_onesvm.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_onesvm=self.gridsearchcv_wid_onesvm.ids.scoring_gscv_onesvm.text.replace(" ", "")

    	n_jobs_gscv_onesvm=self.gridsearchcv_wid_onesvm.ids.n_jobs_gscv_onesvm.text.replace(" ", "")

    	refit_gscv_onesvm=self.gridsearchcv_wid_onesvm.ids.refit_gscv_onesvm.text.replace(" ", "")

    	cv_gscv_onesvm=self.gridsearchcv_wid_onesvm.ids.cv_gscv_onesvm.text.replace(" ", "")

    	verbose_gscv_onesvm=self.gridsearchcv_wid_onesvm.ids.verbose_gscv_onesvm.text.replace(" ", "")

    	if scoring_gscv_onesvm=="None":
    		scoring_gscv_onesvm=None
    	elif "," in scoring_gscv_onesvm:
    		scoring_gscv_onesvm=list(map(str,scoring_gscv_onesvm.split(',')))
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_onesvm=="None":
    		n_jobs_gscv_onesvm=None
    	elif n_jobs_gscv_onesvm.isdigit()==True:
    		n_jobs_gscv_onesvm=int(n_jobs_gscv_onesvm)
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_onesvm=="True":
    		refit_gscv_onesvm=True
    	elif refit_gscv_onesvm=="False":
    		refit_gscv_onesvm=False
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_onesvm=="None":
    		cv_gscv_onesvm=None
    	elif cv_gscv_onesvm.isdigit()==True:
    		cv_gscv_onesvm=int(cv_gscv_onesvm)
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_onesvm.isdigit()==True:
    		verbose_gscv_onesvm=int(verbose_gscv_onesvm)
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_onesvm = GridSearchCV(estimator=pipe_onesvm,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_onesvm),
      	  n_jobs=(n_jobs_gscv_onesvm),
       	 refit=(refit_gscv_onesvm),
       	 cv=(cv_gscv_onesvm),
   	     verbose=(verbose_gscv_onesvm),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_onesvm
      	  )
    	except Exception as e:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gonesvm

    	    if len(gbl_pl)==0:
    	        try:
    	        	gonesvm=gs_onesvm.fit(X_train, y_train)
    	        	y_pred = gonesvm.predict(X_test)
    	        	cr_gonesvms=(classification_report(y_test, y_pred))

            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gonesvms)
            	except Exception as e:
            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gonesvm=gs_onesvm.fit(X_train_1, y_train)
    	        	y_pred = gonesvm.predict(X_test_1)
    	        	cr_gonesvmr=(classification_report(y_test, y_pred))

            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gonesvmr)
            	except Exception as e:
            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass
    		#self.root.ids.model_output.text=str(e)
    		#print(e)




    def retutrasco_gscv_onesvm(self,checkbox,value):
    	global retutrval_gscv_onesvm
    	if value:
    		retutrval_gscv_onesvm=True
    	else:
    		retutrval_gscv_onesvm=False



    def add_rndmcv_onesvm(self):

        if self.prameter_optimizer_wid_onesvm.ids.randomizedsearchcv_chk_onesvm.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_onesvm.ids.randomizedsearchcv_chk_onesvm.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_onesvm.ids.randomizedsearchcv_chk_onesvm.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_onesvm=Factory.randomizedsearchcv_wid_onesvm()
        	self.onesvm_model.ids.hypopt_grid_onesvm.add_widget(self.randomizedsearchcv_wid_onesvm)
        	self.randomizedsearch_asgn_onesvm=Factory.randomizedsearch_asgn_onesvm()
        	self.onesvm_model.ids.hypopt_grid_onesvm.add_widget(self.randomizedsearch_asgn_onesvm)
        	self.randomizedsearchcv_wid_onesvm.ids.return_train_score_rscv_onesvm_chk.active=True
        	self.randomizedsearchcv_wid_onesvm.ids.return_train_score_rscv_onesvm_chk.active=False

        else:
        	self.prameter_optimizer_wid_onesvm.ids.randomizedsearchcv_chk_onesvm.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_onesvm.ids.randomizedsearchcv_chk_onesvm.text_color=get_color_from_hex('ffffff')

        	self.onesvm_model.ids.hypopt_grid_onesvm.remove_widget(self.randomizedsearchcv_wid_onesvm)
        	self.onesvm_model.ids.hypopt_grid_onesvm.remove_widget(self.randomizedsearch_asgn_onesvm)



    def rndmstvhact_onesvm(self):

    	try:
    		current_paramopt_onesvm.clear()
    		current_paramopt_onesvm.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.onesvm_model.ids.out_grid_onesvm.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_onesvm=self.randomizedsearchcv_wid_onesvm.ids.n_iter_rscv_onesvm.text.replace(" ", "")
    	scoring_rscv_onesvm=self.randomizedsearchcv_wid_onesvm.ids.scoring_rscv_onesvm.text.replace(" ", "")
    	n_jobs_rscv_onesvm=self.randomizedsearchcv_wid_onesvm.ids.n_jobs_rscv_onesvm.text.replace(" ", "")
    	refit_rscv_onesvm=self.randomizedsearchcv_wid_onesvm.ids.refit_rscv_onesvm.text.replace(" ", "")
    	cv_rscv_onesvm=self.randomizedsearchcv_wid_onesvm.ids.cv_rscv_onesvm.text.replace(" ", "")
    	verbose_rscv_onesvm=self.randomizedsearchcv_wid_onesvm.ids.verbose_rscv_onesvm.text.replace(" ", "")
    	random_state_rscv_onesvm=self.randomizedsearchcv_wid_onesvm.ids.random_state_rscv_onesvm.text.replace(" ", "")

    	if n_iter_rscv_onesvm=="None":
    		n_iter_rscv_onesvm=None
    	elif n_iter_rscv_onesvm.isdigit()==True:
    		n_iter_rscv_onesvm=int(n_iter_rscv_onesvm)
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_onesvm=="None":
    		scoring_rscv_onesvm=None
    	elif "," in scoring_rscv_onesvm:
    		scoring_rscv_onesvm=list(map(str,scoring_rscv_onesvm.split(',')))
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_onesvm=="None":
    		n_jobs_rscv_onesvm=None
    	elif n_jobs_rscv_onesvm.isdigit()==True:
    		n_jobs_rscv_onesvm=int(n_jobs_rscv_onesvm)
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_onesvm=="True":
    		refit_rscv_onesvm=True
    	elif refit_rscv_onesvm=="False":
    		refit_rscv_onesvm=False
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_onesvm=="None":
    		cv_rscv_onesvm=None
    	elif cv_rscv_onesvm.isdigit()==True:
    		cv_rscv_onesvm=int(cv_rscv_onesvm)
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_onesvm.isdigit()==True:
    		verbose_rscv_onesvm=int(verbose_rscv_onesvm)
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_onesvm=="None":
    		random_state_rscv_onesvm=None
    	elif random_state_rscv_onesvm.isdigit()==True:
    		random_state_rscv_onesvm=int(random_state_rscv_onesvm)
    	else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_onesvm =RandomizedSearchCV(
        	estimator=pipe_onesvm,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_onesvm),
       	 scoring=(scoring_rscv_onesvm),
       	 n_jobs=(n_jobs_rscv_onesvm),
       	 refit=(refit_rscv_onesvm),
       	 cv=(cv_rscv_onesvm),
        	verbose=(verbose_rscv_onesvm),
        	random_state=(random_state_rscv_onesvm),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_onesvm)

    	except Exception as e:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gonesvm

    	    if len(gbl_pl)==0:
    	        try:
    	        	gonesvm=gs_onesvm.fit(X_train, y_train)
    	        	y_pred = gonesvm.predict(X_test)
    	        	cr_gonesvms=(classification_report(y_test, y_pred))
            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gonesvms)

            	except Exception as e:
            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gonesvm=gs_onesvm.fit(X_train_1, y_train)
    	        	y_pred = gonesvm.predict(X_test_1)
    	        	cr_gonesvmr=(classification_report(y_test, y_pred))
            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gonesvmr)

            	except Exception as e:
            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
        	#self.root.ids.model_output.text=str(e)
        	#print(e)



    def returtraiscor_rscv_onesvm(self,checkbox,value):
    	global rtrntrscr_rscv_onesvm
    	if value:
    		rtrntrscr_rscv_onesvm=True
    	else:
    		rtrntrscr_rscv_onesvm=False



    def cv_results_gscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "gridsearchcv" in current_paramopt_onesvm:
        	try:
        		cv_results_gscv_onesvm_out=gonesvm.cv_results_
        		print(cv_results_gscv_onesvm_out)
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "gridsearchcv" in current_paramopt_onesvm:
        	try:
        		best_score_gscv_onesvm_out=gonesvm.best_score_
        		print(best_score_gscv_onesvm_out)
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "gridsearchcv" in current_paramopt_onesvm:
        	try:
        		best_params_gscv_onesvm_out=gonesvm.best_params_
        		print(best_params_gscv_onesvm_out)
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "gridsearchcv" in current_paramopt_onesvm:
        	try:
        		best_index_gscv_onesvm_out=gonesvm.best_index_
        		print(best_index_gscv_onesvm_out)
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "gridsearchcv" in current_paramopt_onesvm:
        	try:
        		scorer_gscv_onesvm_out=gonesvm.scorer_
        		print(scorer_gscv_onesvm_out)
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "gridsearchcv" in current_paramopt_onesvm:
        	try:
        		n_splits_gscv_onesvm_out=gonesvm.n_splits_
        		print(n_splits_gscv_onesvm_out)
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "gridsearchcv" in current_paramopt_onesvm:
        	try:
        		refit_time_gscv_onesvm_out=gonesvm.refit_time_
        		print(refit_time_gscv_onesvm_out)
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "gridsearchcv" in current_paramopt_onesvm:
        	try:
        		multimetric_gscv_onesvm_out=gonesvm.multimetric_
        		print(multimetric_gscv_onesvm_out)
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "gridsearchcv" in current_paramopt_onesvm:
        	try:
        		feature_names_in_gscv_onesvm_out=gonesvm.feature_names_in_
        		print(feature_names_in_gscv_onesvm_out)
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "randomizedsearchcv" in current_paramopt_onesvm:
        	try:
        		cv_results_rscv_onesvm_out=gonesvm.cv_results_
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "randomizedsearchcv" in current_paramopt_onesvm:
        	try:
        		best_score_rscv_onesvm_out=gonesvm.best_score_
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "randomizedsearchcv" in current_paramopt_onesvm:
        	try:
        		best_params_rscv_onesvm_out=gonesvm.best_params_
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "randomizedsearchcv" in current_paramopt_onesvm:
        	try:
        		best_index_rscv_onesvm_out=gonesvm.best_index_
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "randomizedsearchcv" in current_paramopt_onesvm:
        	try:
        		scorer_rscv_onesvm_out=gonesvm.scorer_
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "randomizedsearchcv" in current_paramopt_onesvm:
        	try:
        		n_splits_rscv_onesvm_out=gonesvm.n_splits_
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "randomizedsearchcv" in current_paramopt_onesvm:
        	try:
        		refit_time_rscv_onesvm_out=gonesvm.refit_time_
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "randomizedsearchcv" in current_paramopt_onesvm:
        	try:
        		multimetric_rscv_onesvm_out=gonesvm.multimetric_
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_onesvm(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gonesvm" in globals() and "randomizedsearchcv" in current_paramopt_onesvm:
        	try:
        		feature_names_in_rscv_onesvm_out=gonesvm.feature_names_in_
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_onesvm_out)
        	except AttributeError as a:
        		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def model_onesvm(self):

 ###
        try:
        	self.onesvm_model.ids.out_grid_onesvm.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


        if len(gamma_onesvmgrlst_l)==1:
        	pipe_onesvm['clfonesvm'].gamma=(gamma_onesvmgrlst_l[0])
        	try:
        		del grid_params_onesvm['clfonesvm__gamma']
        	except:
        		pass

        elif len(gamma_onesvmgrlst_l)==0:

            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: gamma"
            return
        else:
        	if 'clfonesvm__gamma' in grid_params_onesvm:
        	    pass
        	else:        	    grid_params_onesvm[gamma_onesvmgrlst]=gamma_onesvmgrlst_l

        if len(kernel_onesvmgrlst_l)==1:
        	pipe_onesvm['clfonesvm'].kernel=(kernel_onesvmgrlst_l[0])
        	try:
        		del grid_params_onesvm['clfonesvm__kernel']
        	except:
        		pass
        elif len(kernel_onesvmgrlst_l)==0:

            self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: kernel"
            return
        else:
        	if 'clfonesvm__kernel' in grid_params_onesvm:
        	    pass
        	else:        	    grid_params_onesvm[kernel_onesvmgrlst]=kernel_onesvmgrlst_l

        if  len(grid_params_onesvm)==0:

            global onesvmdat
            try:
            	self.onesvm_model.ids.hypopt_grid_onesvm.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		onesvmdat=pipe_onesvm.fit(X_train, y_train)
            		y_pred = onesvmdat.predict(X_test)
            		cronesvm=(classification_report(y_test, y_pred))
            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cronesvm)

            	except Exception as e:
            		print(e)

            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)
            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		onesvmdat=pipe_onesvm.fit(X_train_1, y_train)
            		y_pred = onesvmdat.predict(X_test_1)
            		cronesvm=(classification_report(y_test, y_pred))
            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cronesvm)

            	except Exception as e:
            		print(e)

            		self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.onesvm_model.ids.hypopt_grid_onesvm.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_onesvm=Factory.prameter_optimizer_wid_onesvm()
            self.onesvm_model.ids.hypopt_grid_onesvm.add_widget(self.prameter_optimizer_wid_onesvm)



    def add_grdscv_nrctc(self):

        if self.prameter_optimizer_wid_nrctc.ids.gridsearchcv_chk_nrctc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_nrctc.ids.gridsearchcv_chk_nrctc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_nrctc.ids.gridsearchcv_chk_nrctc.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_nrctc=Factory.gridsearchcv_wid_nrctc()
        	self.nrctc_model.ids.hypopt_grid_nrctc.add_widget(self.gridsearchcv_wid_nrctc)
        	self.gridsearch_asgn_nrctc=Factory.gridsearch_asgn_nrctc()
        	self.nrctc_model.ids.hypopt_grid_nrctc.add_widget(self.gridsearch_asgn_nrctc)
        	self.gridsearchcv_wid_nrctc.ids.return_train_score_gnrctc_chk.active=True
        	self.gridsearchcv_wid_nrctc.ids.return_train_score_gnrctc_chk.active=False


        else:
        	self.prameter_optimizer_wid_nrctc.ids.gridsearchcv_chk_nrctc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_nrctc.ids.gridsearchcv_chk_nrctc.text_color=get_color_from_hex('ffffff')

        	self.nrctc_model.ids.hypopt_grid_nrctc.remove_widget(self.gridsearchcv_wid_nrctc)
        	self.nrctc_model.ids.hypopt_grid_nrctc.remove_widget(self.gridsearch_asgn_nrctc)



    def grdsrchacte_nrctc(self):

    	try:
    		current_paramopt_nrctc.clear()
    		current_paramopt_nrctc.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.nrctc_model.ids.out_grid_nrctc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_nrctc=self.gridsearchcv_wid_nrctc.ids.scoring_gscv_nrctc.text.replace(" ", "")

    	n_jobs_gscv_nrctc=self.gridsearchcv_wid_nrctc.ids.n_jobs_gscv_nrctc.text.replace(" ", "")

    	refit_gscv_nrctc=self.gridsearchcv_wid_nrctc.ids.refit_gscv_nrctc.text.replace(" ", "")

    	cv_gscv_nrctc=self.gridsearchcv_wid_nrctc.ids.cv_gscv_nrctc.text.replace(" ", "")

    	verbose_gscv_nrctc=self.gridsearchcv_wid_nrctc.ids.verbose_gscv_nrctc.text.replace(" ", "")

    	if scoring_gscv_nrctc=="None":
    		scoring_gscv_nrctc=None
    	elif "," in scoring_gscv_nrctc:
    		scoring_gscv_nrctc=list(map(str,scoring_gscv_nrctc.split(',')))
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_nrctc=="None":
    		n_jobs_gscv_nrctc=None
    	elif n_jobs_gscv_nrctc.isdigit()==True:
    		n_jobs_gscv_nrctc=int(n_jobs_gscv_nrctc)
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_nrctc=="True":
    		refit_gscv_nrctc=True
    	elif refit_gscv_nrctc=="False":
    		refit_gscv_nrctc=False
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_nrctc=="None":
    		cv_gscv_nrctc=None
    	elif cv_gscv_nrctc.isdigit()==True:
    		cv_gscv_nrctc=int(cv_gscv_nrctc)
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_nrctc.isdigit()==True:
    		verbose_gscv_nrctc=int(verbose_gscv_nrctc)
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_nrctc = GridSearchCV(estimator=pipe_nrctc,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_nrctc),
      	  n_jobs=(n_jobs_gscv_nrctc),
       	 refit=(refit_gscv_nrctc),
       	 cv=(cv_gscv_nrctc),
   	     verbose=(verbose_gscv_nrctc),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_nrctc
      	  )
    	except Exception as e:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gnrctc

    	    if len(gbl_pl)==0:
    	        try:
    	        	gnrctc=gs_nrctc.fit(X_train, y_train)
    	        	y_pred = gnrctc.predict(X_test)
    	        	cr_gnrctcs=(classification_report(y_test, y_pred))

            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gnrctcs)
            	except Exception as e:
            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gnrctc=gs_nrctc.fit(X_train_1, y_train)
    	        	y_pred = gnrctc.predict(X_test_1)
    	        	cr_gnrctcr=(classification_report(y_test, y_pred))

            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gnrctcr)
            	except Exception as e:
            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass
    		#self.root.ids.model_output.text=str(e)
    		#print(e)


    def retutrasco_gscv_nrctc(self,checkbox,value):
    	global retutrval_gscv_nrctc
    	if value:
    		retutrval_gscv_nrctc=True
    	else:
    		retutrval_gscv_nrctc=False



    def add_rndmcv_nrctc(self):

        if self.prameter_optimizer_wid_nrctc.ids.randomizedsearchcv_chk_nrctc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_nrctc.ids.randomizedsearchcv_chk_nrctc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_nrctc.ids.randomizedsearchcv_chk_nrctc.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_nrctc=Factory.randomizedsearchcv_wid_nrctc()
        	self.nrctc_model.ids.hypopt_grid_nrctc.add_widget(self.randomizedsearchcv_wid_nrctc)
        	self.randomizedsearch_asgn_nrctc=Factory.randomizedsearch_asgn_nrctc()
        	self.nrctc_model.ids.hypopt_grid_nrctc.add_widget(self.randomizedsearch_asgn_nrctc)
        	self.randomizedsearchcv_wid_nrctc.ids.return_train_score_rscv_nrctc_chk.active=True
        	self.randomizedsearchcv_wid_nrctc.ids.return_train_score_rscv_nrctc_chk.active=False

        else:
        	self.prameter_optimizer_wid_nrctc.ids.randomizedsearchcv_chk_nrctc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_nrctc.ids.randomizedsearchcv_chk_nrctc.text_color=get_color_from_hex('ffffff')

        	self.nrctc_model.ids.hypopt_grid_nrctc.remove_widget(self.randomizedsearchcv_wid_nrctc)
        	self.nrctc_model.ids.hypopt_grid_nrctc.remove_widget(self.randomizedsearch_asgn_nrctc)



    def rndmstvhact_nrctc(self):

    	try:
    		current_paramopt_nrctc.clear()
    		current_paramopt_nrctc.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.nrctc_model.ids.out_grid_nrctc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_nrctc=self.randomizedsearchcv_wid_nrctc.ids.n_iter_rscv_nrctc.text.replace(" ", "")
    	scoring_rscv_nrctc=self.randomizedsearchcv_wid_nrctc.ids.scoring_rscv_nrctc.text.replace(" ", "")
    	n_jobs_rscv_nrctc=self.randomizedsearchcv_wid_nrctc.ids.n_jobs_rscv_nrctc.text.replace(" ", "")
    	refit_rscv_nrctc=self.randomizedsearchcv_wid_nrctc.ids.refit_rscv_nrctc.text.replace(" ", "")
    	cv_rscv_nrctc=self.randomizedsearchcv_wid_nrctc.ids.cv_rscv_nrctc.text.replace(" ", "")
    	verbose_rscv_nrctc=self.randomizedsearchcv_wid_nrctc.ids.verbose_rscv_nrctc.text.replace(" ", "")
    	random_state_rscv_nrctc=self.randomizedsearchcv_wid_nrctc.ids.random_state_rscv_nrctc.text.replace(" ", "")

    	if n_iter_rscv_nrctc=="None":
    		n_iter_rscv_nrctc=None
    	elif n_iter_rscv_nrctc.isdigit()==True:
    		n_iter_rscv_nrctc=int(n_iter_rscv_nrctc)
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_nrctc=="None":
    		scoring_rscv_nrctc=None
    	elif "," in scoring_rscv_nrctc:
    		scoring_rscv_nrctc=list(map(str,scoring_rscv_nrctc.split(',')))
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_nrctc=="None":
    		n_jobs_rscv_nrctc=None
    	elif n_jobs_rscv_nrctc.isdigit()==True:
    		n_jobs_rscv_nrctc=int(n_jobs_rscv_nrctc)
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_nrctc=="True":
    		refit_rscv_nrctc=True
    	elif refit_rscv_nrctc=="False":
    		refit_rscv_nrctc=False
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_nrctc=="None":
    		cv_rscv_nrctc=None
    	elif cv_rscv_nrctc.isdigit()==True:
    		cv_rscv_nrctc=int(cv_rscv_nrctc)
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_nrctc.isdigit()==True:
    		verbose_rscv_nrctc=int(verbose_rscv_nrctc)
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_nrctc=="None":
    		random_state_rscv_nrctc=None
    	elif random_state_rscv_nrctc.isdigit()==True:
    		random_state_rscv_nrctc=int(random_state_rscv_nrctc)
    	else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_nrctc =RandomizedSearchCV(
        	estimator=pipe_nrctc,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_nrctc),
       	 scoring=(scoring_rscv_nrctc),
       	 n_jobs=(n_jobs_rscv_nrctc),
       	 refit=(refit_rscv_nrctc),
       	 cv=(cv_rscv_nrctc),
        	verbose=(verbose_rscv_nrctc),
        	random_state=(random_state_rscv_nrctc),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_nrctc)

    	except Exception as e:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gnrctc

    	    if len(gbl_pl)==0:
    	        try:
    	        	gnrctc=gs_nrctc.fit(X_train, y_train)
    	        	y_pred = gnrctc.predict(X_test)
    	        	cr_gnrctcs=(classification_report(y_test, y_pred))
            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gnrctcs)

            	except Exception as e:
            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gnrctc=gs_nrctc.fit(X_train_1, y_train)
    	        	y_pred = gnrctc.predict(X_test_1)
    	        	cr_gnrctcr=(classification_report(y_test, y_pred))
            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gnrctcr)

            	except Exception as e:
            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
        	#self.root.ids.model_output.text=str(e)
        	#print(e)




    def returtraiscor_rscv_nrctc(self,checkbox,value):
    	global rtrntrscr_rscv_nrctc
    	if value:
    		rtrntrscr_rscv_nrctc=True
    	else:
    		rtrntrscr_rscv_nrctc=False


#gridsearch attributes


    def cv_results_gscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "gridsearchcv" in current_paramopt_nrctc:
        	try:
        		cv_results_gscv_nrctc_out=gnrctc.cv_results_
        		print(cv_results_gscv_nrctc_out)
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "gridsearchcv" in current_paramopt_nrctc:
        	try:
        		best_score_gscv_nrctc_out=gnrctc.best_score_
        		print(best_score_gscv_nrctc_out)
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "gridsearchcv" in current_paramopt_nrctc:
        	try:
        		best_params_gscv_nrctc_out=gnrctc.best_params_
        		print(best_params_gscv_nrctc_out)
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "gridsearchcv" in current_paramopt_nrctc:
        	try:
        		best_index_gscv_nrctc_out=gnrctc.best_index_
        		print(best_index_gscv_nrctc_out)
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "gridsearchcv" in current_paramopt_nrctc:
        	try:
        		scorer_gscv_nrctc_out=gnrctc.scorer_
        		print(scorer_gscv_nrctc_out)
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "gridsearchcv" in current_paramopt_nrctc:
        	try:
        		n_splits_gscv_nrctc_out=gnrctc.n_splits_
        		print(n_splits_gscv_nrctc_out)
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "gridsearchcv" in current_paramopt_nrctc:
        	try:
        		refit_time_gscv_nrctc_out=gnrctc.refit_time_
        		print(refit_time_gscv_nrctc_out)
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "gridsearchcv" in current_paramopt_nrctc:
        	try:
        		multimetric_gscv_nrctc_out=gnrctc.multimetric_
        		print(multimetric_gscv_nrctc_out)
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "gridsearchcv" in current_paramopt_nrctc:
        	try:
        		feature_names_in_gscv_nrctc_out=gnrctc.feature_names_in_
        		print(feature_names_in_gscv_nrctc_out)
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "randomizedsearchcv" in current_paramopt_nrctc:
        	try:
        		cv_results_rscv_nrctc_out=gnrctc.cv_results_
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "randomizedsearchcv" in current_paramopt_nrctc:
        	try:
        		best_score_rscv_nrctc_out=gnrctc.best_score_
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "randomizedsearchcv" in current_paramopt_nrctc:
        	try:
        		best_params_rscv_nrctc_out=gnrctc.best_params_
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "randomizedsearchcv" in current_paramopt_nrctc:
        	try:
        		best_index_rscv_nrctc_out=gnrctc.best_index_
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "randomizedsearchcv" in current_paramopt_nrctc:
        	try:
        		scorer_rscv_nrctc_out=gnrctc.scorer_
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "randomizedsearchcv" in current_paramopt_nrctc:
        	try:
        		n_splits_rscv_nrctc_out=gnrctc.n_splits_
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "randomizedsearchcv" in current_paramopt_nrctc:
        	try:
        		refit_time_rscv_nrctc_out=gnrctc.refit_time_
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "randomizedsearchcv" in current_paramopt_nrctc:
        	try:
        		multimetric_rscv_nrctc_out=gnrctc.multimetric_
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_nrctc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnrctc" in globals() and "randomizedsearchcv" in current_paramopt_nrctc:
        	try:
        		feature_names_in_rscv_nrctc_out=gnrctc.feature_names_in_
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_nrctc_out)
        	except AttributeError as a:
        		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def model_nrctc(self):



 ###
        try:
        	self.nrctc_model.ids.out_grid_nrctc.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return

        if  len(grid_params_nrctc)==0:

            global nrctcdat
            try:
            	self.nrctc_model.ids.hypopt_grid_nrctc.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		nrctcdat=pipe_nrctc.fit(X_train, y_train)
            		y_pred = nrctcdat.predict(X_test)
            		crnrctc=(classification_report(y_test, y_pred))
            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crnrctc)

            	except Exception as e:
            		print(e)

            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)
            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		nrctcdat=pipe_nrctc.fit(X_train_1, y_train)
            		y_pred = nrctcdat.predict(X_test_1)
            		crnrctc=(classification_report(y_test, y_pred))
            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crnrctc)

            	except Exception as e:
            		print(e)

            		self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.nrctc_model.ids.hypopt_grid_nrctc.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_nrctc=Factory.prameter_optimizer_wid_nrctc()
            self.nrctc_model.ids.hypopt_grid_nrctc.add_widget(self.prameter_optimizer_wid_nrctc)

    def onesvm_btn(self):

        global degree_onesvm
        degree_onesvm=self.onesvm_model.ids.degree_onesvm.text.replace(" ", "")
        global coef0_onesvm
        coef0_onesvm=self.onesvm_model.ids.coef0_onesvm.text.replace(" ", "")
        global tol_onesvm
        tol_onesvm=self.onesvm_model.ids.tol_onesvm.text.replace(" ", "")
        global nu_onesvm
        nu_onesvm=self.onesvm_model.ids.nu_onesvm.text.replace(" ", "")
        global cache_size_onesvm
        cache_size_onesvm=self.onesvm_model.ids.cache_size_onesvm.text.replace(" ", "")
        global max_iter_onesvm
        max_iter_onesvm=self.onesvm_model.ids.max_iter_onesvm.text.replace(" ", "")


        if ',' in  degree_onesvm and degree_onesvm.replace(",","").replace("-","").isdigit()==True:
            try:
                global degree_onesvm_range
                degree_onesvm_range=list(map(int,degree_onesvm.split(',')))
                grid_params_onesvm[degree_onesvmgrlst]=degree_onesvm_range
            except:
            	print("unexpected input")

        elif degree_onesvm.replace("-","").isdigit()==True:
            try:
                pipe_onesvm['clfonesvm'].degree=int((degree_onesvm))
            except:
            	print("unexpected input")

            try:
            	del grid_params_onesvm['clfonesvm__degree']
            except:
            	pass

        else:
          	print("degree")


        if ',' in  coef0_onesvm and coef0_onesvm.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global coef0_onesvm_range
                coef0_onesvm_range=list(map(float,coef0_onesvm.split(',')))
                grid_params_onesvm[coef0_onesvmgrlst]=coef0_onesvm_range
            except:
            	print("unexpected input")

        elif   "." in coef0_onesvm and  coef0_onesvm.replace(".", "").replace("-","").isdigit()==True or coef0_onesvm.replace("-","").isdigit()==True:
            try:
                pipe_onesvm['clfonesvm'].coef0=float((coef0_onesvm))
            except:
            	print("unexpected input")

            try:
            	del grid_params_onesvm['clfonesvm__coef0']
            except:
            	pass
        else:
          	print("coef0")


        if ',' in  tol_onesvm and tol_onesvm.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global tol_onesvm_range
                tol_onesvm_range=list(map(float,tol_onesvm.split(',')))
                grid_params_onesvm[tol_onesvmgrlst]=tol_onesvm_range
            except:
            	print("unexpected input")

        elif   "." in tol_onesvm and  tol_onesvm.replace(".", "").replace("-","").isdigit()==True or tol_onesvm.replace("-","").isdigit()==True:
            try:
                pipe_onesvm['clfonesvm'].tol=float((tol_onesvm))
            except:
            	print("unexpected input")

            try:
            	del grid_params_onesvm['clfonesvm__tol']
            except:
            	pass
        else:
          	print("tol")



        if ',' in  nu_onesvm and nu_onesvm.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global nu_onesvm_range
                nu_onesvm_range=list(map(float,nu_onesvm.split(',')))
                grid_params_onesvm[nu_onesvmgrlst]=nu_onesvm_range
            except:
            	print("unexpected input")

        elif   "." in nu_onesvm and  nu_onesvm.replace(".", "").replace("-","").isdigit()==True or nu_onesvm.replace("-","").isdigit()==True:
            try:
                pipe_onesvm['clfonesvm'].nu=float((nu_onesvm))
            except:
            	print("unexpected input")

            try:
            	del grid_params_onesvm['clfonesvm__nu']
            except:
            	pass
        else:
          	print("nu")


        if ',' in  cache_size_onesvm and cache_size_onesvm.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global cache_size_onesvm_range
                cache_size_onesvm_range=list(map(float,cache_size_onesvm.split(',')))
                grid_params_onesvm[cache_size_onesvmgrlst]=cache_size_onesvm_range
            except:
            	print("unexpected input")

        elif   "." in cache_size_onesvm and  cache_size_onesvm.replace(".", "").replace("-","").isdigit()==True or cache_size_onesvm.replace("-","").isdigit()==True:
            try:
                pipe_onesvm['clfonesvm'].cache_size=float((cache_size_onesvm))
            except:
            	print("unexpected input")

            try:
            	del grid_params_onesvm['clfonesvm__cache_size']
            except:
            	pass
        else:
          	print("cache_size")


        if ',' in  max_iter_onesvm and max_iter_onesvm.replace(",","").replace("-","").isdigit()==True:
            try:
                global max_iter_onesvm_range
                max_iter_onesvm_range=list(map(int,max_iter_onesvm.split(',')))
                grid_params_onesvm[max_iter_onesvmgrlst]=max_iter_onesvm_range
            except:
            	print("unexpected input")

        elif max_iter_onesvm.replace("-","").isdigit()==True:
            try:
                pipe_onesvm['clfonesvm'].max_iter=int((max_iter_onesvm))
            except:
            	print("unexpected input")

            try:
            	del grid_params_onesvm['clfonesvm__max_iter']
            except:
            	pass

        else:
          	print("max_iter")



        print(grid_params_onesvm)
        self.model_onesvm()

    def fit_prior_bnnb(self,checkbox,value):

    	if value:
    		pipe_bnnb['clfbnnb'].fit_prior=True
    	else:
    		pipe_bnnb['clfbnnb'].fit_prior=False

    	print(pipe_bnnb)

    def bnnb_btn(self):

        global alpha_bnnb
        alpha_bnnb=self.bnnb_model.ids.alpha_bnnb.text.replace(" ", "")

        global binarize_bnnb
        binarize_bnnb=self.bnnb_model.ids.binarize_bnnb.text.replace(" ", "")


        if ',' in  alpha_bnnb and alpha_bnnb.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global alpha_bnnb_range
                alpha_bnnb_range=list(map(float,alpha_bnnb.split(',')))
                grid_params_bnnb[alpha_bnnbgrlst]=alpha_bnnb_range
            except:
            	print("unexpected input")

        elif   "." in alpha_bnnb and  alpha_bnnb.replace(".", "").replace("-","").isdigit()==True or alpha_bnnb.replace("-","").isdigit()==True:
            try:
                pipe_bnnb['clfbnnb'].alpha=float((alpha_bnnb))
            except:
            	print("unexpected input")

            try:
            	del grid_params_bnnb['clfbnnb__alpha']
            except:
            	pass
        else:
          	print("alpha")


        if ',' in  binarize_bnnb and binarize_bnnb.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global binarize_bnnb_range
                binarize_bnnb_range=list(map(float,binarize_bnnb.split(',')))
                grid_params_bnnb[binarize_bnnbgrlst]=binarize_bnnb_range
            except:
            	print("unexpected input")

        elif   "." in binarize_bnnb and  binarize_bnnb.replace(".", "").replace("-","").isdigit()==True or binarize_bnnb.replace("-","").isdigit()==True:
            try:
                pipe_bnnb['clfbnnb'].binarize=float((binarize_bnnb))
            except:
            	print("unexpected input")

            try:
            	del grid_params_bnnb['clfbnnb__binarize']
            except:
            	pass
        elif binarize_bnnb=="None":
            pipe_bnnb['clfbnnb'].binarize=None

            try:
            	del grid_params_bnnb['clfbnnb__binarize']
            except:
            	pass
        else:
          	print("binarize")

        print(grid_params_bnnb)
        self.model_bnnb()

    def poly_nusvcls(self):

        if self.nu_model.ids.poly_nusvcls_chk.md_bg_color==get_color_from_hex('323043'):
        	self.nu_model.ids.poly_nusvcls_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfnusvc__kernel' in grid_params_nusvc:
        	    pass
        	else:
        	   grid_params_nusvc[kernel_nugrlst]=kernel_nugrlst_l
        	kernel_nugrlst_l.append('poly')
        else:
            self.nu_model.ids.poly_nusvcls_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	kernel_nugrlst_l.remove('poly')
            	del grid_params_nusvc['clfnusvc__kernel']

            except:
            	pass

    def rbf_nusvcls(self):

        if self.nu_model.ids.rbf_nusvcls_chk.md_bg_color==get_color_from_hex('323043'):
        	self.nu_model.ids.rbf_nusvcls_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfnusvc__kernel' in grid_params_nusvc:
        	    pass
        	else:
        	   grid_params_nusvc[kernel_nugrlst]=kernel_nugrlst_l
        	kernel_nugrlst_l.append('rbf')
        else:
            self.nu_model.ids.rbf_nusvcls_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	kernel_nugrlst_l.remove('rbf')
            	del grid_params_nusvc['clfnusvc__kernel']

            except:
            	pass

    def linear_nusvcls(self):

        if self.nu_model.ids.linear_nusvcls_chk.md_bg_color==get_color_from_hex('323043'):
        	self.nu_model.ids.linear_nusvcls_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfnusvc__kernel' in grid_params_nusvc:
        	    pass
        	else:
        	   grid_params_nusvc[kernel_nugrlst]=kernel_nugrlst_l
        	kernel_nugrlst_l.append('linear')
        else:
            self.nu_model.ids.linear_nusvcls_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	kernel_nugrlst_l.remove('linear')
            	del grid_params_nusvc['clfnusvc__kernel']

            except:
            	pass

    def sigmoid_nusvcls(self):

        if self.nu_model.ids.sigmoid_nusvcls_chk.md_bg_color==get_color_from_hex('323043'):
        	self.nu_model.ids.sigmoid_nusvcls_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfnusvc__kernel' in grid_params_nusvc:
        	    pass
        	else:
        	   grid_params_nusvc[kernel_nugrlst]=kernel_nugrlst_l
        	kernel_nugrlst_l.append('sigmoid')
        else:
            self.nu_model.ids.sigmoid_nusvcls_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	kernel_nugrlst_l.remove('sigmoid')
            	del grid_params_nusvc['clfnusvc__kernel']

            except:
            	pass

    def scale_nusvcls(self):

        if self.nu_model.ids.scale_nusvcls_chk.md_bg_color==get_color_from_hex('323043'):
        	self.nu_model.ids.scale_nusvcls_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfnusvc__gamma' in grid_params_nusvc:
        	    pass
        	else:
        	   grid_params_nusvc[gamma_nugrlst]=gamma_nugrlst_l
        	gamma_nugrlst_l.append('scale')
        else:
            self.nu_model.ids.scale_nusvcls_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	gamma_nugrlst_l.remove('scale')
            	del grid_params_nusvc['clfnusvc__gamma']

            except:
            	pass

    def auto_nusvcls(self):

        if self.nu_model.ids.auto_nusvcls_chk.md_bg_color==get_color_from_hex('323043'):
        	self.nu_model.ids.auto_nusvcls_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfnusvc__gamma' in grid_params_nusvc:
        	    pass
        	else:
        	   grid_params_nusvc[gamma_nugrlst]=gamma_nugrlst_l
        	gamma_nugrlst_l.append('auto')
        else:
            self.nu_model.ids.auto_nusvcls_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	gamma_nugrlst_l.remove('auto')
            	del grid_params_nusvc['clfnusvc__gamma']

            except:
            	pass

    def ovo_nusvcls(self):

        if self.nu_model.ids.ovo_nusvcls_chk.md_bg_color==get_color_from_hex('323043'):
        	self.nu_model.ids.ovo_nusvcls_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfnusvc__decision_function_shape' in grid_params_nusvc:
        	    pass
        	else:
        	   grid_params_nusvc[decision_function_shape_nugrlst]=decision_function_shape_nugrlst_l
        	decision_function_shape_nugrlst_l.append('ovo')
        else:
            self.nu_model.ids.ovo_nusvcls_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	decision_function_shape_nugrlst_l.remove('ovo')
            	del grid_params_nusvc['clfnusvc__decision_function_shape']

            except:
            	pass

    def ovr_nusvcls(self):

        if self.nu_model.ids.ovr_nusvcls_chk.md_bg_color==get_color_from_hex('323043'):
        	self.nu_model.ids.ovr_nusvcls_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfnusvc__decision_function_shape' in grid_params_nusvc:
        	    pass
        	else:
        	   grid_params_nusvc[decision_function_shape_nugrlst]=decision_function_shape_nugrlst_l
        	decision_function_shape_nugrlst_l.append('ovr')
        else:
            self.nu_model.ids.ovr_nusvcls_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	decision_function_shape_nugrlst_l.remove('ovr')
            	del grid_params_nusvc['clfnusvc__decision_function_shape']

            except:
            	pass


    def  nu_btn(self):

        global nu_tx
        nu_tx=self.nu_model.ids.nu_txt_nusvc.text.replace(" ", "")
        #global gma_tx
        #gma_tx=self.nu_model.ids.gma_txt_nusvc.text.replace(" ", "")
        global degree_tx
        degree_tx=self.nu_model.ids.degree_txt_nusvc.text.replace(" ", "")
        global coef0_tx
        coef0_tx=self.nu_model.ids.coef0_txt_nusvc.text.replace(" ", "")
        global tol_tx
        tol_tx=self.nu_model.ids.tol_txt_nusvc.text.replace(" ", "")
        global cache_tx
        cache_tx=self.nu_model.ids.cache_txt_nusvc.text.replace(" ", "")
        global max_iter_tx
        max_iter_tx=self.nu_model.ids.max_iter_txt_nusvc.text.replace(" ", "")
        global random_state_tx
        random_state_tx=self.nu_model.ids.random_state_txt_nusvc.text.replace(" ", "")



        if ',' in  nu_tx and nu_tx.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global nu_tx_range
                nu_tx_range=list(map(float,nu_tx.split(',')))
                grid_params_nusvc[nu_nugrlst]=nu_tx_range
            except:
            	print("unexpected input")

        elif   "." in nu_tx and  nu_tx.replace(".", "").replace("-","").isdigit()==True or nu_tx.replace("-","").isdigit()==True:
            try:
                pipe_nusvc['clfnusvc'].nu=float((nu_tx))
            except:
            	print("unexpected input")

            try:
            	del grid_params_nusvc['clfnusvc__nu']
            except:
            	pass
        else:
          	print("nu")


        if ',' in degree_tx and degree_tx.replace(",","").replace("-","").isdigit()==True:
            try:
                global degree_tx_range
                degree_tx_range=list(map(int,degree_tx.split(',')))
                grid_params_nusvc[degree_nugrlst]=degree_tx_range
            except:
            	print("unexpected input")
        elif degree_tx.replace("-","").isdigit()==True:
            try:
                pipe_nusvc['clfnusvc'].degree=int((degree_tx))
            except:
            	print("unexpected input")

            try:
            	del grid_params_nusvc['clfnusvc__degree']
            except:
            	pass
        else:
        	print("degree")

        if ',' in  coef0_tx and coef0_tx.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global coef0_tx_range
                coef0_tx_range=list(map(float,coef0_tx.split(',')))
                grid_params_nusvc[coef0_nugrlst]=coef0_tx_range
            except:
            	print("unexpected input")

        elif  "." in coef0_tx and  coef0_tx.replace(".", "").replace("-","").isdigit()==True or coef0_tx.replace("-","").isdigit()==True:
            try:
                pipe_nusvc['clfnusvc'].coef0=float((coef0_tx))
            except:
            	print("unexpected input")

            try:
            	del grid_params_nusvc['clfnusvc__coef0']
            except:
            	pass
        else:
          	print("coef0")



        if ',' in  tol_tx and tol_tx.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global tol_tx_range
                tol_tx_range=list(map(float,tol_tx.split(',')))
                grid_params_nusvc[tol_nugrlst]=tol_tx_range
            except:
            	print("unexpected input")

        elif "." in tol_tx and  tol_tx.replace(".", "").replace("-","").isdigit()==True or tol_tx.replace("-","").isdigit()==True:
            try:
                pipe_nusvc['clfnusvc'].tol=float((tol_tx))
            except:
            	print("unexpected input")

            try:
            	del grid_params_nusvc['clfnusvc__tol']
            except:
            	pass
        else:
          	print("tol")

        if ',' in  cache_tx and cache_tx.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global cache_tx_range
                cache_tx_range=list(map(float, cache_tx.split(',')))
                grid_params_nusvc[cache_size_nugrlst]=cache_tx_range
            except:
            	print("unexpected input")

        elif "." in  cache_tx and   cache_tx.replace(".", "").replace("-","").isdigit()==True or  cache_tx.replace("-","").isdigit()==True:
            try:
                pipe_nusvc['clfnusvc']. cache=float((cache_tx))
            except:
            	print("unexpected input")

            try:
            	del grid_params_nusvc['clfnusvc__cache_size']
            except:
            	pass
        else:
          	print("cache")

        if ',' in max_iter_tx and max_iter_tx.replace(",","").replace("-","").isdigit()==True :
            try:
                global max_iter_tx_range
                max_iter_tx_range=list(map(int,max_iter_tx.split(',')))
                grid_params_nusvc[max_iter_nugrlst]=max_iter_tx_range
            except:
            	print("unexpected input")
        elif max_iter_tx.replace("-","").replace("-","").isdigit()==True:
            try:
                pipe_nusvc['clfnusvc'].max_iter=int((max_iter_tx))
            except:
            	print("unexpected input")

            try:
            	del grid_params_nusvc['clfnusvc__max_iter']
            except:
            	pass
        else:
        	print("max_iter")


        if ',' in random_state_tx and random_state_tx.replace(",","").replace("-","").isdigit()==True :
            try:
                global random_state_tx_range
                random_state_tx_range=list(map(int,random_state_tx.split(',')))
                grid_params_nusvc[random_state_nugrlst]=random_state_tx_range

            except:
            	print("unexpected input")

        elif random_state_tx.replace("-","").isdigit()==True:
            try:
                pipe_nusvc['clfnusvc'].random_state=int((random_state_tx))
            except:
            	print("unexpected input")

            try:
            	del grid_params_nusvc['clfnusvc__random_state']
            except:
            	pass
        elif random_state_tx=="None":
            pipe_nusvc['clfnusvc'].random_state=None
            try:
            	del grid_params_nusvc['clfnusvc__random_state']
            except:
            	pass
        else:
        	print("random_state")















        print(grid_params_nusvc)
        self.model_nusvc()

    def lnr_svc_btn(self):
    	global tol_sv
    	tol_sv=self.model_linear_svc.ids.tol_svc.text.replace(" ", "")
    	global c_sv
    	c_sv=self.model_linear_svc.ids.c_svc.text.replace(" ", "")
    	global inter_sv
    	inter_sv=self.model_linear_svc.ids.inter_svc.text.replace(" ", "")
    	global vrb_sv
    	vrb_sv=self.model_linear_svc.ids.vrb_svc.text.replace(" ", "")
    	global rndm_sv
    	rndm_sv=self.model_linear_svc.ids.rndm_svc.text.replace(" ", "")
    	global max_sv
    	max_sv=self.model_linear_svc.ids.max_svc.text.replace(" ", "")

    	if ',' in tol_sv  and tol_sv.replace(",","").replace(".","").replace("-","").isdigit()==True:

            try:
                global tol_sv_range
                tol_sv_range = list(map(float, tol_sv.split(',')))
                grid_params_lsvc[tollsvc] = tol_sv_range
            except:
                pass

    	elif "." in tol_sv and  tol_sv.replace(".", "").replace("-","").isdigit()==True or tol_sv.replace("-","").isdigit()==True:
    	    try:
                pipe_lsvc['clfl'].tol=float((tol_sv))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_lsvc['clfl__tol']
    	    except:
            	pass
    	else:
    		print("")

    	if ',' in c_sv and c_sv.replace(",","").replace(".","").replace("-","").isdigit()==True:
            global c_sv_range
            try:
                c_sv_range=list(map(float,c_sv.split(',')))
                grid_params_lsvc[clsvc]=c_sv_range
            except:
            	print("unexpected  input")
    	elif "." in c_sv and  c_sv.replace(".", "").replace("-","").isdigit()==True or c_sv.replace("-","").isdigit()==True:
    	    try:
                pipe_lsvc['clfl'].C=float((c_sv))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_lsvc['clfl__C']
    	    except:
            	pass
    	else:
    		print("")

    	if ',' in inter_sv and inter_sv.replace(",","").replace(".","").replace("-","").isdigit()==True:
            global inter_sv_range
            try:
                inter_sv_range=list(map(float,inter_sv.split(',')))
                grid_params_lsvc[intsvlscv]=inter_sv_range
            except:
            	print("unexpected  input")
    	elif "." in inter_sv and  inter_sv.replace(".", "").replace("-","").isdigit()==True or inter_sv.replace("-","").isdigit()==True:
    	    try:
                pipe_lsvc['clfl'].intercept_scaling=float((inter_sv))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_lsvc['clfl__intercept_scaling']
    	    except:
            	pass
    	else:
    		print("")

    	if ',' in vrb_sv and  vrb_sv.replace(",", "").replace("-","").isdigit()==True:
            global vrb_sv_range
            try:
                vrb_sv_range=list(map(int,vrb_sv.split(',')))
                grid_params_lsvc[verblsv]=vrb_sv_range
            except:
            	print("unexpected  input")
    	elif vrb_sv.replace("-","").isdigit()==True:
    	    try:
                pipe_lsvc['clfl'].verbose=int((vrb_sv))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_lsvc['clfl__verbose']
    	    except:
            	pass
    	else:
    		print("")

    	if ',' in rndm_sv and  rndm_sv.replace(",", "").replace("-","").isdigit()==True:
            global rndm_sv_range
            try:
                rndm_sv_range=list(map(int,rndm_sv.split(',')))
                grid_params_lsvc[rndmlsv]=rndm_sv_range
            except:
            	print("unexpected  input")
    	elif rndm_sv.replace("-","").isdigit()==True:
    	    try:
                pipe_lsvc['clfl'].random_state=int((rndm_sv))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_lsvc['clfl__random_state']
    	    except:
            	pass

    	elif rndm_sv=="None":
            pipe_lsvc['clfl'].random_state=None
            try:
            	del grid_params_lsvc['clfl__random_state']
            except:
            	pass
    	else:
    		print("")

    	if ',' in max_sv and  max_sv.replace(",", "").replace("-","").isdigit()==True:
            global max_sv_range
            try:
                max_sv_range=list(map(int,max_sv.split(',')))
                grid_params_lsvc[mxitlsv]=max_sv_range
            except:
            	print("unexpected  input")
    	elif max_sv.replace("-","").isdigit()==True:
    	    try:
                pipe_lsvc['clfl'].max_iter=int((max_sv))
    	    except:
            	print("unexpected input")

    	    try:
            	del grid_params_lsvc['clfl__max_iter']
    	    except:
            	pass
    	else:
    		print("")


    	print(grid_params_lsvc)
    	self.model_linearSVC()


   # def log_btn(self):
    def log_btn(self):
    	global tol_lg
    	tol_lg=self.model_log.ids.tol_log.text.replace(" ", "")
    	global c_lg
    	c_lg=self.model_log.ids.c_log.text.replace(" ", "")
    	global inter_lg
    	inter_lg=self.model_log.ids.inter_log.text.replace(" ", "")
    	global rndm_lg
    	rndm_lg=self.model_log.ids.rndm_log.text.replace(" ", "")
    	global max_lg
    	max_lg=self.model_log.ids.max_log.text.replace(" ", "")
    	global vrb_lg
    	vrb_lg=self.model_log.ids.vrb_log.text.replace(" ", "")
    	global n_lg
    	n_lg=self.model_log.ids.n_log.text.replace(" ", "")
    	global l1_lg
    	l1_lg=self.model_log.ids.l1_log.text.replace(" ", "")

    	if ',' in tol_lg and tol_lg.replace(",","").replace(".","").replace("-","").isdigit()==True:
            global tol_lg_range
            try:
                tol_lg_range=list(map(float,tol_lg.split(',')))
                grid_params_logreg[tologr]=tol_lg_range
            except:
            	print("unexpected input")
    	elif "." in tol_lg and  tol_lg.replace(".", "").replace("-","").isdigit()==True or tol_lg.replace("-","").isdigit()==True:
    	    try:
                pipe_logreg['clflog'].tol=float((tol_lg))
    	    except:
            	print("unexpected input")
    	    try:
            	del grid_params_logreg['clflog__tol']
    	    except:
            	pass
    	else:
        	print("")

    	if ',' in c_lg  and c_lg.replace(",","").replace(".","").replace("-","").isdigit()==True:
            global c_lg_range
            try:
                c_lg_range=list(map(float,c_lg.split(',')))
                grid_params_logreg[clogr]=c_lg_range
            except:
            	print("unexpected  input")
    	elif "." in c_lg and  c_lg.replace(".", "").replace("-","").isdigit()==True or c_lg.replace("-","").isdigit()==True:
    	    try:
                pipe_logreg['clflog'].C=float((c_lg))
    	    except:
            	print("unexpected input")
    	    try:
            	del grid_params_logreg['clflog__C']
    	    except:
            	pass

    	if ',' in inter_lg and inter_lg.replace(",","").replace(".","").replace("-","").isdigit()==True:
            global inter_lg_range
            try:
                inter_lg_range=list(map(float,inter_lg.split(',')))
                grid_params_logreg[intrlogr]=inter_lg_range
            except:
            	print("unexpected  input")

    	elif "." in inter_lg and  inter_lg.replace(".", "").replace("-","").isdigit()==True or inter_lg.replace("-","").isdigit()==True:
    	    try:
                pipe_logreg['clflog'].intercept_scaling=float((inter_lg))
    	    except:
            	print("unexpected input")
    	    try:
            	del grid_params_logreg['clflog__intercept_scaling']
    	    except:
            	pass
    	else:
        	print("")
    	if ',' in rndm_lg and rndm_lg.replace(",","").replace("-","").isdigit()==True:
            global rndm_lg_range
            try:
                rndm_lg_range=list(map(int,rndm_lg.split(',')))
                grid_params_logreg[rndmlogr]=rndm_lg_range
            except:
            	print("unexpected  input")
    	elif rndm_lg.replace("-","").isdigit()==True:
    	    try:
                pipe_logreg['clflog'].random_state=int((rndm_lg))
    	    except:
            	print("unexpected input")
    	    try:
            	del grid_params_logreg['clflog__random_state']
    	    except:
            	pass
    	elif rndm_lg=="None":
            pipe_logreg['clflog'].random_state=None
            try:
            	del grid_params_logreg['clflog__random_state']
            except:
            	pass
    	self.h1()
        	#print("")
        #self.h1()


    def h1(self):

        if ',' in max_lg and max_lg.replace(",", "").replace("-", "").isdigit() == True:
            global max_lg_range
            max_lg_range = list(map(int, max_lg.split(',')))
            grid_params_logreg[mxitlogr] = max_lg_range
        elif max_lg.replace('-', '').isdigit() == True:
            try:
                pipe_logreg['clflog'].max_iter = int((max_lg))
            except:
                pass
            try:
                del grid_params_logreg['clflog__max_iter']
            except:
                pass
        else:
            print("")

        if ',' in vrb_lg and vrb_lg.replace(",", "").replace("-", "").isdigit() == True:
            global vrb_lg_range
            try:
                vrb_lg_range = list(map(int, vrb_lg.split(',')))
                grid_params_logreg[vrbslogr] = vrb_lg_range
            except:
                print("unexpected  input")
        elif vrb_lg.replace("-", "").isdigit() == True:
            try:
                pipe_logreg['clflog'].verbose = int((vrb_lg))
            except:
                print("unexpected input")

            try:
                del grid_params_logreg['clflog__verbose']
            except:
                pass
        else:
        	print("")

        if ',' in n_lg and n_lg.replace(",", "").replace("-", "").isdigit() == True:
            global n_lg_range
            try:
                n_lg_range = list(map(int, n_lg.split(',')))
                grid_params_logreg[njbslogr] = n_lg_range
            except:
                print("unexpected  input")
        elif n_lg.replace("-", "").isdigit() == True:
            try:
                pipe_logreg['clflog'].n_jobs = int((n_lg))
            except:
                print("unexpected input")

            try:
                del grid_params_logreg['clflog__n_jobs']
            except:
                pass

        elif n_lg=="None":
            pipe_logreg['clflog'].n_jobs=None

            try:
            	del grid_params_logreg['clflog__n_jobs']
            except:
            	pass
        else:
        	print("")

        if ',' in l1_lg and l1_lg.replace(",", "").replace(".", "").replace("-", "").isdigit() == True:
            global l1_lg_range
            try:
                l1_lg_range = list(map(float, l1_lg.split(',')))
                grid_params_logreg[l1logr] = l1_lg_range
            except:
                print("unexpected  input")
        elif "." in l1_lg and l1_lg.replace(".", "").replace("-", "").isdigit() == True or l1_lg.replace("-",
                                                                                                         "").isdigit() == True:
            try:
                pipe_logreg['clflog'].l1_ratio = float((l1_lg))
            except:
                print("unexpected input")

            try:
                del grid_params_logreg['clflog__l1_ratio']
            except:
                pass
        elif l1_lg == "None":
            pipe_logreg['clflog'].l1_ratio = None

            try:
                del grid_params_logreg['clflog__l1_ratio']
            except:
                pass
        else:
            pass
        self.model_log_reg()

    def knn_btn(self):


    	global n_neigh_kn
    	n_neigh_kn=self.model_knn.ids.n_neigh_knn.text.replace(" ", "")
    	global leaf_kn
    	leaf_kn=self.model_knn.ids.leaf_knn.text.replace(" ", "")
    	global p_kn
    	p_kn=self.model_knn.ids.p_knn.text.replace(" ", "")
    	global metric_kn
    	metric_kn=self.model_knn.ids.metric_knn.text.replace(" ", "")
    	global n_job_kn
    	n_job_kn=self.model_knn.ids.n_job_knn.text.replace(" ", "")

    	if ',' in n_neigh_kn and n_neigh_kn.replace(",", "").replace("-","").isdigit()==True:
            global n_neigh_kn_range
            try:
                n_neigh_kn_range=list(map(int,n_neigh_kn.split(',')))
                grid_params_knn[nneihkn]=n_neigh_kn_range
            except:
            	print("unexpected  input")
    	elif n_neigh_kn.replace("-","").isdigit()==True:
            pipe_knn['clfknn'].n_neighbors=(int(n_neigh_kn))
            try:
            	del grid_params_knn['clfknn__n_neighbors']
            except:
            	pass
    	else:
        	print("")

    	if ',' in leaf_kn and leaf_kn.replace(",", "").replace("-","").isdigit()==True:
            global leaf_kn_range
            try:
                leaf_kn_range=list(map(int,leaf_kn.split(',')))
                grid_params_knn[lefknb]=leaf_kn_range
            except:
            	print("unexpected  input")
    	elif leaf_kn.replace("-","").isdigit()==True:
    	    try:
                pipe_knn['clfknn'].leaf_size=(int(leaf_kn))
    	    except:
            	print("unexpected  input")
    	    try:
            	del grid_params_knn['clfknn__leaf_size']
    	    except:
            	pass
    	else:
        	print("")

    	if ',' in p_kn and p_kn.replace(",", "").replace("-","").isdigit()==True:
            global p_kn_range
            try:
                p_kn_range=list(map(int,p_kn.split(',')))
                grid_params_knn[pknb]=p_kn_range
            except:
            	print("unexpected  input")
    	elif p_kn.replace("-","").isdigit()==True:
    	    try:
                pipe_knn['clfknn'].p=(int(p_kn))
    	    except:
            	print("unexpected  input")
    	    try:
            	del grid_params_knn['clfknn__p']
    	    except:
            	pass
    	else:
        	print("")

    	if ',' in metric_kn:
            global metric_kn_range
            try:
                metric_kn_range=list(map(str,metric_kn.split(',')))
                grid_params_knn[mtrcknb]=metric_kn_range
            except:
            	print("unexpected  input")
    	else:
            pipe_knn['clfknn'].metric=(str(metric_kn))
            try:
            	del grid_params_knn['clfknn__metric']
            except:
            	pass

    	if ',' in n_job_kn and n_job_kn.replace(",", "").replace("-","").isdigit()==True:
            global n_job_knrange
            try:
                n_job_kn_range=list(map(int,n_job_kn.split(',')))
                grid_params_knn[njknb]=n_job_kn_range
            except:
            	print("unexpected  input")
    	elif n_job_kn.replace("-","").isdigit()==True:
    	    try:
                pipe_knn['clfknn'].n_jobs=(int(n_job_kn))
    	    except:
            	print("unexpected  input")
    	    try:
            	del grid_params_knn['clfknn__n_jobs']
    	    except:
            	pass
    	elif n_job_kn==None:
            pipe_knn['clfknn'].n_jobs=None
            try:
            	del grid_params_knn['clfknn__n_jobs']
            except:
            	pass
    	else:
        	print("")

    	print(grid_params_knn)
    	self.model_knearest()

    def svr_btn(self):
        global gma_sreg
        gma_sreg=self.model_svr.ids.gma_svr.text.replace(" ", "")
        global degree_sreg
        degree_sreg=self.model_svr.ids.degree_txt_svr.text.replace(" ", "")
        global coef0_sreg
        coef0_sreg=self.model_svr.ids.coef0_txt_svr.text.replace(" ", "")
        global tol_sreg
        tol_sreg=self.model_svr.ids.tol_txt_svr.text.replace(" ", "")
        global epsilon_sreg
        epsilon_sreg=self.model_svr.ids.epsilon_txt_svr.text.replace(" ", "")
        global cache_sreg
        cache_sreg=self.model_svr.ids.cache_txt_svr.text.replace(" ", "")

    def linear_reg_btn(self):
        global linear_reg
        linear_reg=self.model_linear_r.ids.linear_r_r.text.replace(" ", "")

    def dt_btn(self):
        global max_dtre
        max_dtre=self.model_dt.ids.max_dt.text.replace(" ", "")
        global min_splt_dtre
        min_splt_dtre=self.model_dt.ids.min_split_dt.text.replace(" ", "")
        global min_lef_dtre
        min_lef_dtre=self.model_dt.ids.min_leaf_dt.text.replace(" ", "")
        global min_weigh_dtre
        min_weigh_dtre=self.model_dt.ids.min_weigh_dt.text.replace(" ", "")
        global rndm_dtre
        rndm_dtre=self.model_dt.ids.rndm_dt.text.replace(" ", "")
        global max_lef_dtre
        max_lef_dtre=self.model_dt.ids.max_leaf_dt.text.replace(" ", "")
        global min_imp_dtre
        min_imp_dtre=self.model_dt.ids.min_impurity_dt.text.replace(" ", "")
        global cpp_dtre
        cpp_dtre=self.model_dt.ids.cpp_dt.text.replace(" ", "")

        if ',' in max_dtre and max_dtre.replace(",", "").replace("-","").isdigit()==True:

            try:
                global max_dtre_range
                max_dtre_range=list(map(int, max_dtre.split(',')))
                grid_params_dtre[clfmaxd]=max_dtre_range
            except:
            	print("unexpected input")

        elif max_dtre.replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].max_depth=(int(max_dtre))
            try:
            	del grid_params_dtre['clfdt__max_depth']
            except:
            	pass
        elif max_dtre=="None":
            pipe_dtrc['clfdt'].max_depth=None
            try:
            	del grid_params_dtre['clfdt__max_depth']
            except:
            	pass
        else:
        	print("max_depth")

        # int or float
        global min_splt_dtre_range
        if ',' in min_splt_dtre and min_splt_dtre.replace(",","").replace("-","").isdigit()==True:
            try:

                min_splt_dtre_range=list(map(int, min_splt_dtre.split(',')))
                grid_params_dtre[clf_min_splt_dt]=min_splt_dtre_range
            except:
            	print("unexpected input")

        elif ',' in min_splt_dtre and min_splt_dtre.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:

                min_splt_dtre_range=list(map(float, min_splt_dtre.split(',')))
                grid_params_dtre[clf_min_splt_dt]=min_splt_dtre_range
            except:
            	print("unexpected input")

        elif "." in min_splt_dtre and  min_splt_dtre.replace(".", "").replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].min_samples_split=(float(min_splt_dtre))
            try:
            	del grid_params_dtre['clfdt__min_samples_split']
            except:
            	pass
        elif min_splt_dtre and  min_splt_dtre.replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].min_samples_split=(int(min_splt_dtre))
            try:
            	del grid_params_dtre['clfdt__min_samples_split']
            except:
            	pass
        else:
        	print("min_samples_split")
        global min_lef_dtre_range

        if ',' in min_lef_dtre and min_lef_dtre.replace(",","").replace("-","").isdigit()==True:
            try:

                min_lef_dtre_range=list(map(int, min_lef_dtre.split(',')))
                grid_params_dtre[clfmldtre]=min_lef_dtre_range
            except:
            	print("unexpected input")

        elif ',' in min_lef_dtre and min_lef_dtre.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:

                min_lef_dtre_range=list(map(float, min_lef_dtre.split(',')))
                grid_params_dtre[clfmldtre]=min_lef_dtre_range
            except:
            	print("unexpected input")

        elif "." in min_lef_dtre and  min_lef_dtre.replace(".", "").replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].min_samples_leaf=(float(min_lef_dtre))
            try:
            	del grid_params_dtre['clfdt__min_samples_leaf']
            except:
            	pass
        elif min_lef_dtre and  min_lef_dtre.replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].min_samples_leaf=(int(min_lef_dtre))
            try:
            	del grid_params_dtre['clfdt__min_samples_leaf']
            except:
            	pass
        else:
        	print("min_samples_leaf")

        if ',' in min_weigh_dtre and min_weigh_dtre.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global min_weigh_dtre_range
                min_weigh_dtre_range=list(map(float, min_weigh_dtre.split(',')))
                grid_params_dtre[clfmwdtre]=min_weigh_dtre_range
            except:
            	print("unexpected input")

        elif "." in min_weigh_dtre and  min_weigh_dtre.replace(".", "").replace("-","").isdigit()==True or min_weigh_dtre.replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].min_weight_fraction_leaf=(float(min_weigh_dtre))
            try:
            	del grid_params_dtre['clfdt__min_weight_fraction_leaf']
            except:
            	pass
        else:
        	print("min_weight_fraction_leaf")

        if ',' in rndm_dtre and  rndm_dtre.replace(",", "").replace("-","").isdigit()==True:
            try:
                global rndm_dtre_range
                rndm_dtre_range=list(map(int, rndm_dtre.split(',')))
                grid_params_dtre[clfrdtre]=rndm_dtre_range
            except:
            	print("unexpected input")

        elif rndm_dtre.replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].random_state=(int(rndm_dtre))
            try:
            	del grid_params_dtre['clfdt__random_state']
            except:
            	pass
        elif rndm_dtre=="None":
            pipe_dtrc['clfdt'].random_state=None
            try:
            	del grid_params_dtre['clfdt__random_state']
            except:
            	pass
        else:
        	print("random_state")

        if ',' in max_lef_dtre and  max_lef_dtre.replace(",", "").replace("-","").isdigit()==True:
            try:
                global max_lef_dtre_range
                max_lef_dtre_range=list(map(int, max_lef_dtre.split(',')))

                grid_params_dtre[clfmlndtre]=max_lef_dtre_range
            except:
            	print("unexpected input")

        elif max_lef_dtre.replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].max_leaf_nodes=(int(max_lef_dtre))
            try:
            	del grid_params_dtre['clfdt__max_leaf_nodes']
            except:
            	pass
        elif max_lef_dtre=="None":
            pipe_dtrc['clfdt'].max_leaf_nodes=None
            try:
            	del grid_params_dtre['clfdt__max_leaf_nodes']
            except:
            	pass
        else:
        	print("max_leaf_nodes")

        if ',' in min_imp_dtre and min_imp_dtre.replace(",","").replace(".","").replace("-","").isdigit()==True:
            try:
                global min_imp_dtre_range
                min_imp_dtre_range=list(map(float, min_imp_dtre.split(',')))
                grid_params_dtre[clfmindtre]=min_imp_dtre_range
            except:
            	print("unexpected input")
        elif "." in min_imp_dtre and  min_imp_dtre.replace(".", "").replace("-","").isdigit()==True or min_imp_dtre.replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].min_impurity_decrease=(float(min_imp_dtre))
            try:
            	del grid_params_dtre['clfdt__min_impurity_decrease']
            except:
            	pass
        else:
        	print("min_impurity_decrease")

        if ',' in cpp_dtre and cpp_dtre.replace(",","").replace(".","").replace("-","").isdigit()==True :
            try:
                global cpp_dtre_range
                cpp_dtre_range=list(map(float, cpp_dtre.split(',')))
                grid_params_dtre[clf_cpalha_dt]=cpp_dtre_range
            except:
            	print("unexpected input")

        elif "." in cpp_dtre and  cpp_dtre.replace(".", "").replace("-","").isdigit()==True or cpp_dtre.replace("-","").isdigit()==True:
            pipe_dtrc['clfdt'].ccp_alpha=(float(cpp_dtre))
            try:
            	del grid_params_dtre['clfdt__cpp_alpha']
            except:
            	pass
        else:
        	print("ccp_alpha")
        print(grid_params_dtre)
        self.model_dtc()


    def si_imp_btn(self):

        try:
        	self.si_imp_wid.ids.out_grid_si_imp_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.si_imp_btn_trgr()
        elif "simpleimputer" in preprocessing_fit_status:
        	self.si_imp_btn_trgr()
        else:
            self.si_imp_wid.ids.out_grid_si_imp_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"

    def si_imp_btn_trgr(self):

        try:
        	preprocessing_fit_status.remove("simpleimputer")
        except:
        	pass

        simpleimputer_err_lst=[]


        try:
        	self.si_imp_wid.ids.out_grid_si_imp_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        global simtr_msg
        simtr_msg=self.si_imp_wid.ids.si_imp_msgval.text.replace(" ", "")
        global simtr_vrbs
        simtr_vrbs=self.si_imp_wid.ids.si_imp_vrbs.text.replace(" ", "")
        #global fill_si
        #fill_si=self.si_imp_wid.ids.fill_smitr.text.replace(" ", "")
        global pipe_simple_imputer
        global simple_iptr


        if simtr_vrbs.replace("-","").isdigit()==True:
            try:
            	simtr_vrbs=int(simtr_vrbs)
            except:
            	print("unexpected input")
            	self.si_imp_wid.ids.out_grid_si_imp_wid.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            	simpleimputer_err_lst.append("verbose")
            	return
        else:
        	print("unexpected input")
        	simpleimputer_err_lst.append("verbose")
        	self.si_imp_wid.ids.out_grid_si_imp_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
        	return

        if "." in simtr_msg and  simtr_msg.replace(".", "").replace("-","").isdigit()==True:
        	simtr_msg=float(simtr_msg)
        elif simtr_msg.replace("-","").isdigit()==True:
        	simtr_msg=int(simtr_msg)
        elif "nan" in simtr_msg or "np.nan" in simtr_msg:
        	simtr_msg=np.nan
        elif "None" in simtr_msg:
        	simtr_msg=None
        else:
        	simtr_msg=str(simtr_msg)

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.si_imp_wid.ids.out_grid_si_imp_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	siptrstp= [t[0] for t in gbl_pl].index('simple_imputer_gb')
        	gbl_pl.pop(siptrstp)

        except:
        	pass

        try:

            gbl_pl.append(('simple_imputer_gb',
            SimpleImputer(missing_values=(simtr_msg),
        	copy=(cpy_smtr),
    	    strategy=(strg_stre),
        	verbose=(simtr_vrbs),
  	      add_indicator=(addsmtr))
            ))
            print(gbl_pl)
            global simtrql
            simtrql=Pipeline((gbl_pl))

            global scaled_simtr_df
            scaled_simtr_df=simtrql.fit_transform(X_train)
            global scaled_simtr_tst_df
            scaled_simtr_tst_df=simtrql.transform(X_test)

        except Exception as e:
        	print(e)
        	simpleimputer_err_lst.append("fit_failed")
        	self.si_imp_wid.ids.out_grid_si_imp_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

        if len(simpleimputer_err_lst)==0:
            pass
        else:
            preprocessing_fit_status.append("simpleimputer")

    def mean_smitr(self):

        if self.si_imp_wid.ids.simtr_median_chk.md_bg_color==get_color_from_hex('808080'):
        	self.si_imp_wid.ids.simtr_median_chk.md_bg_color=get_color_from_hex('323043')

        if self.si_imp_wid.ids.mstfr_smitr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.si_imp_wid.ids.mstfr_smitr_chk.md_bg_color=get_color_from_hex('323043')

        self.si_imp_wid.ids.mean_smitr_chk.md_bg_color=get_color_from_hex('808080')

        global strg_stre
        strg_stre='mean'

    def simtr_median(self):

        if self.si_imp_wid.ids.mean_smitr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.si_imp_wid.ids.mean_smitr_chk.md_bg_color=get_color_from_hex('323043')

        if self.si_imp_wid.ids.mstfr_smitr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.si_imp_wid.ids.mstfr_smitr_chk.md_bg_color=get_color_from_hex('323043')

        self.si_imp_wid.ids.simtr_median_chk.md_bg_color=get_color_from_hex('808080')

        global strg_stre
        strg_stre='median'


    def mstfr_smitr(self):

        if self.si_imp_wid.ids.mean_smitr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.si_imp_wid.ids.mean_smitr_chk.md_bg_color=get_color_from_hex('323043')


        if self.si_imp_wid.ids.simtr_median_chk.md_bg_color==get_color_from_hex('808080'):
        	self.si_imp_wid.ids.simtr_median_chk.md_bg_color=get_color_from_hex('323043')
        self.si_imp_wid.ids.mstfr_smitr_chk.md_bg_color=get_color_from_hex('808080')

        global strg_stre
        strg_stre='most_frequent'


    def maxabscls(self):

 ###
        try:
        	self.slr_max_wid.ids.out_grid_slr_max_wid.clear_widgets()
        except:
        	pass

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.maxabscls_trgr()
        elif "maxabsscaler" in preprocessing_fit_status:
        	self.maxabscls_trgr()
        else:
        	self.slr_max_wid.ids.out_grid_slr_max_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"


    def  maxabscls_trgr(self):

        try:
        	preprocessing_fit_status.remove("maxabsscaler")
        except:
        	pass

        maxabsscaler_err_lst=[]

 ###
        try:
        	self.slr_max_wid.ids.out_grid_slr_max_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)

        except Exception as e:
            print(e)
            self.slr_max_wid.ids.out_grid_slr_max_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        try:
        	maxabstp= [t[0] for t in gbl_pl].index('maxabs_scaler_gb')
        	gbl_pl.pop(maxabstp)
        except:
        	pass

        try:

            gbl_pl.append(('maxabs_scaler_gb',
            MaxAbsScaler(copy=cpymaxabs)))
            print(gbl_pl)
            global maxabql
            maxabql=Pipeline((gbl_pl))

            global scaled_maxabs_df
            scaled_maxabs_df=maxabql.fit_transform(X_train)
            global scaled_maxabs_tst_df
            scaled_maxabs_tst_df=maxabql.transform(X_test)

        except Exception as e:
        	print(e)
        	maxabsscaler_err_lst.append("fit_failed")
        	self.slr_max_wid.ids.out_grid_slr_max_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

        if len(maxabsscaler_err_lst)==0:
            pass
        else:
            preprocessing_fit_status.append("maxabsscaler")

    def kdeplot_maxabs(self):


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        maxabs_viz_err=[]

        if "scaled_maxabs_df" and "scaled_maxabs_tst_df" in globals():
        	try:
        		scaled_maxabs_df_nw=pd.DataFrame(scaled_maxabs_df, columns = X.columns)
        		plt.figure()
        		axkdemaxabsplosnd=sns.kdeplot(
        		data=scaled_maxabs_df_nw,
        		palette="magma_r")
        		axkdemaxabsplosnd.xaxis.label.set_color('white')
        		axkdemaxabsplosnd.yaxis.label.set_color('white')

        		axkdemaxabsplosnd.spines['bottom'].set_color('white')
        		axkdemaxabsplosnd.spines['top'].set_color('white')
        		axkdemaxabsplosnd.spines['right'].set_color('white')
        		axkdemaxabsplosnd.spines['left'].set_color('white')
        		axkdemaxabsplosnd.xaxis.label.set_color('white')
        		axkdemaxabsplosnd.yaxis.label.set_color('white')
        		axkdemaxabsplosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_maxabs_1",transparent=True)

        	except Exception as e:
        		print(e)
        		maxabs_viz_err.append("error1")

        	try:
        		scaled_maxabs_tst_df_nw= pd.DataFrame(scaled_maxabs_tst_df, columns = X.columns)
        		plt.figure()
        		axkdemaxabs2plosnd=sns.kdeplot(
        		data=scaled_maxabs_tst_df_nw,
        		palette="magma_r")

        		axkdemaxabs2plosnd.spines['bottom'].set_color('white')
        		axkdemaxabs2plosnd.spines['top'].set_color('white')
        		axkdemaxabs2plosnd.spines['right'].set_color('white')
        		axkdemaxabs2plosnd.spines['left'].set_color('white')
        		axkdemaxabs2plosnd.xaxis.label.set_color('white')
        		axkdemaxabs2plosnd.yaxis.label.set_color('white')
        		axkdemaxabs2plosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_maxabs_2",transparent=True)

        	except Exception as e:
        		print(e)
        		maxabs_viz_err.append("error2")
        else:
        	pass
        if len(maxabs_viz_err)==0 and "scaled_maxabs_df" in globals():

        	try:

          	  slr_max_wid_vis=Factory.slr_max_wid_vis()
          	  slr_max_wid_vis.remove = lambda: self.slr_max_wid.remove_widget(slr_max_wid_vis)
          	  self.maxabs_image=(Image(source="C:/Arc-Plots/kdeplot_maxabs_1.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.maxabs_image.reload()
          	  slr_max_wid_vis.ids.maxabs_vis_grd.add_widget(self.maxabs_image)

          	  self.maxabs_image_2=(Image(source="C:/Arc-Plots/kdeplot_maxabs_2.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.maxabs_image_2.reload()
          	  slr_max_wid_vis.ids.maxabs_vis_grd.add_widget(self.maxabs_image_2)

          	  self.slr_max_wid.add_widget(slr_max_wid_vis)

        	except Exception as e:
        		print(e)
        else:
        	pass

    def minmaxscle(self):

        try:
        	self.slr_min_wid.ids.out_grid_slr_min_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.minmaxscle_trgr()
        elif "minmaxscaler" in preprocessing_fit_status:
        	self.minmaxscle_trgr()

        else:
        	self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"

    def minmaxscle_trgr(self):

        try:
           self.slr_min_wid.ids.out_grid_slr_min_wid.clear_widgets()

        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
        	preprocessing_fit_status.remove("minmaxscaler")
        except:
        	pass

        minmaxscaler_err_lst=[]

        min_minmaslr=self.slr_min_wid.ids.min_minmaslr.text.replace(" ","")

        if min_minmaslr.replace("-","").replace(",","").isdigit()==True:
            try:
            	feature_range_tpl=tuple(map(int,min_minmaslr.split(',')))
            except:
            	print("unexpected input")
            	minmaxscaler_err_lst.append("feature_range")
        else:
        	print("unexpected input")
        	minmaxscaler_err_lst.append("feature_range")


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	minmaxstp= [t[0] for t in gbl_pl].index('minmax_scaler_gb')
        	gbl_pl.pop(minmaxstp)

        except:
        	pass

        try:
        	print(feature_range_tpl)
        	gbl_pl.append(('minmax_scaler_gb',
        	MinMaxScaler(

        	feature_range=feature_range_tpl,
        	copy=cpy_pjsyq,
        	#clip=clp_minclr
        	)))
        	print(gbl_pl)
        	global minmxpq
        	minmxpq=Pipeline((gbl_pl))

        	global scaled_minmax_df
        	scaled_minmax_df= minmxpq.fit_transform(X_train)
        	global scaled_minmax_tst_df
        	scaled_minmax_tst_df= minmxpq.transform(X_test)
        except UnboundLocalError as ulc:
        	minmaxscaler_err_lst.append("fit_failed1")
        except Exception as e:
        	print(e)
        	self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

        if len(minmaxscaler_err_lst)==0:
            pass
        else:
            preprocessing_fit_status.append("minmaxscaler")

    def kdeplot_minmax(self):


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        minmax_viz_err=[]

        if "scaled_minmax_df" and "scaled_minmax_tst_df" in globals():
        	try:
        		scaled_minmax_df_nw=pd.DataFrame(scaled_minmax_df, columns = X.columns)
        		plt.figure()
        		axkdeminmaxplosnd=sns.kdeplot(
        		data=scaled_minmax_df_nw,
        		palette="magma_r")
        		axkdeminmaxplosnd.xaxis.label.set_color('white')
        		axkdeminmaxplosnd.yaxis.label.set_color('white')

        		axkdeminmaxplosnd.spines['bottom'].set_color('white')
        		axkdeminmaxplosnd.spines['top'].set_color('white')
        		axkdeminmaxplosnd.spines['right'].set_color('white')
        		axkdeminmaxplosnd.spines['left'].set_color('white')
        		axkdeminmaxplosnd.xaxis.label.set_color('white')
        		axkdeminmaxplosnd.yaxis.label.set_color('white')
        		axkdeminmaxplosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_minmax_1",transparent=True)

        	except Exception as e:
        		print(e)
        		minmax_viz_err.append("error1")

        	try:
        		scaled_minmax_tst_df_nw= pd.DataFrame(scaled_minmax_tst_df, columns = X.columns)
        		plt.figure()
        		axkdeminmax2plosnd=sns.kdeplot(
        		data=scaled_minmax_tst_df_nw,
        		palette="magma_r")

        		axkdeminmax2plosnd.spines['bottom'].set_color('white')
        		axkdeminmax2plosnd.spines['top'].set_color('white')
        		axkdeminmax2plosnd.spines['right'].set_color('white')
        		axkdeminmax2plosnd.spines['left'].set_color('white')
        		axkdeminmax2plosnd.xaxis.label.set_color('white')
        		axkdeminmax2plosnd.yaxis.label.set_color('white')
        		axkdeminmax2plosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_minmax_2",transparent=True)

        	except Exception as e:
        		print(e)
        		minmax_viz_err.append("error2")
        else:
        	pass
        if len(minmax_viz_err)==0 and "scaled_minmax_df" in globals():

        	try:

          	  slr_min_wid_vis=Factory.slr_min_wid_vis()
          	  slr_min_wid_vis.remove = lambda: self.slr_min_wid.remove_widget(slr_min_wid_vis)
          	  self.minmax_image=(Image(source="C:/Arc-Plots/kdeplot_minmax_1.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.minmax_image.reload()
          	  slr_min_wid_vis.ids.minmax_vis_grd.add_widget(self.minmax_image)

          	  self.minmax_image_2=(Image(source="C:/Arc-Plots/kdeplot_minmax_2.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.minmax_image_2.reload()
          	  slr_min_wid_vis.ids.minmax_vis_grd.add_widget(self.minmax_image_2)

          	  self.slr_min_wid.add_widget(slr_min_wid_vis)

        	except Exception as e:
        		print(e)
        else:
        	pass

    def scale_minmcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
            val = (minmxpq.named_steps['minmax_scaler_gb'].scale_)
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd)
            self.output_crd.ids.output_text_heading.text = "[b]scale_"
            self.output_crd.ids.output_text.text = str(val)

        except AttributeError as a:
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
            self.output_crd_err.ids.output_text_err.text = str(a)
        except:
            pass

    def min_minmcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
            val = (minmxpq.named_steps['minmax_scaler_gb'].min_)
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd)
            self.output_crd.ids.output_text_heading.text = "[b]min_"
            self.output_crd.ids.output_text.text = str(val)

        except AttributeError as a:
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
            self.output_crd_err.ids.output_text_err.text = str(a)
        except:
            pass

    def data_min_minmcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
            val = (minmxpq.named_steps['minmax_scaler_gb'].data_min_)
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd)
            self.output_crd.ids.output_text_heading.text = "[b]data_min_"
            self.output_crd.ids.output_text.text = str(val)

        except AttributeError as a:
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
            self.output_crd_err.ids.output_text_err.text = str(a)
        except:
            pass

    def data_max_minmcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
            val = (minmxpq.named_steps['minmax_scaler_gb'].data_max_)
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd)
            self.output_crd.ids.output_text_heading.text = "[b]data_max_"
            self.output_crd.ids.output_text.text = str(val)

        except AttributeError as a:
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
            self.output_crd_err.ids.output_text_err.text = str(a)
        except:
            pass

    def data_range_minmcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
            val = (minmxpq.named_steps['minmax_scaler_gb'].data_range_)
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd)
            self.output_crd.ids.output_text_heading.text = "[b]data_range_"
            self.output_crd.ids.output_text.text = str(val)

        except AttributeError as a:
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
            self.output_crd_err.ids.output_text_err.text = str(a)
        except:
            pass

    def n_samples_seen_minmcl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
            val = (minmxpq.named_steps['minmax_scaler_gb'].n_samples_seen_)
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd)
            self.output_crd.ids.output_text_heading.text = "[b]n_samples_seen_"
            self.output_crd.ids.output_text.text = str(val)

        except AttributeError as a:
            self.slr_min_wid.ids.out_grid_slr_min_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
            self.output_crd_err.ids.output_text_err.text = str(a)
        except:
            pass

    def cpy_minslcr(self,checkbox,value):

       global cpy_pjsyq
       if value:
           cpy_pjsyq=True
       else:
           cpy_pjsyq=False

    def clip_minslcr(self,checkbox,value):

       global clp_minclr
       if value:
           clp_minclr=True
       else:
           clp_minclr=False

    def robustsclr(self):

        try:
        	self.slr_robust_wid.ids.out_grid_slr_robust_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.robustsclr_trgr()
        elif "robustscaler" in preprocessing_fit_status:
        	self.robustsclr_trgr()
        else:
        	self.slr_robust_wid.ids.out_grid_slr_robust_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"

    def robustsclr_trgr(self):

        try:
        	preprocessing_fit_status.remove("robustscaler")
        except:
        	pass

        robustscaler_err_lst=[]

        try:
        	self.slr_robust_wid.ids.out_grid_slr_robust_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        global quantile_range_rbstsr
        quantile_range_rbstsr=self.slr_robust_wid.ids.quantile_range_rbstsr.text.replace(" ", "")


        if quantile_range_rbstsr.replace("-","").replace(".","").replace(",","").isdigit()==True:
            try:
            	quantile_range_tpl=tuple(map(float,quantile_range_rbstsr.split(',')))
            except:
            	print("unexpected input")
            	robustscaler_err_lst.append("quantile_range")
        else:
        	print("unexpected input")
        	robustscaler_err_lst.append("quantile_range")


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_robust_wid.ids.out_grid_slr_robust_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	rbststp= [t[0] for t in gbl_pl].index('robust_scaler_gb')
        	gbl_pl.pop(rbststp)

        except:
        	pass

        try:

    	    gbl_pl.append(('robust_scaler_gb',
            RobustScaler(
            with_centering=withcntr_rbt,
            with_scaling=witscl_rbt,
            quantile_range=quantile_range_tpl,
            copy=cpy_rbt,
            #unit_variance=utvar_rbt
            )))
    	    global rbtslr
    	    rbtslr=Pipeline((gbl_pl))

    	    print(gbl_pl)

    	    global scaled_robust_df
    	    scaled_robust_df=rbtslr.fit_transform(X_train)
    	    global scaled_robust_tst_df
    	    scaled_robust_tst_df=rbtslr.transform(X_test)

        except UnboundLocalError as ulc:
        	robustscaler_err_lst.append("fit_failed1")
        except Exception as e:
        	print(e)
        	robustscaler_err_lst.append("fit_failed")
        	self.slr_robust_wid.ids.out_grid_slr_robust_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)


        if len(robustscaler_err_lst)==0:
            pass
        else:
            preprocessing_fit_status.append("robustscaler")


    def kdeplot_robust(self):


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        robust_viz_err=[]

        if "scaled_robust_df" and "scaled_robust_tst_df" in globals():
        	try:
        		scaled_robust_df_nw=pd.DataFrame(scaled_robust_df, columns = X.columns)
        		plt.figure()
        		axkderobustplosnd=sns.kdeplot(
        		data=scaled_robust_df_nw,
        		palette="magma_r")
        		axkderobustplosnd.xaxis.label.set_color('white')
        		axkderobustplosnd.yaxis.label.set_color('white')

        		axkderobustplosnd.spines['bottom'].set_color('white')
        		axkderobustplosnd.spines['top'].set_color('white')
        		axkderobustplosnd.spines['right'].set_color('white')
        		axkderobustplosnd.spines['left'].set_color('white')
        		axkderobustplosnd.xaxis.label.set_color('white')
        		axkderobustplosnd.yaxis.label.set_color('white')
        		axkderobustplosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_robust_1",transparent=True)

        	except Exception as e:
        		print(e)
        		robust_viz_err.append("error1")

        	try:
        		scaled_robust_tst_df_nw= pd.DataFrame(scaled_robust_tst_df, columns = X.columns)
        		plt.figure()
        		axkderobust2plosnd=sns.kdeplot(
        		data=scaled_robust_tst_df_nw,
        		palette="magma_r")

        		axkderobust2plosnd.spines['bottom'].set_color('white')
        		axkderobust2plosnd.spines['top'].set_color('white')
        		axkderobust2plosnd.spines['right'].set_color('white')
        		axkderobust2plosnd.spines['left'].set_color('white')
        		axkderobust2plosnd.xaxis.label.set_color('white')
        		axkderobust2plosnd.yaxis.label.set_color('white')
        		axkderobust2plosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_robust_2",transparent=True)

        	except Exception as e:
        		print(e)
        		robust_viz_err.append("error2")
        else:
        	pass
        if len(robust_viz_err)==0 and "scaled_robust_df" in globals():

        	try:

          	  slr_robust_wid_vis=Factory.slr_robust_wid_vis()
          	  slr_robust_wid_vis.remove = lambda: self.slr_robust_wid.remove_widget(slr_robust_wid_vis)
          	  self.robust_image=(Image(source="C:/Arc-Plots/kdeplot_robust_1.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.robust_image.reload()
          	  slr_robust_wid_vis.ids.robust_vis_grd.add_widget(self.robust_image)

          	  self.robust_image_2=(Image(source="C:/Arc-Plots/kdeplot_robust_2.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.robust_image_2.reload()
          	  slr_robust_wid_vis.ids.robust_vis_grd.add_widget(self.robust_image_2)

          	  self.slr_robust_wid.add_widget(slr_robust_wid_vis)

        	except Exception as e:
        		print(e)
        else:
        	pass


    def center_robtslr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(rbtslr.named_steps['robust_scaler_gb'].center_)
    	    self.slr_robust_wid.ids.out_grid_slr_robust_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]center_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_robust_wid.ids.out_grid_slr_robust_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def scale_robtslr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(rbtslr.named_steps['robust_scaler_gb'].scale_)
    	    self.slr_robust_wid.ids.out_grid_slr_robust_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]scale_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_robust_wid.ids.out_grid_slr_robust_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def with_centering_rbstsr(self,checkbox,value):

       global withcntr_rbt
       if value:
           withcntr_rbt=True
       else:
           withcntr_rbt=False

    def with_scaling_rbstsr(self,checkbox,value):

       global witscl_rbt
       if value:
           witscl_rbt=True
       else:
           witscl_rbt=False

    def copy_rbstsr(self,checkbox,value):

       global cpy_rbt
       if value:
           cpy_rbt=True
       else:
           cpy_rbt=False

    def unit_variance_rbstsr(self,checkbox,value):

       global utvar_rbt
       if value:
           utvar_rbt=True
       else:
           utvar_rbt=False


    def qutslcsc(self):

        try:
        	self.slr_qt_wid.ids.out_grid_slr_qt_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.qutslcsc_trgr()
        elif "quantiletransformer" in preprocessing_fit_status:
        	self.qutslcsc_trgr()
        else:
        	self.slr_qt_wid.ids.out_grid_slr_qt_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"


    def qutslcsc_trgr(self):

        try:
        	preprocessing_fit_status.remove("quantiletransformer")
        except:
        	pass

        quantiletransformer_err_lst=[]


        try:
        	self.slr_qt_wid.ids.out_grid_slr_qt_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        global nqt_qttr
        nqt_qttr=self.slr_qt_wid.ids.n_quantiles_qttr.text.replace(" ", "")
        global subsample_qttr
        subsample_qttr=self.slr_qt_wid.ids.subsample_qttr.text.replace(" ", "")
        global random_state_qttr
        random_state_qttr=self.slr_qt_wid.ids.random_state_qttr.text.replace(" ", "")

        if nqt_qttr.replace("-","").isdigit()==True:
            try:
            	nqt_qttr=int(nqt_qttr)
            except:
            	print("unexpected input")
            	quantiletransformer_err_lst.append("n_quantiles")
        else:
        	print("unexpected input")
        	quantiletransformer_err_lst.append("n_quantiles")


        if subsample_qttr.replace("-","").isdigit()==True:
        	try:
        		subsample_qttr=int(subsample_qttr)
        	except:
        		print("unexpected input")
        		quantiletransformer_err_lst.append("subsample")
        else:
        	print("unexpected input")
        	quantiletransformer_err_lst.append("subsample")

        if random_state_qttr=="None":
        	random_state_qttr=None
        elif random_state_qttr.replace("-","").isdigit()==True:
        	try:
        		random_state_qttr=int(random_state_qttr)
        	except:
        		print("unexpected input")
        		quantiletransformer_err_lst.append("random_state")
        else:
        	print("unexpected input")
        	quantiletransformer_err_lst.append("random_state")


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_qt_wid.ids.out_grid_slr_qt_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	qttrstp= [t[0] for t in gbl_pl].index('quantile_transformer_gb')
        	gbl_pl.pop(qttrstp)

        except:
        	pass

        try:
            gbl_pl.append(('quantile_transformer_gb',
            QuantileTransformer(
            n_quantiles=(nqt_qttr),
            output_distribution=otdist_qttr,
            ignore_implicit_zeros=igimzr_qttr,
            subsample=(subsample_qttr),
            random_state=(random_state_qttr),
            copy=cpyqtr)))

            global qtplq
            qtplq=Pipeline((gbl_pl))
            print(gbl_pl)

            global scaled_qt_df
            scaled_qt_df=qtplq.fit_transform(X_train)
            global scaled_qt_tst_df
            scaled_qt_tst_df=qtplq.transform(X_test)

        except Exception as e:
        	print(e)
        	quantiletransformer_err_lst.append("fit_failed")
        	self.slr_qt_wid.ids.out_grid_slr_qt_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

        if len(quantiletransformer_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("quantiletransformer")

    def kdeplot_qt(self):


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        qt_viz_err=[]

        if "scaled_qt_df" and "scaled_qt_tst_df" in globals():
        	try:
        		scaled_qt_df_nw=pd.DataFrame(scaled_qt_df, columns = X.columns)
        		plt.figure()
        		axkdeqtplosnd=sns.kdeplot(
        		data=scaled_qt_df_nw,
        		palette="magma_r")
        		axkdeqtplosnd.xaxis.label.set_color('white')
        		axkdeqtplosnd.yaxis.label.set_color('white')

        		axkdeqtplosnd.spines['bottom'].set_color('white')
        		axkdeqtplosnd.spines['top'].set_color('white')
        		axkdeqtplosnd.spines['right'].set_color('white')
        		axkdeqtplosnd.spines['left'].set_color('white')
        		axkdeqtplosnd.xaxis.label.set_color('white')
        		axkdeqtplosnd.yaxis.label.set_color('white')
        		axkdeqtplosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_qt_1",transparent=True)

        	except Exception as e:
        		print(e)
        		qt_viz_err.append("error1")

        	try:
        		scaled_qt_tst_df_nw= pd.DataFrame(scaled_qt_tst_df, columns = X.columns)
        		plt.figure()
        		axkdeqt2plosnd=sns.kdeplot(
        		data=scaled_qt_tst_df_nw,
        		palette="magma_r")

        		axkdeqt2plosnd.spines['bottom'].set_color('white')
        		axkdeqt2plosnd.spines['top'].set_color('white')
        		axkdeqt2plosnd.spines['right'].set_color('white')
        		axkdeqt2plosnd.spines['left'].set_color('white')
        		axkdeqt2plosnd.xaxis.label.set_color('white')
        		axkdeqt2plosnd.yaxis.label.set_color('white')
        		axkdeqt2plosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_qt_2",transparent=True)

        	except Exception as e:
        		print(e)
        		qt_viz_err.append("error2")
        else:
        	pass
        if len(qt_viz_err)==0 and "scaled_qt_df" in globals():

        	try:

          	  slr_qt_wid_vis=Factory.slr_qt_wid_vis()
          	  slr_qt_wid_vis.remove = lambda: self.slr_qt_wid.remove_widget(slr_qt_wid_vis)
          	  self.qt_image=(Image(source="C:/Arc-Plots/kdeplot_qt_1.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.qt_image.reload()
          	  slr_qt_wid_vis.ids.qt_vis_grd.add_widget(self.qt_image)

          	  self.qt_image_2=(Image(source="C:/Arc-Plots/kdeplot_qt_2.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.qt_image_2.reload()
          	  slr_qt_wid_vis.ids.qt_vis_grd.add_widget(self.qt_image_2)

          	  self.slr_qt_wid.add_widget(slr_qt_wid_vis)

        	except Exception as e:
        		print(e)
        else:
        	pass


    def n_quantiles_qutsc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(qtplq.named_steps['quantile_transformer_gb'].n_quantiles_)
    	    self.slr_qt_wid.ids.out_grid_slr_qt_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_quantiles_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_qt_wid.ids.out_grid_slr_qt_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def quantiles_qutsc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(qtplq.named_steps['quantile_transformer_gb'].quantiles_)
    	    self.slr_qt_wid.ids.out_grid_slr_qt_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]quantiles_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_qt_wid.ids.out_grid_slr_qt_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def references_qutsc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(qtplq.named_steps['quantile_transformer_gb'].references_)
    	    self.slr_qt_wid.ids.out_grid_slr_qt_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]references_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_qt_wid.ids.out_grid_slr_qt_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def  uniform_qttr(self):

        if self.slr_qt_wid.ids.normal_qttr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_qt_wid.ids.normal_qttr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_qt_wid.ids.uniform_qttr_chk.md_bg_color=get_color_from_hex('808080')

        global otdist_qttr
        otdist_qttr='uniform'

    def  normal_qttr(self):

        if self.slr_qt_wid.ids.uniform_qttr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_qt_wid.ids.uniform_qttr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_qt_wid.ids.normal_qttr_chk.md_bg_color=get_color_from_hex('808080')

        global otdist_qttr
        otdist_qttr='normal'

    def igimzr_qttr_cls(self,checkbox,value):
        global igimzr_qttr
        if value:
            igimzr_qttr=True
        else:
            igimzr_qttr=False

    def cpy_qttr(self,checkbox,value):
        global cpyqtr
        if value:
            cpyqtr=True
        else:
            cpyqtr=False

    def scale_mabsc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(maxabql.named_steps['maxabs_scaler_gb'].scale_)
    	    self.slr_max_wid.ids.out_grid_slr_max_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]scale_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_max_wid.ids.out_grid_slr_max_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def max_abs_mabsc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(maxabql.named_steps['maxabs_scaler_gb'].max_abs_)
    	    self.slr_max_wid.ids.out_grid_slr_max_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]max_abs_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_max_wid.ids.out_grid_slr_max_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def n_samples_seen_mabsc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(maxabql.named_steps['maxabs_scaler_gb'].n_samples_seen_)
    	    self.slr_max_wid.ids.out_grid_slr_max_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_samples_seen_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_max_wid.ids.out_grid_slr_max_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def maxabcpy_scl(self,checkbox,value):

       global cpymaxabs
       if value:
           cpymaxabs=True
       else:
           cpymaxabs=False


    def stadcpy_scl(self,checkbox,value):

       global cpystadscl
       if value:
           cpystadscl=True
       else:
           cpystadscl=False

    def stadwtmn_scl(self,checkbox,value):
        global wthmenstadscl

        if value:
            wthmenstadscl=True
        else:
            wthmenstadscl=False

    def stadwiths_scl(self,checkbox,value):
        global withstdscl
        if value:
            withstdscl=True
        else:

            withstdscl=False

    def knitrclr(self):

        try:
        	self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.knitrclr_trgr()
        elif "knnimputer" in preprocessing_fit_status:
        	self.knitrclr_trgr()
        else:
        	self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"


    def knitrclr_trgr(self):

        try:
        	self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
        	preprocessing_fit_status.remove("knnimputer")
        except:
        	pass

        knnimputer_err_lst=[]

        global n_neighbors_kitr
        n_neighbors_kitr =self.slr_knnimp_wid.ids.n_neighbors_kitr.text.replace(" ", "")

        if n_neighbors_kitr.replace("-","").isdigit()==True:
        	try:
        	    n_neighbors_kitr=int(n_neighbors_kitr)
        	except:
        		print("unexpected input")
        		knnimputer_err_lst.append("n_neighbors")
        else:
        	print("unexpected input")
        	knnimputer_err_lst.append("n_neighbors")


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	knnimpstp= [t[0] for t in gbl_pl].index('knnimputer_gb')
        	gbl_pl.pop(knnimpstp)

        except:
        	pass

        try:

        	gbl_pl.append(('knnimputer_gb',
            KNNImputer(
            #missing_values=nan,
            n_neighbors=(n_neighbors_kitr),
            weights=whts_krt,
            copy=cpy_krt,
            add_indicator=adic_krt)
        	))
        	print(gbl_pl)
        	global knql
        	knql=Pipeline((gbl_pl))

        	global scaled_knql_df
        	scaled_knql_df=knql.fit_transform(X_train)
        	global scaled_knql_tst_df
        	scaled_knql_tst_df=knql.transform(X_test)

        except Exception as e:
        	print(e)
        	knnimputer_err_lst.append("fit_failed")
        	self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

        if len(knnimputer_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("knnimputer")


    def indicator_kitr(self):
    	try:
    	    print(knql.named_steps['knnimputer_gb'].indicator_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def n_features_in_kitr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(knql.named_steps['knnimputer_gb'].n_features_in_)
    	    self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def feature_names_in_kitr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(knql.named_steps['knnimputer_gb'].feature_names_in_)
    	    self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def indicator_kitr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(knql.named_steps['knnimputer_gb'].indicator_)
    	    self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]indicator_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_knnimp_wid.ids.out_grid_slr_knnimp_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def uniform_kitr(self):

        if self.slr_knnimp_wid.ids.distance_kitr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_knnimp_wid.ids.distance_kitr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_knnimp_wid.ids.uniform_kitr_chk.md_bg_color=get_color_from_hex('808080')

        global whts_krt
        whts_krt='uniform'

    def distance_kitr(self):

        if self.slr_knnimp_wid.ids.uniform_kitr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_knnimp_wid.ids.uniform_kitr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_knnimp_wid.ids.distance_kitr_chk.md_bg_color=get_color_from_hex('808080')

        global whts_krt
        whts_krt='distance'

    def  copy_kitr(self,checkbox,value):
        global cpy_krt
        if value:
        	cpy_krt=True
        else:
        	cpy_krt=False

    def add_indicator_kitr(self,checkbox,value):
        global adic_krt
        if value:
        	adic_krt=True
        else:
        	adic_krt=False

    def slkbtact(self):

    	if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
    		self.slkbtact_trgr()
    	elif "selectkbest" in preprocessing_fit_status:
    		self.slkbtact_trgr()
    	else:
    		pass

    def slkbtact_trgr(self):

        try:
        	preprocessing_fit_status.remove("selectkbest")
        except:
        	pass

        selectkbest_err_lst=[]

        k_slkbt=self.slr_slkbt_wid.ids.k_slkbt.text.replace(" ","")

        if  k_slkbt.replace("-","").isdigit()==True:
        	try:
        		k_slkbt=int(k_slkbt)
        	except:
        		print("unexpected input")
        elif  k_slkbt=="all":
        	k_slkbt="all"
        else:
        	print("unexpected input")


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        try:
        	slkbtstp= [t[0] for t in gbl_pl].index("selectkbest_gb")
        	gbl_pl.pop(slkbtstp)
        except:
        	pass

        try:

            gbl_pl.append(("selectkbest_gb",
            SelectKBest(
            function_slkbt_val,
            k=(k_slkbt)
            )
        	))
            print(gbl_pl)
            global slkbtql
            slkbtql=Pipeline((gbl_pl))

            global scaled_slkbtql_df
            scaled_slkbtql_df=slkbtql.fit_transform(X_train)
            global scaled_slkbtql_tst_df
            scaled_slkbtql_tst_df=slkbtql.transform(X_test)

        except Exception as e:
        	print(e)
        	selectkbest_err_lst.append("fit_failed")

        if len(selectkbest_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("selectkbest")

    def  chi2_slkbt(self):
    	global function_slkbt_val
    	function_slkbt_val=chi2

    def  f_classif_slkbt(self):
    	global function_slkbt_val
    	function_slkbt_val=f_classif

    def  mutual_info_classif_slkbt(self):
    	global function_slkbt_val
    	function_slkbt_val=mutual_info_classif


    def vrthdact(self):

    	if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
    		self.vrthdact_trgr()
    	elif "variancethreshold" in preprocessing_fit_status:
    		self.vrthdact_trgr()
    	else:
    		pass

    def vrthdact_trgr(self):

        try:
        	preprocessing_fit_status.remove("variancethreshold")
        except:
        	pass

        variancethreshold_err_lst=[]

        threshold_vrthd=self.slr_vrthd_wid.ids.threshold_vrthd.text.replace(" ","")

        if "." in threshold_vrthd and threshold_vrthd.replace(".","").replace("-","").isdigit()==True or threshold_vrthd.replace("-","").isdigit()==True:
         	try:
         		threshold_vrthd=float(threshold_vrthd)
         	except:
         		print("unexpected input")
         		variancethreshold_err_lst.append("threshold")

        else:
            print("unexpected input")
            variancethreshold_err_lst.append("threshold")


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        try:
        	selprcstp= [t[0] for t in gbl_pl].index("variancethreshold_gb")
        	gbl_pl.pop(selprcstp)
        except:
        	pass

        try:
            gbl_pl.append(("variancethreshold_gb",
            VarianceThreshold(threshold=(threshold_vrthd)
            )
        	))

            global vrthdql
            print(gbl_pl)
            vrthdql=Pipeline((gbl_pl))

            global scaled_vrthdql_df
            scaled_vrthdql_df=vrthdql.fit_transform(X_train)
            global scaled_vrthdql_tst_df
            scaled_vrthdql_tst_df=vrthdql.transform(X_test)

        except Exception as e:

        	print(e)
        	variancethreshold_err_lst.append("fit_failed")

        if len(variancethreshold_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("variancethreshold")


    def sctplact(self):

    	if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
    		self.sctplact_trgr()
    	elif "selectpercentile" in preprocessing_fit_status:
    		self.sctplact_trgr()
    	else:
    		pass

    def sctplact_trgr(self):

        try:
        	preprocessing_fit_status.remove("selectpercentile")
        except:
        	pass

        selectpercentile_err_lst=[]

        percentile_sctptl=self.slr_sctptl_wid.ids.percentile_sctptl.text.replace(" ","")

        if  percentile_sctptl.replace("-","").isdigit()==True:
        	try:
        		percentile_sctptl=int(percentile_sctptl)
        	except:
        		print("unexpected input")
        		selectpercentile_err_lst.append("percentile")

        else:
        	print("unexpected input")
        	selectpercentile_err_lst.append("percentile")


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        try:
        	sltprclstp= [t[0] for t in gbl_pl].index("selectpercentile_gb")
        	gbl_pl.pop(sltprclstp)

        except:
        	pass

        try:

            gbl_pl.append(("selectpercentile_gb",
            SelectPercentile(score_func=function_sctptl_val,
            percentile=(percentile_sctptl)
            )
        	))
            print(gbl_pl)
            global sctptlql
            sctptlql=Pipeline((gbl_pl))

            global scaled_sctptlql_df
            scaled_sctptlql_df=sctptlql.fit_transform(X_train)
            global scaled_sctptlql_tst_df
            scaled_sctptlql_tst_df=sctptlql.transform(X_test)

        except Exception as e:
            print(e)
            selectpercentile_err_lst.append("fit_failed")


        if len(selectpercentile_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("selectpercentile")


    def  chi2_sctptl(self):
    	global function_sctptl_val
    	function_sctptl_val=chi2

    def  f_classif_sctptl(self):
    	global function_sctptl_val
    	function_sctptl_val=f_classif

    def  mutual_info_classif_sctptl(self):
    	global function_sctptl_val
    	function_sctptl_val=mutual_info_classif


    def gusctact(self):

    	if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
    		self.gusctact_trgr()
    	elif "genericunivariateselect" in preprocessing_fit_status:
    		self.gusctact_trgr()
    	else:
    		pass

    def gusctact_trgr(self):

        try:
        	preprocessing_fit_status.remove("genericunivariateselect")
        except:
        	pass
        genericunivariateselect_err_lst=[]

        param_gusct=self.slr_gusct_wid.ids.param_gusct.text.replace(" ","")

        if "." in param_gusct and param_gusct.replace(".", "").replace("-","").isdigit()==True:
        	try:
        		param_gusct=float(param_gusct)
        	except:
        		print("unexpected input")
        		genericunivariateselect_err_lst.append("param_float")
        elif param_gusct.replace("-","").isdigit()==True:
        	try:
        		param_gusct=int(param_gusct)
        	except:
        		print("unexpected input")
        		genericunivariateselect_err_lst.append("param_int")
        else:
        	print("unexpected input")


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        try:
        	grncvtrstp= [t[0] for t in gbl_pl].index("genericunivariateselect_gb")
        	gbl_pl.pop(grncvtrstp)
        except:
        	pass

        try:

            gbl_pl.append(("genericunivariateselect_gb",
            GenericUnivariateSelect(
            function_gnusct_val,
            mode=(mode_gnusct_val),
            param=(param_gusct)
            )
        	))
            print(gbl_pl)
            global gnusctql
            gnusctql=Pipeline((gbl_pl))

            global scaled_gnusctql_df
            scaled_gnusctql_df=gnusctql.fit_transform(X_train)
            global scaled_gnusctql_tst_df
            scaled_gnusctql_tst_df=gnusctql.transform(X_test)

        except Exception as e:
        	print(e)
        	genericunivariateselect_err_lst.append("fit_failed")

        if len(genericunivariateselect_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("genericunivariateselect")


    def  chi2_gusct(self):
    	global function_gnusct_val
    	function_gnusct_val=chi2

    def  f_classif_gusct(self):
    	global function_gnusct_val
    	function_gnusct_val=f_classif

    def  mutual_info_classif_gusct(self):
    	global function_gnusct_val
    	function_gnusct_val=mutual_info_classif
    def percentile_gusct(self):
    	global mode_gnusct_val
    	mode_gnusct_val="percentile"

    def k_best_gusct(self):
    	global mode_gnusct_val
    	mode_gnusct_val="k_best"

    def fpr_gusct(self):
    	global mode_gnusct_val
    	mode_gnusct_val="fpr"

    def fdr_gusct(self):
    	global mode_gnusct_val
    	mode_gnusct_val="fdr"

    def fwe_gusct(self):
    	global mode_gnusct_val
    	mode_gnusct_val="fwe"


    def polyftact(self):

        try:
        	self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.polyftact_trgr()
        elif "polynomialfeatures" in preprocessing_fit_status:
        	self.polyftact_trgr()
        else:
        	self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"
    def polyftact_trgr(self):

        try:
        	preprocessing_fit_status.remove("polynomialfeatures")
        except:
        	pass
        polynomialfeatures_err_lst=[]

        degree_polyft=self.slr_polyft_wid.ids.degree_polyft.text.replace(" ","")

        if "," in degree_polyft and degree_polyft.replace(",","").replace("-","").isdigit()==True:
        	try:
        		degree_polyft=tuple(map(int,degree_polyft.split(',')))
        	except:
        		print("unexpected input")
        		polynomialfeatures_err_lst.append("degree_two")
        elif degree_polyft.replace("-","").isdigit()==True:
        	try:
        		degree_polyft=int(degree_polyft)
        	except:
        		print("unexpected input")
        		polynomialfeatures_err_lst.append("degree_one")
        else:
        	print("unexpected input")
        	polynomialfeatures_err_lst.append("degree")


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	polyftstp= [t[0] for t in gbl_pl].index('polynomialfeatures_gb')
        	gbl_pl.pop(polyftstp)

        except:
        	pass

        try:

            gbl_pl.append(('polynomialfeatures_gb',
            PolynomialFeatures(
            #error with degree (tuple)
            degree=(degree_polyft),
            interaction_only=interaction_only_polyft,
            include_bias=include_bias_polyft,
            order=order_polyft_val
            )
        	))
            print(gbl_pl)
            global polyftql
            polyftql=Pipeline((gbl_pl))

            global scaled_polyftql_df
            scaled_polyftql_df=polyftql.fit_transform(X_train)
            global scaled_polyftql_tst_df
            scaled_polyftql_tst_df=polyftql.transform(X_test)

        except  Exception as e:
        	print(e)
        	polynomialfeatures_err_lst.append("fit_failed")
        	self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

        if len(polynomialfeatures_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("polynomialfeatures")

    def interaction_only_polyft(self,checkbox,value):
       global interaction_only_polyft
       if value:
           interaction_only_polyft=True
       else:
           interaction_only_polyft=False

    def include_bias_polyft(self,checkbox,value):
       global include_bias_polyft
       if value:
           include_bias_polyft=True
       else:
           include_bias_polyft=False

    def C_polyft(self):

        if self.slr_polyft_wid.ids.F_polyft_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_polyft_wid.ids.F_polyft_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_polyft_wid.ids.C_polyft_chk.md_bg_color=get_color_from_hex('808080')

        global order_polyft_val
        order_polyft_val="C"


    def F_polyft(self):

        if self.slr_polyft_wid.ids.C_polyft_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_polyft_wid.ids.C_polyft_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_polyft_wid.ids.F_polyft_chk.md_bg_color=get_color_from_hex('808080')

        global order_polyft_val
        order_polyft_val="F"

    def n_features_in_polyft(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(polyftql.named_steps['polynomialfeatures_gb'].n_features_in_)
    	    self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def powers_polyft(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(polyftql.named_steps['polynomialfeatures_gb'].powers_)
    	    self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]powers_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def feature_names_in_polyft(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(polyftql.named_steps['polynomialfeatures_gb'].feature_names_in_)
    	    self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def n_output_features_polyft(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(polyftql.named_steps['polynomialfeatures_gb'].n_output_features_)
    	    self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_output_features_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_polyft_wid.ids.out_grid_slr_polyft_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def dtrzscer(self):

        try:
        	self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.dtrzscer_trgr()
        elif "kbinsdiscretizer" in preprocessing_fit_status:
        	self.dtrzscer_trgr()

        else:
            self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"

    def dtrzscer_trgr(self):


        try:
        	self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
        	preprocessing_fit_status.remove("kbinsdiscretizer")
        except:
        	pass
        kbinsdiscretizer_err_lst=[]

        global n_bins_dztr
        n_bins_dztr=self.slr_dztr_wid.ids.n_bins_dztr.text.replace(" ", "")

        if n_bins_dztr.replace("-","").isdigit()==True:
        	try:
        	    n_bins_dztr=int(n_bins_dztr)
        	except:
        		print("unexpected input")
        		kbinsdiscretizer_err_lst.append("n_bins")
        else:
        	print("unexpected input")
        	kbinsdiscretizer_err_lst.append("n_bins")

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	kbinsdtstp= [t[0] for t in gbl_pl].index('kbinsdiscretizer_gb')
        	gbl_pl.pop(kbinsdtstp)

        except:
        	pass

        try:

            gbl_pl.append(('kbinsdiscretizer_gb',
            KBinsDiscretizer(
            n_bins=(n_bins_dztr),
            encode=enc_dzt,
            strategy=stg_dzt,
            #dtype=dtyp_dzt
            )
        	))
            print(gbl_pl)
            global dtzql
            dtzql=Pipeline((gbl_pl))

            global scaled_dtzql_df
            scaled_dtzql_df=dtzql.fit_transform(X_train)
            global scaled_dtzql_tst_df
            scaled_dtzql_tst_df=dtzql.transform(X_test)

        except Exception as e:
        	print(e)
        	kbinsdiscretizer_err_lst.append("fit_failed")
        	self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

        if len(kbinsdiscretizer_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("kbinsdiscretizer")


    def bin_edges_dtrz(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(dtzql.named_steps['kbinsdiscretizer_gb'].bin_edges_)
    	    self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]bin_edges_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def n_bins_dtrz(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(dtzql.named_steps['kbinsdiscretizer_gb'].n_bins_)
    	    self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_bins_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def n_features_in_dtrz(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(dtzql.named_steps['kbinsdiscretizer_gb'].n_features_in_)
    	    self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def feature_names_in_dtrz(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(dtzql.named_steps['kbinsdiscretizer_gb'].feature_names_in_)
    	    self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_dztr_wid.ids.out_grid_slr_dztr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)

        except:
        	pass

###

    def onehot_dtzr(self):

        if self.slr_dztr_wid.ids.onehot_dense_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.onehot_dense_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_dztr_wid.ids.ordinal_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.ordinal_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_dztr_wid.ids.onehot_dtzr_chk.md_bg_color=get_color_from_hex('808080')

        global enc_dzt
        enc_dzt='onehot'

    def onehot_dense_dtzr(self):

        if self.slr_dztr_wid.ids.onehot_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.onehot_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_dztr_wid.ids.ordinal_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.ordinal_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_dztr_wid.ids.onehot_dense_dtzr_chk.md_bg_color=get_color_from_hex('808080')

        global enc_dzt
        enc_dzt='onehot-dense'

    def ordinal_dtzr(self):

        if self.slr_dztr_wid.ids.onehot_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.onehot_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_dztr_wid.ids.onehot_dense_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.onehot_dense_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_dztr_wid.ids.ordinal_dtzr_chk.md_bg_color=get_color_from_hex('808080')

        global enc_dzt
        enc_dzt='ordinal'

 #####

    def uniform_dtzr(self):

        if self.slr_dztr_wid.ids.quantile_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.quantile_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_dztr_wid.ids.kmeans_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.kmeans_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_dztr_wid.ids.uniform_dtzr_chk.md_bg_color=get_color_from_hex('808080')

        global stg_dzt
        stg_dzt='uniform'

    def quantile_dtzr(self):

        if self.slr_dztr_wid.ids.uniform_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.uniform_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_dztr_wid.ids.kmeans_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.kmeans_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_dztr_wid.ids.quantile_dtzr_chk.md_bg_color=get_color_from_hex('808080')

        global stg_dzt
        stg_dzt='quantile'

    def kmeans_dtzr(self):


        if self.slr_dztr_wid.ids.uniform_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.uniform_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_dztr_wid.ids.quantile_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.quantile_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_dztr_wid.ids.kmeans_dtzr_chk.md_bg_color=get_color_from_hex('808080')

        global stg_dzt
        stg_dzt='kmeans'

####

    def float32_dtzr(self):

        if self.slr_dztr_wid.ids.float64_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.float64_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_dztr_wid.ids.None_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.None_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_dztr_wid.ids.float32_dtzr_chk.md_bg_color=get_color_from_hex('808080')

        global dtyp_dzt
        dtyp_dzt=np.float32

    def float64_dtzr(self):

        if self.slr_dztr_wid.ids.float32_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.float32_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_dztr_wid.ids.None_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.None_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_dztr_wid.ids.float64_dtzr_chk.md_bg_color=get_color_from_hex('808080')

        global dtyp_dzt
        dtyp_dzt=np.float64

    def None_dtzr(self):

        if self.slr_dztr_wid.ids.float32_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.float32_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_dztr_wid.ids.float64_dtzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_dztr_wid.ids.float64_dtzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_dztr_wid.ids.None_dtzr_chk.md_bg_color=get_color_from_hex('808080')

        global dtyp_dzt
        dtyp_dzt=None

    def pwrtrsc(self):

 ###
        try:
        	self.slr_pwr_wid.ids.out_grid_slr_pwr_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.pwrtrsc_trgr()
        elif "powertransformer" in preprocessing_fit_status:
        	self.pwrtrsc_trgr()

        else:
        	self.slr_pwr_wid.ids.out_grid_slr_pwr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"


    def pwrtrsc_trgr(self):

        try:
        	preprocessing_fit_status.remove("powertransformer")
        except:
        	pass
        powertransformer_err_lst=[]


 ###
        try:
        	self.slr_pwr_wid.ids.out_grid_slr_pwr_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_pwr_wid.ids.out_grid_slr_pwr_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	trnsfnrstp= [t[0] for t in gbl_pl].index('power_transformer_gb')
        	gbl_pl.pop(trnsfnrstp)
        except:
        	pass

        try:

            gbl_pl.append(('power_transformer_gb',
            PowerTransformer(
            method=metd_pwr,
            standardize=stabdarpwr,
            copy=coppwwr)
        	))
            print(gbl_pl)
            global pwrteql
            pwrteql=Pipeline((gbl_pl))

            global scaled_pwr_df
            scaled_pwr_df=pwrteql.fit_transform(X_train)
            global scaled_pwr_tst_df
            scaled_pwr_tst_df=pwrteql.transform(X_test)

        except Exception as e:
        	print(e)
        	powertransformer_err_lst.append("fit_failed")
        	self.slr_pwr_wid.ids.out_grid_slr_pwr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

        if len(powertransformer_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("powertransformer")

    def kdeplot_pwr(self):


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        pwr_viz_err=[]

        if "scaled_pwr_df" and "scaled_pwr_tst_df" in globals():
        	try:
        		scaled_pwr_df_nw=pd.DataFrame(scaled_pwr_df, columns = X.columns)
        		plt.figure()
        		axkdepwrplosnd=sns.kdeplot(
        		data=scaled_pwr_df_nw,
        		palette="magma_r")
        		axkdepwrplosnd.xaxis.label.set_color('white')
        		axkdepwrplosnd.yaxis.label.set_color('white')

        		axkdepwrplosnd.spines['bottom'].set_color('white')
        		axkdepwrplosnd.spines['top'].set_color('white')
        		axkdepwrplosnd.spines['right'].set_color('white')
        		axkdepwrplosnd.spines['left'].set_color('white')
        		axkdepwrplosnd.xaxis.label.set_color('white')
        		axkdepwrplosnd.yaxis.label.set_color('white')
        		axkdepwrplosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_pwr_1",transparent=True)

        	except Exception as e:
        		print(e)
        		pwr_viz_err.append("error1")

        	try:
        		scaled_pwr_tst_df_nw= pd.DataFrame(scaled_pwr_tst_df, columns = X.columns)
        		plt.figure()
        		axkdepwr2plosnd=sns.kdeplot(
        		data=scaled_pwr_tst_df_nw,
        		palette="magma_r")

        		axkdepwr2plosnd.spines['bottom'].set_color('white')
        		axkdepwr2plosnd.spines['top'].set_color('white')
        		axkdepwr2plosnd.spines['right'].set_color('white')
        		axkdepwr2plosnd.spines['left'].set_color('white')
        		axkdepwr2plosnd.xaxis.label.set_color('white')
        		axkdepwr2plosnd.yaxis.label.set_color('white')
        		axkdepwr2plosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_pwr_2",transparent=True)

        	except Exception as e:
        		print(e)
        		pwr_viz_err.append("error2")
        else:
        	pass
        if len(pwr_viz_err)==0 and "scaled_pwr_df" in globals():

        	try:

          	  slr_pwr_wid_vis=Factory.slr_pwr_wid_vis()
          	  slr_pwr_wid_vis.remove = lambda: self.slr_pwr_wid.remove_widget(slr_pwr_wid_vis)
          	  self.pwr_image=(Image(source="C:/Arc-Plots/kdeplot_pwr_1.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.pwr_image.reload()
          	  slr_pwr_wid_vis.ids.pwr_vis_grd.add_widget(self.pwr_image)

          	  self.pwr_image_2=(Image(source="C:/Arc-Plots/kdeplot_pwr_2.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.pwr_image_2.reload()
          	  slr_pwr_wid_vis.ids.pwr_vis_grd.add_widget(self.pwr_image_2)

          	  self.slr_pwr_wid.add_widget(slr_pwr_wid_vis)

        	except Exception as e:
        		print(e)
        else:
        	pass

    def lambdas_pwrttr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pwrteql.named_steps['power_transformer_gb'].lambdas_)
    	    self.slr_pwr_wid.ids.out_grid_slr_pwr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]lambdas_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pwr_wid.ids.out_grid_slr_pwr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass



    def standardize_pwrtr(self,checkbox,value):
       global stabdarpwr
       if value:
           stabdarpwr=True
       else:
           stabdarpwr=False

    def cpy_pwrtr(self,checkbox,value):
       global coppwwr
       if value:
           coppwwr=True
       else:
           coppwwr=False

    def yeo_pwttr(self):

        if self.slr_pwr_wid.ids.box_pwttr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pwr_wid.ids.box_pwttr_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_pwr_wid.ids.yeo_pwttr_chk.md_bg_color=get_color_from_hex('808080')

        global metd_pwr
        metd_pwr="yeo-johnson"

    def box_pwttr(self):

        if self.slr_pwr_wid.ids.yeo_pwttr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pwr_wid.ids.yeo_pwttr_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_pwr_wid.ids.box_pwttr_chk.md_bg_color=get_color_from_hex('808080')

        global metd_pwr
        metd_pwr="box-cox"

    def whiten_incpca(self,checkbox,value):
       global wtnincpaa
       if value:
           wtnincpaa=True
       else:
           wtnincpaa=False

    def copy_incpca(self,checkbox,value):
       global cpyincpaa
       if value:
           cpyincpaa=True
       else:
           cpyincpaa=False


    def incpcadcmpt(self):

        try:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.incpcadcmpt_trgr()
        elif "incpca" in preprocessing_fit_status:
        	self.incpcadcmpt_trgr()
        else:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"


    def incpcadcmpt_trgr(self):

        try:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        try:
        	preprocessing_fit_status.remove("incpca")
        except:
        	pass
        incpca_err_lst=[]

        global n_components_incpca
        n_components_incpca=self.slr_incpca_wid.ids.n_components_incpca.text.replace(" ", "")
        global batch_size_incpca
        batch_size_incpca=self.slr_incpca_wid.ids.batch_size_incpca.text.replace(" ", "")

        if n_components_incpca=="None":
        	n_components_incpca=None
        elif n_components_incpca.replace("-","").isdigit()==True:
        	try:
        		n_components_incpca=int(n_components_incpca)
        	except:
        		print("unexpected input")
        		incpca_err_lst.append("n_components")
        else:
        	print("unexpected input")
        	incpca_err_lst.append("n_components")

        if batch_size_incpca.replace("-","").isdigit()==True:

        	try:
        		batch_size_incpca=int(batch_size_incpca)
        	except:
        		print("unexpected input")
        		incpca_err_lst.append("batch_size")

        elif batch_size_incpca=="None":
        	batch_size_incpca=None

        else:
        	print("unexpected input")
        	incpca_err_lst.append("batch_size")

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	incpacastp= [t[0] for t in gbl_pl].index('incpca_gb')
        	gbl_pl.pop(incpacastp)
        except:
        	pass

        try:
    	    gbl_pl.append(('incpca_gb',
            IncrementalPCA(
            n_components=(n_components_incpca),
            whiten=wtnincpaa,
            copy=cpyincpaa,
            batch_size=(batch_size_incpca))
        	))
    	    print(gbl_pl)
    	    global pincpq
    	    pincpq=Pipeline((gbl_pl))

    	    global scaled_pca_df
    	    scaled_pca_df=pincpq.fit_transform(X_train)
    	    global scaled_pca_tst_df
    	    scaled_pca_tst_df=pincpq.transform(X_test)

        except Exception as e:
        	print(e)
        	incpca_err_lst.append("fit_failed")
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

        if len(incpca_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("incpca")

    def components_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].components_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]components_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def explained_variance_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].explained_variance_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]explained_variance_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def explained_variance_ratio_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].explained_variance_ratio_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]explained_variance_ratio_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def singular_values_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].singular_values_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]singular_values_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def mean_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].mean_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]mean_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def var_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].var_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]var_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def noise_variance_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].noise_variance_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]noise_variance_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def n_components_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].n_components_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_components_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def n_samples_seen_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].n_samples_seen_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_samples_seen_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def batch_size_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].batch_size_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]batch_size_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def n_features_in_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].n_features_in_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def feature_names_in_incpcat(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pincpq.named_steps['incpca_gb'].feature_names_in_)
    	    self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_incpca_wid.ids.out_grid_slr_incpca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def dcancltng(self):

    	if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
    		self.dcancltng_trgr()
    	elif "dbscan" in preprocessing_fit_status:
    		self.dcancltng_trgr()
    	else:
    		pass

    def dcancltng_trgr(self):

        try:
        	preprocessing_fit_status.remove("dbscan")
        except:
        	pass
        dbscan_err_lst=[]

        global eps_dcan
        eps_dcan=self.slr_dbscan_wid.ids.eps_dcan.text.replace(" ", "")
        global min_samples_dcan
        min_samples_dcan=self.slr_dbscan_wid.ids.min_samples_dcan.text.replace(" ", "")
        global metric_dcan
        metric_dcan=self.slr_dbscan_wid.ids.metric_dcan.text.replace(" ", "")
        global leaf_size_dcan
        leaf_size_dcan=self.slr_dbscan_wid.ids.leaf_size_dcan.text.replace(" ", "")
        global p_dcan
        p_dcan=self.slr_dbscan_wid.ids.p_dcan.text.replace(" ", "")
        global n_jobs_dcan
        n_jobs_dcan=self.slr_dbscan_wid.ids.n_jobs_dcan.text.replace(" ", "")

        if "." in eps_dcan and eps_dcan.replace("-","").replace(".","").isdigit()==True:
        	try:
        	    eps_dcan=float(eps_dcan)
        	except:
        		print("unexpected input")
        		dbscan_err_lst.append("eps")

        elif eps_dcan.replace("-","").isdigit()==True:
        	try:
        		eps_dcan=float(eps_dcan)
        	except:
        		print("unexpected input")
        		dbscan_err_lst.append("eps")
        else:
        	print("unexpected input")
        	dbscan_err_lst.append("eps")

        if min_samples_dcan.replace("-","").isdigit()==True:
        	try:
        		min_samples_dcan=int(min_samples_dcan)
        	except:
        		print("unexpected input")
        		dbscan_err_lst.append("min_samples")
        else:
        	print("unexpected input")
        	dbscan_err_lst.append("min_samples")

        if leaf_size_dcan.replace("-","").isdigit()==True:
        	try:
        		leaf_size_dcan=int(leaf_size_dcan)
        	except:
        		print("unexpected input")
        		dbscan_err_lst.append("leaf_size")
        else:
        	print("unexpected input")
        	dbscan_err_lst.append("leaf_size")

        if p_dcan=="None":
        	p_dcan=None
        elif "." in p_dcan and p_dcan.replace(".", "").replace("-","").isdigit()==True or p_dcan.replace("-","").isdigit():
        	try:
        		p_dcan=float(p_dcan)
        	except:
        		print("unexpected input")
        		dbscan_err_lst.append("p")

        else:
        	print("unexpected input")
        	dbscan_err_lst.append("p")

        if n_jobs_dcan=="None":
        	n_jobs_dcan=None
        elif n_jobs_dcan.replace("-","").isdigit()==True:
        	try:
        		n_jobs_dcan=int(n_jobs_dcan)
        	except:
        		print("unexpected input")
        		dbscan_err_lst.append("n_jobs")
        else:
        	print("unexpected input")
        	dbscan_err_lst.append("n_jobs")



        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        try:
        	dbscnstp= [t[0] for t in gbl_pl].index('dbscan_gb')
        	gbl_pl.pop(dbscnstp)
        except:
        	pass

        try:

            gbl_pl.append(('dbscan_gb',
    	    DBSCAN(
    	    eps=(eps_dcan),
    	    min_samples=(min_samples_dcan),
    	    metric=(metric_dcan),
    	    algorithm=(algrtm_dbcn),
    	    leaf_size=(leaf_size_dcan),
    	    p=(p_dcan),
    	    n_jobs=(n_jobs_dcan))
    	    ))
            print(gbl_pl)
            global dbscpq
            dbscpq=Pipeline((gbl_pl))

            global scaled_dbscpq_df
            scaled_dbscpq_df=dbscpq.fit(X_train)
            global scaled_dbscpq_tst_df
            scaled_dbscpq_tst_df=dbscpq.fit(X_test)


        except Exception as e:
        	print(e)
        	dbscan_err_lst.append("fit_failed")

        if len(dbscan_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("dbscan")


    def core_sample_indices_dcant(self):
    	try:
    	    print(dbscpq.named_steps['dbscan_gb'].core_sample_indices_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def components_dcant(self):
    	try:
    	    print(dbscpq.named_steps['dbscan_gb'].components_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def labels_dcant(self):
    	try:
    	    print(dbscpq.named_steps['dbscan_gb'].labels_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def n_features_in_dcant(self):
    	try:
    	    print(dbscpq.named_steps['dbscan_gb'].n_features_in_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def feature_names_in_dcant(self):
    	try:
    	    print(dbscpq.named_steps['dbscan_gb'].feature_names_in_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass


    def auto_dcan(self):
    	global algrtm_dbcn
    	algrtm_dbcn="auto"
    def ball_tree_dcan(self):
    	global algrtm_dbcn
    	algrtm_dbcn="ball_tree"

    def kd_tree_dcan(self):
    	global algrtm_dbcn
    	algrtm_dbcn="kd_tree"

    def brute_dcan(self):
    	global algrtm_dbcn
    	algrtm_dbcn="brute"


    def aggrcltring(self):

    	if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
    		self.aggrcltring_trgr()
    	elif "agglomerative" in preprocessing_fit_status:
    		self.aggrcltring_trgr()
    	else:
    		pass

    def aggrcltring_trgr(self):

        try:
        	preprocessing_fit_status.remove("agglomerative")
        except:
        	pass
        agglomerative_err_lst=[]

        global n_clusters_agmatvctr
        n_clusters_agmatvctr=self.slr_agmtcltr_wid.ids.n_clusters_agmatvctr.text.replace(" ", "")
        global distance_threshold_agmatvctr
        distance_threshold_agmatvctr=self.slr_agmtcltr_wid.ids.distance_threshold_agmatvctr.text.replace(" ", "")

        global compute_full_tree_agmatvctr
        compute_full_tree_agmatvctr=self.slr_agmtcltr_wid.ids.compute_full_tree_agmatvctr.text.replace(" ", "")

        if n_clusters_agmatvctr=="None":
        	n_clusters_agmatvctr=None
        elif n_clusters_agmatvctr.replace("-","").isdigit()==True:
        	try:
        		n_clusters_agmatvctr=int(n_clusters_agmatvctr)
        	except:
        		print("unexpected input")
        		agglomerative_err_lst.append("n_clusters")
        else:
        	print("unexpected input")
        	agglomerative_err_lst.append("n_clusters")

        if distance_threshold_agmatvctr=="None":

        	distance_threshold_agmatvctr=None
        elif "." in distance_threshold_agmatvctr and distance_threshold_agmatvctr.replace(".", "").replace("-","").isdigit()==True or distance_threshold_agmatvctr.replace("-","").isdigit():
        	try:
        		distance_threshold_agmatvctr=float(distance_threshold_agmatvctr)
        	except:
        		print("unexpected input")
        		agglomerative_err_lst.append("distance_thrsh")
        else:
        	print("unexpected input")
        	agglomerative_err_lst.append("distance_thrsh")

        if compute_full_tree_agmatvctr=="True":

        	compute_full_tree_agmatvctr=True
        elif compute_full_tree_agmatvctr=="False":

        	compute_full_tree_agmatvctr=False
        else:
        	pass


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        try:
        	agmtrstp= [t[0] for t in gbl_pl].index('agglomerative_gb')
        	gbl_pl.pop(agmtrstp)

        except:
        	pass

        try:
            gbl_pl.append(('agglomerative_gb',
            AgglomerativeClustering(
            n_clusters=(n_clusters_agmatvctr),
    	    affinity=(afntyag),
    	    #memory=,
    	    compute_full_tree=(compute_full_tree_agmatvctr),
    	    linkage=(lnkgag),
    	    distance_threshold=(distance_threshold_agmatvctr)
    	    #compute_distances=cmptdts)
            # ^ ver err
            )
        	))
            print(gbl_pl)
            global aggcrpq
            aggcrpq=Pipeline((gbl_pl))

            global scaled_aggcrpq_df
            scaled_aggcrpq_df=aggcrpq.fit(X_train)
            global scaled_aggcrpq_tst_df
            scaled_aggcrpq_tst_df=aggcrpq.fit(X_test)

        except Exception as e:
        	print(e)
        	agglomerative_err_lst.append("fit_failed")

        if len(agglomerative_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("agglomerative")

    def  n_clusters_agcr(self):
    	try:
    	    print(aggcrpq.named_steps['agglomerative_gb'].n_clusters_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def  n_clusters_agcr(self):
    	try:
    	    print(aggcrpq.named_steps['agglomerative_gb'].n_clusters_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def  labels_agcr(self):
    	try:
    	    print(aggcrpq.named_steps['agglomerative_gb'].labels_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def  n_leaves_agcr(self):
    	try:
    	    print(aggcrpq.named_steps['agglomerative_gb'].n_leaves_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def  n_connected_components_agcr(self):
    	try:
    	    print(aggcrpq.named_steps['agglomerative_gb'].n_connected_components_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def  n_features_in_agcr(self):
    	try:
    	    print(aggcrpq.named_steps['agglomerative_gb'].n_features_in_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def  feature_names_in_agcr(self):
    	try:
    	    print(aggcrpq.named_steps['agglomerative_gb'].feature_names_in_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def  children_agcr(self):
    	try:
    	    print(aggcrpq.named_steps['agglomerative_gb'].children_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def  distances_agcr(self):
    	try:
    	    print(aggcrpq.named_steps['agglomerative_gb'].distances_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass

    def euclidean_agmr(self):
        global afntyag
        afntyag="euclidean"

    def l1_agmr(self):
        global afntyag
        afntyag="l1"

    def l2_agmr(self):
        global afntyag
        afntyag="l2"

    def manhattan_agmr(self):
        global afntyag
        afntyag="manhattan"

    def cosine_agmr(self):
        global afntyag
        afntyag="cosine"

    def ward_agmr(self):
        global lnkgag
        lnkgag="ward"

    def complete_agmr(self):
        global lnkgag
        lnkgag="complete"

    def average_agmr(self):
        global lnkgag
        lnkgag="average"

    def single_agmr(self):
        global lnkgag
        lnkgag="single"

    def compute_distances_cls(self,checkbox,value):
        global cmptdts
        if value:
        	cmptdts=True
        else:
        	cmptdts=False

    def pcadcn(self):

        try:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()



        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.pcadcn_trgr()
        elif "pca" in preprocessing_fit_status:
        	self.pcadcn_trgr()

        else:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"


    def pcadcn_trgr(self):


        try:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
        	preprocessing_fit_status.remove("pca")
        except:
        	pass
        pca_err_lst=[]

        global n_components_pca
        n_components_pca=self.slr_pca_wid.ids.n_components_pca.text.replace(" ", "")
        global iterated_power_pca
        iterated_power_pca=self.slr_pca_wid.ids.iterated_power_pca.text.replace(" ", "")
        global tol_pca
        tol_pca=self.slr_pca_wid.ids.tol_pca.text.replace(" ", "")
        global random_state_pca
        random_state_pca=self.slr_pca_wid.ids.random_state_pca.text.replace(" ", "")

        if  n_components_pca=="None":
        	n_components_pca=None
        elif "." in n_components_pca and n_components_pca.replace(".", "").replace("-","").isdigit()==True:
        	try:
        		n_components_pca=float(n_components_pca)
        	except:
        		self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="n_components: unexpected input"
        		return

        elif n_components_pca.replace("-","").isdigit()==True:
        	try:
        		n_components_pca=int(n_components_pca)

        	except:
        		self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="n_components: unexpected input"
        		return

        elif n_components_pca.isalpha()==True:
        	n_components_pca=str(n_components_pca)
        else:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="n_components_pca: unexpected input"
        	return

        if  random_state_pca=="None":
        	random_state_pca=None
        elif random_state_pca.replace("-","").isdigit()==True:
        	try:
        		random_state_pca=int(random_state_pca)
        	except:
        		self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
        		return

        else:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
        	return

        if iterated_power_pca.isalpha()==True:
        	iterated_power_pca=str(iterated_power_pca)
        elif iterated_power_pca.replace("-","").isdigit()==True:
        	try:
        		iterated_power_pca=int(iterated_power_pca)
        	except:
        		self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="iterated_power: unexpected input"
        		return

        else:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="iterated_power: unexpected input"
        	return


        if "." in tol_pca and tol_pca.replace(".", "").replace("-","").isdigit()==True or tol_pca.replace("-","").isdigit()==True:

        	try:
        		tol_pca=float(tol_pca)
        	except:
        		self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="tol: unexpected input"
        		return

        else:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="tol: unexpected input"
        	return


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        try:
        	pcastp= [t[0] for t in gbl_pl].index('pca_gb')
        	gbl_pl.pop(pcastp)

        except:
        	pass

        try:
    	    gbl_pl.append(('pca_gb',
            PCA(
            n_components=(n_components_pca),
            copy=cppca,
            whiten=wtnpc,
            svd_solver=atpca,
            tol=(tol_pca),
            iterated_power=(iterated_power_pca),
            random_state=(random_state_pca))
        	))
    	    print(gbl_pl)
    	    global pcapq
    	    pcapq=Pipeline((gbl_pl))

    	    global scaled_pca_df
    	    scaled_pca_df=pcapq.fit_transform(X_train)
    	    global scaled_pca_tst_df
    	    scaled_pca_tst_df=pcapq.transform(X_test)

        except Exception as e:
     	   print(e)
     	   pca_err_lst.append("fit_failed")
     	   self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
     	   self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
     	   self.output_crd_err.ids.output_text_err.text=str(e)


        if len(pca_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("pca")


    def auto_pca_sv(self):

        if self.slr_pca_wid.ids.full_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.full_pca_sv_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_pca_wid.ids.arpack_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.arpack_pca_sv_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_pca_wid.ids.randomized_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.randomized_pca_sv_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_pca_wid.ids.auto_pca_sv_chk.md_bg_color=get_color_from_hex('808080')

        global atpca
        atpca="auto"

    def full_pca_sv(self):

        if self.slr_pca_wid.ids.auto_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.auto_pca_sv_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_pca_wid.ids.arpack_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.arpack_pca_sv_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_pca_wid.ids.randomized_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.randomized_pca_sv_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_pca_wid.ids.full_pca_sv_chk.md_bg_color=get_color_from_hex('808080')

        global atpca
        atpca="full"


    def arpack_pca_sv(self):

        if self.slr_pca_wid.ids.auto_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.auto_pca_sv_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_pca_wid.ids.full_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.full_pca_sv_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_pca_wid.ids.randomized_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.randomized_pca_sv_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_pca_wid.ids.arpack_pca_sv_chk.md_bg_color=get_color_from_hex('808080')

        global atpca
        atpca="arpack"

    def randomized_pca_sv(self):

        if self.slr_pca_wid.ids.auto_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.auto_pca_sv_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_pca_wid.ids.full_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.full_pca_sv_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_pca_wid.ids.arpack_pca_sv_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_pca_wid.ids.arpack_pca_sv_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_pca_wid.ids.randomized_pca_sv_chk.md_bg_color=get_color_from_hex('808080')

        global atpca
        atpca="randomized"


    def components_dpca(self):


        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].components_)
    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]components_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def explained_variance_dpca(self):



        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].explained_variance_)

    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]explained_variance_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def explained_variance_ratio_dpca(self):


        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].explained_variance_ratio_)

    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]explained_variance_ratio_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def singular_values_dpca(self):



        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].singular_values_)
    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]singular_values_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def mean_dpca(self):


        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].mean_)
    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]mean_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def n_components_dpca(self):


        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].n_components_)
    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_components_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def n_features_dpca(self):



        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].n_features_)
    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_features_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def n_samples_dpca(self):



        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].n_samples_)
    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_samples_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def noise_variance_dpca(self):



        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].noise_variance_)
    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]noise_variance_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def n_features_in_dpca(self):



        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].n_features_in_)
    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def feature_names_in_dpca(self):


###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(pcapq.named_steps['pca_gb'].feature_names_in_)
    	    self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_pca_wid.ids.out_grid_slr_pca_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def copy_pca(self,checkbox,value):

        global cppca
        if value:
        	cppca=True
        else:
        	cppca=False

    def whiten_pca(self,checkbox,value):

        global wtnpc
        if value:
        	wtnpc=True
        else:
        	wtnpc=False


    def stdrdsc(self):

        try:
        	self.slr_stad_wid.ids.out_grid_slr_stad_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.stdrdsc_trgr()
        elif "standardscaler" in preprocessing_fit_status:
        	self.stdrdsc_trgr()
        else:
        	self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"


    def stdrdsc_trgr(self):

        try:
        	preprocessing_fit_status.remove("standardscaler")
        except:
        	pass

        try:
        	self.slr_stad_wid.ids.out_grid_slr_stad_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        standardscaler_err_lst=[]


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        try:
        	stdslrstp= [t[0] for t in gbl_pl].index('standard_scaler_gb')
        	gbl_pl.pop(stdslrstp)

        except:
        	pass
        try:
            gbl_pl.append(('standard_scaler_gb',
        	StandardScaler(copy=cpystadscl,
        	with_mean=wthmenstadscl,
        	with_std=withstdscl)))
            print(gbl_pl)
            global gblpq
            gblpq=Pipeline((gbl_pl))

            global scaled_stad_df
            scaled_stad_df=gblpq.fit_transform(X_train)
            global scaled_stad_tst_df
            scaled_stad_tst_df=gblpq.transform(X_test)

        except Exception as e:
        	print(e)
        	standardscaler_err_lst.append("fit_failed")
        	self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)


        if len(standardscaler_err_lst)==0:
            pass
        else:
            preprocessing_fit_status.append("standardscaler")

    def kdeplot_stscl(self):


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        stad_viz_err=[]

        if "scaled_stad_df" and "scaled_stad_tst_df" in globals():
        	try:
        		scaled_stad_df_nw=pd.DataFrame(scaled_stad_df, columns = X.columns)
        		plt.figure()
        		axkdestadplosnd=sns.kdeplot(
        		data=scaled_stad_df_nw,
        		palette="magma_r")
        		axkdestadplosnd.xaxis.label.set_color('white')
        		axkdestadplosnd.yaxis.label.set_color('white')

        		axkdestadplosnd.spines['bottom'].set_color('white')
        		axkdestadplosnd.spines['top'].set_color('white')
        		axkdestadplosnd.spines['right'].set_color('white')
        		axkdestadplosnd.spines['left'].set_color('white')
        		axkdestadplosnd.xaxis.label.set_color('white')
        		axkdestadplosnd.yaxis.label.set_color('white')
        		axkdestadplosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_standardscaler_1",transparent=True)

        	except Exception as e:
        		print(e)
        		stad_viz_err.append("error1")

        	try:
        		scaled_stad_tst_df_nw= pd.DataFrame(scaled_stad_tst_df, columns = X.columns)
        		plt.figure()
        		axkdestad2plosnd=sns.kdeplot(
        		data=scaled_stad_tst_df_nw,
        		palette="magma_r")

        		axkdestad2plosnd.spines['bottom'].set_color('white')
        		axkdestad2plosnd.spines['top'].set_color('white')
        		axkdestad2plosnd.spines['right'].set_color('white')
        		axkdestad2plosnd.spines['left'].set_color('white')
        		axkdestad2plosnd.xaxis.label.set_color('white')
        		axkdestad2plosnd.yaxis.label.set_color('white')
        		axkdestad2plosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_standardscaler_2",transparent=True)

        	except Exception as e:
        		print(e)
        		stad_viz_err.append("error2")
        else:
        	pass
        if len(stad_viz_err)==0 and "scaled_stad_df" in globals():

        	try:

          	  slr_stad_wid_vis=Factory.slr_stad_wid_vis()
          	  slr_stad_wid_vis.remove = lambda: self.slr_stad_wid.remove_widget(slr_stad_wid_vis)
          	  self.stscl_image=(Image(source="C:/Arc-Plots/kdeplot_standardscaler_1.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.stscl_image.reload()
          	  slr_stad_wid_vis.ids.stscl_vis_grd.add_widget(self.stscl_image)

          	  self.stscl_image_2=(Image(source="C:/Arc-Plots/kdeplot_standardscaler_2.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.stscl_image_2.reload()
          	  slr_stad_wid_vis.ids.stscl_vis_grd.add_widget(self.stscl_image_2)

          	  self.slr_stad_wid.add_widget(slr_stad_wid_vis)

        	except Exception as e:
        		print(e)
        else:
        	pass


    def scale_stscl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(gblpq.named_steps['standard_scaler_gb'].scale_)
    	    self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]scale_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def mean_stscl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(gblpq.named_steps['standard_scaler_gb'].mean_)
    	    self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]mean_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def var_stscl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(gblpq.named_steps['standard_scaler_gb'].var_)
    	    self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]var_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def n_samples_seen_stscl(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(gblpq.named_steps['standard_scaler_gb'].n_samples_seen_)
    	    self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_samples_seen_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_stad_wid.ids.out_grid_slr_stad_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def normalizer_at(self):

        try:
        	self.slr_nlzr_wid.ids.out_grid_slr_nlzr_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.normalizer_at_trgr()
        elif "normalizer" in preprocessing_fit_status:
        	self.normalizer_at_trgr()
        else:
        	self.slr_nlzr_wid.ids.out_grid_slr_nlzr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"


    def  normalizer_at_trgr(self):

        try:
        	preprocessing_fit_status.remove("normalizer")
        except:
        	pass

        normalizer_err_lst=[]

        try:
        	self.slr_nlzr_wid.ids.out_grid_slr_nlzr_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_nlzr_wid.ids.out_grid_slr_nlzr_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        try:
        	nlzrslrstp= [t[0] for t in gbl_pl].index('normalizer_gb')
        	gbl_pl.pop(nlzrslrstp)

        except:
        	pass
        try:
            gbl_pl.append(('normalizer_gb',
        	Normalizer(norm=norm_nlzr_val,
        	copy=copy_nlzr_val)
        	))

            print(gbl_pl)
            global gblnlzr
            gblnlzr=Pipeline((gbl_pl))

            global scaled_nlzr_df
            scaled_nlzr_df=gblnlzr.fit_transform(X_train)
            global scaled_nlzr_tst_df
            scaled_nlzr_tst_df=gblnlzr.transform(X_test)

        except Exception as e:
        	print(e)
        	normalizer_err_lst.append("fit_failed")
        	self.slr_nlzr_wid.ids.out_grid_slr_nlzr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)


        if len(normalizer_err_lst)==0:
            pass
        else:
            preprocessing_fit_status.append("normalizer")


    def kdeplot_nrmlz(self):


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            return

        nlzr_viz_err=[]

        if "scaled_nlzr_df" and "scaled_nlzr_tst_df" in globals():
        	try:
        		scaled_nlzr_df_nw=pd.DataFrame(scaled_nlzr_df, columns = X.columns)
        		plt.figure()
        		axkdenlzrplosnd=sns.kdeplot(
        		data=scaled_nlzr_df_nw,
        		palette="magma_r")
        		axkdenlzrplosnd.xaxis.label.set_color('white')
        		axkdenlzrplosnd.yaxis.label.set_color('white')

        		axkdenlzrplosnd.spines['bottom'].set_color('white')
        		axkdenlzrplosnd.spines['top'].set_color('white')
        		axkdenlzrplosnd.spines['right'].set_color('white')
        		axkdenlzrplosnd.spines['left'].set_color('white')
        		axkdenlzrplosnd.xaxis.label.set_color('white')
        		axkdenlzrplosnd.yaxis.label.set_color('white')
        		axkdenlzrplosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_normalizer_1",transparent=True)

        	except Exception as e:
        		print(e)
        		nlzr_viz_err.append("error1")

        	try:
        		scaled_nlzr_tst_df_nw= pd.DataFrame(scaled_nlzr_tst_df, columns = X.columns)
        		plt.figure()
        		axkdenlzr2plosnd=sns.kdeplot(
        		data=scaled_nlzr_tst_df_nw,
        		palette="magma_r")

        		axkdenlzr2plosnd.spines['bottom'].set_color('white')
        		axkdenlzr2plosnd.spines['top'].set_color('white')
        		axkdenlzr2plosnd.spines['right'].set_color('white')
        		axkdenlzr2plosnd.spines['left'].set_color('white')
        		axkdenlzr2plosnd.xaxis.label.set_color('white')
        		axkdenlzr2plosnd.yaxis.label.set_color('white')
        		axkdenlzr2plosnd.tick_params(colors="white", which='both')
        		sns.despine()

        		plt.savefig("C:/Arc-Plots/kdeplot_normalizer_2",transparent=True)

        	except Exception as e:
        		print(e)
        		nlzr_viz_err.append("error2")
        else:
        	pass
        if len(nlzr_viz_err)==0 and "scaled_nlzr_df" in globals():

        	try:

          	  slr_nlzr_wid_vis=Factory.slr_nlzr_wid_vis()
          	  slr_nlzr_wid_vis.remove = lambda: self.slr_nlzr_wid.remove_widget(slr_nlzr_wid_vis)
          	  self.nrmlz_image=(Image(source="C:/Arc-Plots/kdeplot_normalizer_1.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.nrmlz_image.reload()
          	  slr_nlzr_wid_vis.ids.nrmlz_vis_grd.add_widget(self.nrmlz_image)

          	  self.nrmlz_image_2=(Image(source="C:/Arc-Plots/kdeplot_normalizer_2.png",size_hint=(1, None),allow_stretch=True,height=450))
          	  self.nrmlz_image_2.reload()
          	  slr_nlzr_wid_vis.ids.nrmlz_vis_grd.add_widget(self.nrmlz_image_2)

          	  self.slr_nlzr_wid.add_widget(slr_nlzr_wid_vis)

        	except Exception as e:
        		print(e)
        else:
        	pass

    def l1_nlzr(self):

        if self.slr_nlzr_wid.ids.l2_nlzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_nlzr_wid.ids.l2_nlzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_nlzr_wid.ids.max_nlzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_nlzr_wid.ids.max_nlzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_nlzr_wid.ids.l1_nlzr_chk.md_bg_color=get_color_from_hex('808080')

        global  norm_nlzr_val
        norm_nlzr_val="l1"

    def l2_nlzr(self):

        if self.slr_nlzr_wid.ids.l1_nlzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_nlzr_wid.ids.l1_nlzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_nlzr_wid.ids.max_nlzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_nlzr_wid.ids.max_nlzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_nlzr_wid.ids.l2_nlzr_chk.md_bg_color=get_color_from_hex('808080')

        global  norm_nlzr_val
        norm_nlzr_val="l2"

    def max_nlzr(self):

        if self.slr_nlzr_wid.ids.l1_nlzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_nlzr_wid.ids.l1_nlzr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_nlzr_wid.ids.l2_nlzr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_nlzr_wid.ids.l2_nlzr_chk.md_bg_color=get_color_from_hex('323043')

        self.slr_nlzr_wid.ids.max_nlzr_chk.md_bg_color=get_color_from_hex('808080')

        global  norm_nlzr_val
        norm_nlzr_val="max"

    def copy_nlzr(self,checkbox,value):
    	global copy_nlzr_val
    	if value:
    		copy_nlzr_val=True
    	else:
    		copy_nlzr_val=False


    def n_features_in_nlzr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(gblnlzr.named_steps['normalizer_gb'].n_features_in_)
    	    self.slr_nlzr_wid.ids.out_grid_slr_nlzr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_nlzr_wid.ids.out_grid_slr_nlzr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def feature_names_in_nlzr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(gblnlzr.named_steps['normalizer_gb'].feature_names_in_)
    	    self.slr_nlzr_wid.ids.out_grid_slr_nlzr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_nlzr_wid.ids.out_grid_slr_nlzr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass



    def ohecdract(self):

        try:
        	self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
        	self.ohecdract_trgr()
        elif "onehotencoder" in preprocessing_fit_status:
        	self.ohecdract_trgr()
        else:
        	self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="Data or Preprocessing step error"


    def ohecdract_trgr(self):

        try:
        	preprocessing_fit_status.remove("onehotencoder")
        except:
        	pass

        onehotencoder_err_lst=[]

        try:
        	self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return

        try:
        	ohecdrimpstp= [t[0] for t in gbl_pl].index('onehotencoder_gb')
        	gbl_pl.pop(ohecdrimpstp)

        except:
        	pass

        try:

        	gbl_pl.append(('onehotencoder_gb',
            OneHotEncoder(
            drop=drop_ohecdr_val,
            sparse=sparse_ohecdr_val,
            handle_unknown=handle_unknown_ohecdr_val)
        	)
        	)
        	print(gbl_pl)
        	global ohecdrql
        	ohecdrql=Pipeline((gbl_pl))

        	global scaled_ohecdrql_df
        	scaled_ohecdrql_df=ohecdrql.fit_transform(X_train)
        	global scaled_ohecdrql_tst_df
        	scaled_ohecdrql_tst_df=ohecdrql.transform(X_test)

        except Exception as e:
        	print(e)
        	onehotencoder_err_lst.append("fit_failed")
        	self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)


        if len(onehotencoder_err_lst)==0:
        	pass
        else:
        	preprocessing_fit_status.append("onehotencoder")

    def first_ohecdr(self):

        if self.slr_ohecdr_wid.ids.if_binary_ohecdr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_ohecdr_wid.ids.if_binary_ohecdr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_ohecdr_wid.ids.None_ohecdr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_ohecdr_wid.ids.None_ohecdr_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_ohecdr_wid.ids.first_ohecdr_chk.md_bg_color=get_color_from_hex('808080')
        global drop_ohecdr_val
        drop_ohecdr_val="first"

    def if_binary_ohecdr(self):

        if self.slr_ohecdr_wid.ids.first_ohecdr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_ohecdr_wid.ids.first_ohecdr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_ohecdr_wid.ids.None_ohecdr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_ohecdr_wid.ids.None_ohecdr_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_ohecdr_wid.ids.if_binary_ohecdr_chk.md_bg_color=get_color_from_hex('808080')

        global drop_ohecdr_val
        drop_ohecdr_val="if_binary"

    def  None_ohecdr(self):

        if self.slr_ohecdr_wid.ids.first_ohecdr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_ohecdr_wid.ids.first_ohecdr_chk.md_bg_color=get_color_from_hex('323043')

        if self.slr_ohecdr_wid.ids.if_binary_ohecdr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_ohecdr_wid.ids.if_binary_ohecdr_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_ohecdr_wid.ids.None_ohecdr_chk.md_bg_color=get_color_from_hex('808080')

        global drop_ohecdr_val
        drop_ohecdr_val=None

    #####

    def error_ohecdr(self):

        if self.slr_ohecdr_wid.ids.ignore_ohecdr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_ohecdr_wid.ids.ignore_ohecdr_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_ohecdr_wid.ids.error_ohecdr_chk.md_bg_color=get_color_from_hex('808080')

        global handle_unknown_ohecdr_val
        handle_unknown_ohecdr_val="error"

    def ignore_ohecdr(self):

        if self.slr_ohecdr_wid.ids.error_ohecdr_chk.md_bg_color==get_color_from_hex('808080'):
        	self.slr_ohecdr_wid.ids.error_ohecdr_chk.md_bg_color=get_color_from_hex('323043')
        self.slr_ohecdr_wid.ids.ignore_ohecdr_chk.md_bg_color=get_color_from_hex('808080')

        global handle_unknown_ohecdr_val
        handle_unknown_ohecdr_val="ignore"

    def sparse_ohecdr(self,checkbox,value):
    	global sparse_ohecdr_val
    	if value:
    		sparse_ohecdr_val=True
    	else:
    		sparse_ohecdr_val=False

    def categories_ohecdr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(ohecdrql.named_steps['onehotencoder_gb'].categories_)
    	    self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]categories_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass

    def drop_idx_ohecdr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(ohecdrql.named_steps['onehotencoder_gb'].drop_idx_)
    	    self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]drop_idx_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd_err)
           	#self.outrput_crd_err.ids.output_text_err_heading.text="[b]Error"
        	#self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def n_features_in_ohecdr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(ohecdrql.named_steps['onehotencoder_gb'].n_features_in_)
    	    self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass



    def feature_names_in_ohecdr(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        try:
    	    val=(ohecdrql.named_steps['onehotencoder_gb'].feature_names_in_)
    	    self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd)
    	    self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
    	    self.output_crd.ids.output_text.text=str(val)

        except AttributeError as a:
        	self.slr_ohecdr_wid.ids.out_grid_slr_ohecdr_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(a)
        except:
        	pass


    def lblbinzr(self):

    	if len(gnrl_fit_status)==0 and len(preprocessing_fit_status)==0:
    		self.labelbinarizer_at_trgr()
    	elif "'labelbinarizer" in preprocessing_fit_status:
    		self.labelbinarizer_at_trgr()
    	else:
    		pass

    def  labelbinarizer_at_trgr(self):

    	try:
        	preprocessing_fit_status.remove("labelbinarizer")
    	except:
        	pass

    	neg_label_lblbin=self.slr_lblbin_wid.ids.neg_label_lblbin.text.replace(" ","")

    	if neg_label_lblbin.replace("-","").isdigit()==True:
        	try:
        		neg_label_lblbin=int(neg_label_lblbin)
        	except:
        		print("unexpected input")
    	else:
        	print("unexpected input")

    	pos_label_lblbin=self.slr_lblbin_wid.ids.pos_label_lblbin.text.replace(" ","")

    	if pos_label_lblbin.replace("-","").isdigit()==True:
        	try:
        		pos_label_lblbin=int(pos_label_lblbin)
        	except:
        		print("unexpected input")
    	else:
        	print("unexpected input")


    	labelbinarizer_err_lst=[]
    	X = DATA.drop([tgt], axis = 'columns')
    	y = DATA[tgt].values

    	X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	try:
        	lblbinslrstp= [t[0] for t in gbl_pl].index('labelbinarizer_gb')
        	gbl_pl.pop(lblbinslrstp)

    	except:
        	pass
    	try:
            gbl_pl.append(('labelbinarizer_gb',
            LabelBinarizer(
            neg_label=(neg_label_lblbin),
            pos_label=(pos_label_lblbin),
            sparse_output=sparse_output_lblbin_val)
        	))

            print(gbl_pl)
            global gbllblbin
            gbllblbin=Pipeline((gbl_pl))

            global scaled_lblbin_df
            scaled_lblbin_df=gbllblbin.fit_transform(y_train)
            global scaled_lblbin_tst_df
            scaled_lblbin_tst_df=gbllblbin.fit_transform(y_test)

    	except Exception as e:
        	print(e)
        	labelbinarizer_err_lst.append("fit_failed")

    	if len(labelbinarizer_err_lst)==0:
            pass
    	else:
            preprocessing_fit_status.append("labelbinarizer")

    def sparse_output_lblbin(self,checkbox,value):
    	global sparse_output_lblbin_val
    	if value:
    		sparse_output_lblbin_val=True
    	else:
    		sparse_output_lblbin_val=False


    def classes_lblbin(self):
    	try:
    	    print(gbllblbin.named_steps['labelbinarizer_gb'].classes_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass


    def y_type_lblbin(self):
    	try:
    	    print(gbllblbin.named_steps['labelbinarizer_gb'].y_type_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass


    def sparse_input_lblbin(self):
    	try:
    	    print(gbllblbin.named_steps['labelbinarizer_gb'].sparse_input_)
    	except AttributeError as a:
        	print(a)
    	except:
        	pass


    def auto_fill(self,checkbox,value):

        if value:

            self.root.ids.random.text='42'
            self.root.ids.test.text='0.25'
            self.root.ids.degree_txt.text='3'
            self.root.ids.cache_txt.text='200'
            self.root.ids.coef0_txt.text='0.0'
            self.root.ids.tol_txt.text='1e-3'
            self.root.ids.max_iter_txt.text='-1'
            self.root.ids.shrnk_chk.active=True
            self.root.ids.prob_chk.active=True
            self.root.ids.prob_chk.active=False
            self.root.ids.verbose_chk.active=True
            self.root.ids.verbose_chk.active=False
            self.root.ids.break_chk.active=True
            self.root.ids.break_chk.active=False

        else:

            self.root.ids.random.text=''
            self.root.ids.test.text=''
            self.root.ids.degree_txt.text=''
            self.root.ids.cache_txt.text=''
            self.root.ids.coef0_txt.text=''
            self.root.ids.tol_txt.text=''
            self.root.ids.max_iter_txt.text=''
            self.root.ids.shrnk_chk.active=False
            self.root.ids.prob_chk.active=True
            self.root.ids.prob_chk.active=False
            self.root.ids.verbose_chk.active=True
            self.root.ids.verbose_chk.active=False
            self.root.ids.break_chk.active=True
            self.root.ids.break_chk.active=False

    def  slr_cls(self,checkbox,value):

        if value:

            self.slr_stad=Factory.slr_stad()
            self.root.ids.scmodel_grid.add_widget(self.slr_stad)
            self.slr_min=Factory.slr_min()
            self.root.ids.scmodel_grid.add_widget(self.slr_min)
            self.slr_max=Factory.slr_max()
            self.root.ids.scmodel_grid.add_widget(self.slr_max)
            self.slr_rbst=Factory.slr_rbst()
            self.root.ids.scmodel_grid.add_widget(self.slr_rbst)
            self.slr_pwr=Factory.slr_pwr()
            self.root.ids.scmodel_grid.add_widget(self.slr_pwr)
            self.slr_qt=Factory.slr_qt()
            self.root.ids.scmodel_grid.add_widget(self.slr_qt)
            self.slr_nr=Factory.slr_nr()
            self.root.ids.scmodel_grid.add_widget(self.slr_nr)

        else:
            self.root.ids.scmodel_grid.clear_widgets()

    def  enc_cls(self,checkbox,value):

        if value:
            self.enc_lbl=Factory.enc_lbl()
            self.root.ids.enc_grid.add_widget(self.enc_lbl)
            self.enc_one=Factory.enc_one()
            self.root.ids.enc_grid.add_widget(self.enc_one)
            self.enc_ord=Factory.enc_ord()
            self.root.ids.enc_grid.add_widget(self.enc_ord)

        else:
            self.root.ids.enc_grid.clear_widgets()

    def  sm_cls(self):

        if self.root.ids.sm_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.sm_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.sm_cls_chk.text_color=get_color_from_hex('000000')
            self.svm_model=Factory.svm_model()
            self.root.ids.model_grid.add_widget(self.svm_model)
            self.svm_model.opacity=0.5
            anim = Animation(opacity=1,duration=0.7)
            anim.start(self.svm_model)

            self.svm_model.ids.shrnk_chk.active=True
            self.svm_model.ids.prob_chk.active=True
            self.svm_model.ids.prob_chk.active=False
            self.svm_model.ids.verbose_chk.active=True
            self.svm_model.ids.verbose_chk.active=False
            self.svm_model.ids.break_chk.active=True
            self.svm_model.ids.break_chk.active=False

            self.rbf_1()
            self.scale_1()
            self.ovr_svc_act()


        else:
            self.root.ids.sm_cls_chk.md_bg_color = get_color_from_hex('323043')
            self.root.ids.sm_cls_chk.text_color = get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.svm_model)
            grid_params_svm.clear()

    def  log_cls(self):

        if self.root.ids.log_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.log_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.log_cls_chk.text_color=get_color_from_hex('000000')
            self.model_log=Factory.model_log()
            self.root.ids.model_grid.add_widget(self.model_log)
            self.l2_lgr()
            self.lbf_lgr()
            self.auto_lgr()
            self.model_log.ids.dual_lgr_chk.active=True
            self.model_log.ids.dual_lgr_chk.active=False
            self.model_log.ids.fit_intercept_lgr_chk.active=True
            self.model_log.ids.warm_lgr_chk.active=True
            self.model_log.ids.warm_lgr_chk.active=False

        else:
            self.root.ids.log_cls_chk.md_bg_color=get_color_from_hex('323043')
            self.root.ids.log_cls_chk.text_color=get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.model_log)
            grid_params_logreg.clear()

    def  knn_cls(self):

        if self.root.ids.knn_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.knn_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.knn_cls_chk.text_color=get_color_from_hex('000000')

            self.model_knn=Factory.model_knn()
            self.root.ids.model_grid.add_widget(self.model_knn)
            self.uniform_knb()
            self.auto_knb()

        else:
            self.root.ids.knn_cls_chk.md_bg_color = get_color_from_hex('323043')
            self.root.ids.knn_cls_chk.text_color = get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.model_knn)
            grid_params_knn.clear()

    def  nu_cls(self):

        if self.root.ids.nu_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.nu_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.nu_cls_chk.text_color=get_color_from_hex('000000')
            self.nu_model=Factory.nu_model()
            self.root.ids.model_grid.add_widget(self.nu_model)
            self.rbf_nusvcls()
            self.scale_nusvcls()
            self.ovr_nusvcls()
            self.nu_model.ids.shrnk_chk_nu.active=True
            self.nu_model.ids.prob_chk_nu.active=True
            self.nu_model.ids.prob_chk_nu.active=False
            self.nu_model.ids.verbose_chk_nu.active=True
            self.nu_model.ids.verbose_chk_nu.active=False
            self.nu_model.ids.break_chk_nu.active=True
            self.nu_model.ids.break_chk_nu.active=False

        else:
            self.root.ids.nu_cls_chk.md_bg_color = get_color_from_hex('323043')
            self.root.ids.nu_cls_chk.text_color = get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.nu_model)
            grid_params_nusvc.clear()


    def  lsvm_cls(self):

        if self.root.ids.lsvm_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.lsvm_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.lsvm_cls_chk.text_color=get_color_from_hex('000000')
            self.model_linear_svc=Factory.model_linear_svc()
            self.root.ids.model_grid.add_widget(self.model_linear_svc)
            self.l2_ld()
            self.squared_hinge_ld()
            self.ovr_ld()
            self.model_linear_svc.ids.dual_ld_chk.active=True
            self.model_linear_svc.ids.fit_ld_chk.active=True

        else:
            self.root.ids.lsvm_cls_chk.md_bg_color = get_color_from_hex('323043')
            self.root.ids.lsvm_cls_chk.text_color = get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.model_linear_svc)
            grid_params_lsvc.clear()



    def  rdmfc_cls(self):

        if self.root.ids.rdmfc_cls_chk.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.rdmfc_cls_chk.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.rdmfc_cls_chk.text_color = get_color_from_hex('000000')
            self.model_random_forest=Factory.model_random_forest()
            self.root.ids.model_grid.add_widget(self.model_random_forest)
            self.model_random_forest.ids.bootstrap_rdfc_chk.active=True
            self.model_random_forest.ids.warm_start_rdfc_chk.active=True
            self.model_random_forest.ids.warm_start_rdfc_chk.active=False
            self.model_random_forest.ids.oob_score_rdfc_chk.active=True
            self.model_random_forest.ids.oob_score_rdfc_chk.active=False
            self.gini_rdfc()
            self.None_rdfc()

        else:
            self.root.ids.rdmfc_cls_chk.md_bg_color=get_color_from_hex('323043')
            self.root.ids.rdmfc_cls_chk.text_color=get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.model_random_forest)
            grid_params_rdfc.clear()

    def  sgd_cls(self):

        if self.root.ids.sgd_cls_chk.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.sgd_cls_chk.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.sgd_cls_chk.text_color = get_color_from_hex('000000')
            self.model_sgd=Factory.model_sgd()
            self.root.ids.model_grid.add_widget(self.model_sgd)
            self.model_sgd.ids.fit_intercept_sgdc_chk.active=True
            self.model_sgd.ids.shuffle_sgdc_chk.active=True
            self.model_sgd.ids.early_stopping_sgdc_chk.active=True
            self.model_sgd.ids.early_stopping_sgdc_chk.active=False
            self.model_sgd.ids.warm_start_sgdc_chk.active=True
            self.model_sgd.ids.warm_start_sgdc_chk.active=False
            self.hinge_sgdc()
            self.l2_sgdc()
            self.None_sgdc()

        else:
            self.root.ids.sgd_cls_chk.md_bg_color=get_color_from_hex('323043')
            self.root.ids.sgd_cls_chk.text_color=get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.model_sgd)
            grid_params_sgdc.clear()

    def  ganb_cls(self):

        if self.root.ids.ganb_cls_chk.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.ganb_cls_chk.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.ganb_cls_chk.text_color = get_color_from_hex('000000')
            self.ganb_model=Factory.ganb_model()
            self.root.ids.model_grid.add_widget(self.ganb_model)
        else:
            self.root.ids.ganb_cls_chk.md_bg_color=get_color_from_hex('323043')
            self.root.ids.ganb_cls_chk.text_color=get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.ganb_model)
            grid_params_ganb.clear()

    def  rdgcl_cls(self):

        if self.root.ids.rdgcl_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.rdgcl_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.rdgcl_cls_chk.text_color=get_color_from_hex('000000')
            self.rdgcl_model=Factory.rdgcl_model()
            self.root.ids.model_grid.add_widget(self.rdgcl_model)
            self.rdgcl_model.ids.fit_intercept_chk_rdgcl.active=True
            self.rdgcl_model.ids.positive_chk_rdgcl.active=True
            self.rdgcl_model.ids.positive_chk_rdgcl.active=False
            self.rdgcl_model.ids.copy_X_chk_rdgcl.active=True
            self.auto_rdgcl()

        else:

            self.root.ids.rdgcl_cls_chk.md_bg_color = get_color_from_hex('323043')
            self.root.ids.rdgcl_cls_chk.text_color = get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.rdgcl_model)
            grid_params_rdgcl.clear()

    def  nrctc_cls(self):

        if self.root.ids.nrctc_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.nrctc_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.nrctc_cls_chk.text_color=get_color_from_hex('000000')

            self.nrctc_model=Factory.nrctc_model()
            self.root.ids.model_grid.add_widget(self.nrctc_model)

        else:

            self.root.ids.nrctc_cls_chk.md_bg_color = get_color_from_hex('323043')
            self.root.ids.nrctc_cls_chk.text_color = get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.nrctc_model)
            grid_params_nrctc.clear()

    def  onesvm_cls(self,checkbox,value):

        if value:

            self.onesvm_model=Factory.onesvm_model()
            self.root.ids.model_grid.add_widget(self.onesvm_model)
            self.rbf_onesvm()
            self.scale_onesvm()
            self.onesvm_model.ids.verbose_chk_onesvm.active=True
            self.onesvm_model.ids.verbose_chk_onesvm.active=False
            self.onesvm_model.ids.shrinking_chk_onesvm.active=True

        else:
            self.root.ids.model_grid.remove_widget(self.onesvm_model)
            grid_params_onesvm.clear()


    def  conb_cls(self):

        if self.root.ids.conb_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.conb_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.conb_cls_chk.text_color=get_color_from_hex('000000')
            self.conb_model=Factory.conb_model()
            self.root.ids.model_grid.add_widget(self.conb_model)
            self.conb_model.ids.norm_conb_chk.active=True
            self.conb_model.ids.norm_conb_chk.active=False
            self.conb_model.ids.fit_prior_conb_chk.active=True
        else:
            self.root.ids.conb_cls_chk.md_bg_color=get_color_from_hex('323043')
            self.root.ids.conb_cls_chk.text_color=get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.conb_model)
            grid_params_conb.clear()


    def bnnb_cls(self):

        if self.root.ids.bnnb_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.bnnb_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.bnnb_cls_chk.text_color=get_color_from_hex('000000')
            self.bnnb_model=Factory.bnnb_model()
            self.root.ids.model_grid.add_widget(self.bnnb_model)
            self.bnnb_model.ids.fit_prior_bnnb_chk.active=True

        else:
            self.root.ids.bnnb_cls_chk.md_bg_color=get_color_from_hex('323043')
            self.root.ids.bnnb_cls_chk.text_color=get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.bnnb_model)
            grid_params_bnnb.clear()


    def  gradient_cls(self):

        if self.root.ids.gradient_cls_chk.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.gradient_cls_chk.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.gradient_cls_chk.text_color = get_color_from_hex('000000')

            self.model_gradient_boosting=Factory.model_gradient_boosting()
            self.root.ids.model_grid.add_widget(self.model_gradient_boosting)
            self.model_gradient_boosting.ids.warm_start_grdc_chk.active=True
            self.model_gradient_boosting.ids.warm_start_grdc_chk.active=False
            self.deviance_grdc()
            self.friedman_mse_grdc()

        else:
            self.root.ids.gradient_cls_chk.md_bg_color = get_color_from_hex('323043')
            self.root.ids.gradient_cls_chk.text_color = get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.model_gradient_boosting)
            grid_params_grdc.clear()

    def  multinomial_nbc_cls(self):
        if self.root.ids.multinomial_nbc_cls_chk.md_bg_color==get_color_from_hex('323043'):
            self.root.ids.multinomial_nbc_cls_chk.md_bg_color=get_color_from_hex('ffffff')
            self.root.ids.multinomial_nbc_cls_chk.text_color=get_color_from_hex('000000')
            self.mnb_model=Factory.mnb_model()
            self.root.ids.model_grid.add_widget(self.mnb_model)
            self.mnb_model.ids.fit_prior_mnbc_chk.active=True
        else:
            self.root.ids.multinomial_nbc_cls_chk.md_bg_color=get_color_from_hex('323043')
            self.root.ids.multinomial_nbc_cls_chk.text_color=get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.mnb_model)
            grid_params_mnb.clear()

    def  dt_cls(self):

        if self.root.ids.dt_cls_chk.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.dt_cls_chk.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.dt_cls_chk.text_color = get_color_from_hex('000000')

            self.model_dt=Factory.model_dt()
            self.root.ids.model_grid.add_widget(self.model_dt)
            self.gini_dt()
            self.best_dt()

        else:
            self.root.ids.dt_cls_chk.md_bg_color=get_color_from_hex('323043')
            self.root.ids.dt_cls_chk.text_color=get_color_from_hex('ffffff')
            self.root.ids.model_grid.remove_widget(self.model_dt)
            grid_params_dtre.clear()


    def si_cls(self):

        if self.root.ids.si_imp_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.si_imp_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.si_imp_chk.text_color=get_color_from_hex('000000')
        	self.si_imp_wid=Factory.si_imp_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.si_imp_wid)

        	self.mean_smitr()

        	self.si_imp_wid.ids.copy_smitr_chk.active=True
        	self.si_imp_wid.ids.add_smtrm_chk.active=True
        	self.si_imp_wid.ids.add_smtrm_chk.active=False


        else:
        	self.root.ids.si_imp_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.si_imp_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.si_imp_wid)

        	try:
        		preprocessing_fit_status.remove("simpleimputer")
        	except:
        		pass

        	try:
        	    siptrstp= [t[0] for t in gbl_pl].index('simple_imputer_gb')
        	    gbl_pl.pop(siptrstp)
        	except:
        		pass


    def  scatterplot_sbn(self):

        if self.root.ids.data_sctplo.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_sctplo.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_sctplo.text_color=get_color_from_hex('000000')

        	self.data_sctplo_wid=Factory.data_sctplo_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.data_sctplo_wid)
        	self.auto_sctplo()
        	self.data_sctplo_wid.ids.despine_sctplo_chk.active=True


        else:
        	self.root.ids.data_sctplo.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_sctplo.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.data_sctplo_wid)


    def  jointplot_sbn(self):

        if self.root.ids.data_jntplt.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_jntplt.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_jntplt.text_color=get_color_from_hex('000000')

        	self.data_jntplo_wid=Factory.data_jntplo_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.data_jntplo_wid)

        	self.data_jntplo_wid.ids.dropna_jntplo_chk.active=True
        	self.data_jntplo_wid.ids.dropna_jntplo_chk.active=False

        	self.data_jntplo_wid.ids.marginal_ticks_jntplo_chk.active=True
        	self.data_jntplo_wid.ids.marginal_ticks_jntplo_chk.active=False
        	self.scatter_jntplo()


        else:
        	self.root.ids.data_jntplt.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_jntplt.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.data_jntplo_wid)


    def  pairplt_sbn(self):

        if self.root.ids.data_prplt.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_prplt.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_prplt.text_color=get_color_from_hex('000000')

        	self.dtprltwd_wid=Factory.dtprltwd()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.dtprltwd_wid)

        	if 'tgt' in globals():
        	    self.dtprltwd_wid.ids.hue_prplt_data.text=(tgt)
        	#self.dtprltwd_wid.ids.hueord_prplt_data.text='None'
        	self.dtprltwd_wid.ids.palette_prplt_data.text="plasma_r"
        	#self.dtprltwd_wid.ids.vars_prplt_data.text='None'
        	self.dtprltwd_wid.ids.xvar_prplt_data.text='None'
        	self.dtprltwd_wid.ids.yvar_prplt_data.text='None'

        	self.scatter_kdprplt()
        	self.auto_dprplt()

        	#self.dtprltwd_wid.ids.mrk_prplt_data.text='None'
        	self.dtprltwd_wid.ids.height_prplt_data.text='3'
        	self.dtprltwd_wid.ids.aspct_prplt_data.text='1'
        	self.dtprltwd_wid.ids.crnr_pr_act.active=True
        	self.dtprltwd_wid.ids.crnr_pr_act.active=False
        	self.dtprltwd_wid.ids.drpna_act_prlt.active=True
        	self.dtprltwd_wid.ids.drpna_act_prlt.active=False

        else:
        	self.root.ids.data_prplt.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_prplt.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.dtprltwd_wid)


    def  pairplt_sbn_plt(self):

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	try:
    		self.dtprltwd_wid.ids.out_grid_dtprltwd.clear_widgets()
    	except:
    		pass
###
    	#global hue_prplt_data
    	hue_prplt_data=self.dtprltwd_wid.ids.hue_prplt_data.text.replace(" ", "")
    	#global hueord_prplt_data
    	#hueord_prplt_data=self.dtprltwd_wid.ids.hueord_prplt_data.text.replace(" ", "")
    	#global palette_prplt_data
    	palette_prplt_data=self.dtprltwd_wid.ids.palette_prplt_data.text.replace(" ", "")
    	#global vars_prplt_data
    	#vars_prplt_data=self.dtprltwd_wid.ids.vars_prplt_data.text.replace(" ", "")
    	#global xvar_prplt_data
    	xvar_prplt_data=self.dtprltwd_wid.ids.xvar_prplt_data.text.replace(" ", "")
    	#global yvar_prplt_data
    	yvar_prplt_data=self.dtprltwd_wid.ids.yvar_prplt_data.text.replace(" ", "")
    	#global mrk_prplt_data
    	#mrk_prplt_data=self.dtprltwd_wid.ids.mrk_prplt_data.text.replace(" ", "")
    	#global height_prplt_data
    	height_prplt_data=self.dtprltwd_wid.ids.height_prplt_data.text.replace(" ", "")
    	#global aspct_prplt_data
    	aspct_prplt_data=self.dtprltwd_wid.ids.aspct_prplt_data.text.replace(" ", "")
    #global fnt_szprplt
    	fnt_szprplt=self.dtprltwd_wid.ids.fnt_szprplt.text.replace(" ", "")

    	if height_prplt_data=="None":

        	height_prplt_data=None
    	elif "." in height_prplt_data and height_prplt_data.replace(".", "").replace("-","").isdigit()==True or height_prplt_data.replace("-","").isdigit()==True:
    		try:
    			height_prplt_data=float(height_prplt_data)
    		except:
    			self.dtprltwd_wid.ids.out_grid_dtprltwd.add_widget(self.output_crd_err)
    			self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    			self.output_crd_err.ids.output_text_err.text="height: unexpected input"
    			return

    	else:
    		self.dtprltwd_wid.ids.out_grid_dtprltwd.add_widget(self.output_crd_err)
    		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    		self.output_crd_err.ids.output_text_err.text="height: unexpected input"
    		return

    	if aspct_prplt_data=="None":

        	aspct_prplt_data=None
    	elif "." in aspct_prplt_data and aspct_prplt_data.replace(".", "").replace("-","").isdigit()==True or aspct_prplt_data.replace("-","").isdigit()==True:
    		try:
    			aspct_prplt_data=float(aspct_prplt_data)
    		except:
    			self.dtprltwd_wid.ids.out_grid_dtprltwd.add_widget(self.output_crd_err)
    			self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    			self.output_crd_err.ids.output_text_err.text="aspect: unexpected input"
    			return
    	else:
    		self.dtprltwd_wid.ids.out_grid_dtprltwd.add_widget(self.output_crd_err)
    		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    		self.output_crd_err.ids.output_text_err.text="aspect: unexpected input"
    		return

    	if fnt_szprplt=="None":

        	fnt_szprplt=None
    	elif "." in fnt_szprplt and fnt_szprplt.replace(".", "").replace("-","").isdigit()==True or fnt_szprplt.replace("-","").isdigit()==True:
    		try:
    			fnt_szprplt=float(fnt_szprplt)
    		except:
    			self.dtprltwd_wid.ids.out_grid_dtprltwd.add_widget(self.output_crd_err)
    			self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    			self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
    			return
    	else:
    		self.dtprltwd_wid.ids.out_grid_dtprltwd.add_widget(self.output_crd_err)
    		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
    		return


    	if hue_prplt_data=='None':
    		hue_prplt_data=None
    	#if hueord_prplt_data=="None":
    		#hueord_prplt_data=None
    	if palette_prplt_data=="None":
    		palette_prplt_data=None
    	#if vars_prplt_data=="None":
    		#vars_prplt_data=None
    	if xvar_prplt_data=='None':
    		xvar_prplt_data=None
    	if yvar_prplt_data=="None":
    		yvar_prplt_data=None
    	#f mrk_prplt_data=="None":
    		#mrk_prplt_data=None
    	if height_prplt_data=='None':
    		height_prplt_data=None
    	if aspct_prplt_data=="None":
    		aspct_prplt_data=None

    	dtprltwd_vis=Factory.dtprltwd_vis()
    	dtprltwd_vis.remove = lambda: self.dtprltwd_wid.remove_widget(dtprltwd_vis)

    	if kind_prplt_data !="reg":

    		try:

          	  plt.figure()
          	  sns.set(font_scale=(fnt_szprplt))

          	  sns.set_style(style="white")
          	  plt.style.use('dark_background')
          	  axprplt=sns.pairplot(data=DATA,
         	   hue=(hue_prplt_data),
        		#hue_order=(hueord_prplt_data),
        		palette=(palette_prplt_data),
        		#vars=(vars_prplt_data),
        		x_vars=(xvar_prplt_data),
        		y_vars=(yvar_prplt_data),
        		kind=(kind_prplt_data),
        		diag_kind=(dikd_prplt_data),
        		#markers=(mrk_prplt_data),
        		height=(height_prplt_data),
        		aspect=(aspct_prplt_data),
    	  	  corner=(cnr_prplt_data),
        		dropna=(drpna_prplt_data),
        		diag_kws={'linewidth': 0},
        		plot_kws={'linewidth': 0},
                #grid_kws={}
        		)


                   #ax.get_label().set_color('white')
          	  #plt.legend(labelcolor="white")

          	  plt.savefig("C:/Arc-Plots/pairplot1",transparent=True)

          	  self.prplt_image=(Image(source="C:/Arc-Plots/pairplot1.png",size_hint=(1, None),allow_stretch=True,height=600))
          	  self.prplt_image.reload()
          	  dtprltwd_vis.ids.dtprplt_vis_grd.add_widget(self.prplt_image)
          	  dtprltwd_vis.ids.dtprplt_vis_grd.add_widget(MDLabel(text=""))
          	  self.dtprltwd_wid.add_widget(dtprltwd_vis)

    		except Exception as e:
    			self.dtprltwd_wid.ids.out_grid_dtprltwd.add_widget(self.output_crd_err)
    			self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    			self.output_crd_err.ids.output_text_err.text=str(e)

    	else:
    		try:

          	  plt.figure()
          	  sns.set(font_scale=(fnt_szprplt))
          	  sns.set_style(style="white")
          	  plt.style.use('dark_background')

          	  sns.pairplot(data=DATA,
         	   hue=(hue_prplt_data),
        		#hue_order=(hueord_prplt_data),
        		palette=(palette_prplt_data),
        		#vars=(vars_prplt_data),
        		x_vars=(xvar_prplt_data),
        		y_vars=(yvar_prplt_data),
        		kind=(kind_prplt_data),
        		diag_kind=(dikd_prplt_data),
        		#markers=(mrk_prplt_data),
        		height=(height_prplt_data),
        		aspect=(aspct_prplt_data),
    	  	  corner=(cnr_prplt_data),
        		dropna=(drpna_prplt_data)
        		)

          	  plt.savefig("C:/Arc-Plots/pairplot1",transparent=True)

          	  self.prplt_image=(Image(source="C:/Arc-Plots/pairplot1.png",size_hint=(1, None),allow_stretch=True,height=600))
          	  self.prplt_image.reload()
          	  dtprltwd_vis.ids.dtprplt_vis_grd.add_widget(self.prplt_image)
          	  dtprltwd_vis.ids.dtprplt_vis_grd.add_widget(MDLabel(text=""))
          	  self.dtprltwd_wid.add_widget(dtprltwd_vis)

    		except Exception as e:
    			self.dtprltwd_wid.ids.out_grid_dtprltwd.add_widget(self.output_crd_err)
    			self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    			self.output_crd_err.ids.output_text_err.text=str(e)

    def crnr_onact(self,checkbox,value):

        global cnr_prplt_data
        if value:
        	cnr_prplt_data=True
        else:
        	cnr_prplt_data=False

    def drpna_onact(self,checkbox,value):

        global drpna_prplt_data
        if value:
        	drpna_prplt_data=True
        else:
        	drpna_prplt_data=False

    def scatter_kdprplt(self):
        if self.dtprltwd_wid.ids.kde_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.kde_kdprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.hist_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.hist_kdprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.reg_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.reg_kdprplt_chk.md_bg_color=get_color_from_hex('323043')
        self.dtprltwd_wid.ids.scatter_kdprplt_chk.md_bg_color=get_color_from_hex('808080')

        global kind_prplt_data
        kind_prplt_data='scatter'

    def kde_kdprplt(self):

        if self.dtprltwd_wid.ids.scatter_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.scatter_kdprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.hist_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.hist_kdprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.reg_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.reg_kdprplt_chk.md_bg_color=get_color_from_hex('323043')
        self.dtprltwd_wid.ids.kde_kdprplt_chk.md_bg_color=get_color_from_hex('808080')

        global kind_prplt_data
        kind_prplt_data='kde'

    def hist_kdprplt(self):

        if self.dtprltwd_wid.ids.scatter_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.scatter_kdprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.kde_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.kde_kdprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.reg_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.reg_kdprplt_chk.md_bg_color=get_color_from_hex('323043')
        self.dtprltwd_wid.ids.hist_kdprplt_chk.md_bg_color=get_color_from_hex('808080')

        global kind_prplt_data
        kind_prplt_data='kde'

    def reg_kdprplt(self):

        if self.dtprltwd_wid.ids.scatter_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.scatter_kdprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.kde_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.kde_kdprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.hist_kdprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.hist_kdprplt_chk.md_bg_color=get_color_from_hex('323043')
        self.dtprltwd_wid.ids.reg_kdprplt_chk.md_bg_color=get_color_from_hex('808080')
        global kind_prplt_data
        kind_prplt_data='reg'


        #######

    def  auto_dprplt(self):

        if self.dtprltwd_wid.ids.hist_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.hist_dprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.kde_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.kde_dprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.none_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.none_dprplt_chk.md_bg_color=get_color_from_hex('323043')
        self.dtprltwd_wid.ids.auto_dprplt_chk.md_bg_color=get_color_from_hex('808080')

        global dikd_prplt_data
        dikd_prplt_data='auto'

    def   hist_dprplt(self):

        if self.dtprltwd_wid.ids.auto_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.auto_dprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.kde_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.kde_dprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.none_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.none_dprplt_chk.md_bg_color=get_color_from_hex('323043')
        self.dtprltwd_wid.ids.hist_dprplt_chk.md_bg_color=get_color_from_hex('808080')

        global dikd_prplt_data
        dikd_prplt_data='hist'

    def   kde_dprplt(self):

        if self.dtprltwd_wid.ids.auto_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.auto_dprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.hist_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.hist_dprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.none_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.none_dprplt_chk.md_bg_color=get_color_from_hex('323043')
        self.dtprltwd_wid.ids.kde_dprplt_chk.md_bg_color=get_color_from_hex('808080')

        global dikd_prplt_data
        dikd_prplt_data='kde'

    def   none_dprplt(self):

        if self.dtprltwd_wid.ids.auto_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.auto_dprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.hist_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.hist_dprplt_chk.md_bg_color=get_color_from_hex('323043')

        if self.dtprltwd_wid.ids.kde_dprplt_chk.md_bg_color==get_color_from_hex('808080'):
        	self.dtprltwd_wid.ids.kde_dprplt_chk.md_bg_color=get_color_from_hex('323043')
        self.dtprltwd_wid.ids.none_dprplt_chk.md_bg_color=get_color_from_hex('808080')

        global dikd_prplt_data
        dikd_prplt_data=None

    def robust_htm(self,checkbox,value):
        global rbsthtmp
        if value:
            rbsthtmp=True
        else:
            rbsthtmp=False

    def annot_htm(self,checkbox,value):
        global anthmp
        if value:
            anthmp=True
        else:
            anthmp=False

    def cbar_htm(self,checkbox,value):
        global cbarmpt
        if value:
            cbarmpt=True
        else:
            cbarmpt=False

    def square_htm(self,checkbox,value):
        global sqrhtp
        if value:
            sqrhtp=True
        else:
            sqrhtp=False

    def mask_htm(self,checkbox,value):
        global mskht
        if value:
            mskht=True
        else:
            mskht=False

    def  kde_sbn_plt(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        try:
        	self.data_kde_wid.ids.out_grid_data_kde_wid.clear_widgets()
        except:
        	pass

        x_kdeplo=self.data_kde_wid.ids.x_kdeplo.text
        y_kdeplo=self.data_kde_wid.ids.y_kdeplo.text
        kernel_kdeplo=self.data_kde_wid.ids.kernel_kdeplo.text.replace(" ", "")
        gridsize_kdeplo=self.data_kde_wid.ids.gridsize_kdeplo.text.replace(" ", "")
        cut_kdeplo=self.data_kde_wid.ids.cut_kdeplo.text.replace(" ", "")
        #weights_kdeplo=self.data_kde_wid.ids.weights_kdeplo.text.replace(" ", "")
        #hue_kdeplo=self.data_kde_wid.ids.hue_kdeplo.text.replace(" ", "")
        palette_kdeplo=self.data_kde_wid.ids.palette_kdeplo.text.replace(" ", "")
        #hue_order_kdeplo=self.data_kde_wid.ids.hue_order_kdeplo.text.replace(" ", "")
        levels_kdeplo=self.data_kde_wid.ids.levels_kdeplo.text.replace(" ", "")
        thresh_kdeplo=self.data_kde_wid.ids.thresh_kdeplo.text.replace(" ", "")
        bw_method_kdeplo=self.data_kde_wid.ids.bw_method_kdeplo.text.replace(" ", "")
        bw_adjust_kdeplo=self.data_kde_wid.ids.bw_adjust_kdeplo.text.replace(" ", "")
        #color_kdeplo=self.data_kde_wid.ids.color_kdeplo.text.replace(" ", "")
        font_scale_kdeplo=self.data_kde_wid.ids.font_scale_kdeplo.text.replace(" ", "")
        #fill_kdeplo_txt=self.data_kde_wid.ids.fill_kdeplo_txt.text.replace(" ", "")

        if x_kdeplo=="None":
        	x_kdeplo=None

        if y_kdeplo=="None":
        	y_kdeplo=None

        if kernel_kdeplo=="None":
        	kernel_kdeplo=None

        if cut_kdeplo=="None":
        	cut_kdeplo=None

        #if weights_kdeplo=="None":
        	#weights_kdeplo=None

        #if hue_kdeplo=="None":
        	#hue_kdeplo=None

        if levels_kdeplo=="None":
        	levels_kdeplo=None

        if thresh_kdeplo=="None":
        	thresh_kdeplo=None

        if bw_method_kdeplo=="None":
        	bw_method_kdeplo=None

        #if color_kdeplo=="None":
        	#color_kdeplo=None

        if palette_kdeplo=="None":
        	palette_kdeplo=None

        #if hue_order_kdeplo=="None":
        	#hue_order_kdeplo=None

        if bw_adjust_kdeplo=="None":
        	bw_adjust_kdeplo=None

        if font_scale_kdeplo=="None":
        	font_scale_kdeplo=None
        elif "." in font_scale_kdeplo and font_scale_kdeplo.replace(".", "").replace("-","").isdigit()==True:

        	try:
        		font_scale_kdeplo=float(font_scale_kdeplo)
        	except:
        		self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
        		return


        elif font_scale_kdeplo.replace("-","").isdigit()==True:
        	try:
        		font_scale_kdeplo=float(font_scale_kdeplo)
        	except:
        		self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
        		return

        else:
        	self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
        	return

        if gridsize_kdeplo=="None":
        	gridsize_kdeplo=None
        elif gridsize_kdeplo.replace("-","").isdigit()==True:
        	try:
        		gridsize_kdeplo=int(gridsize_kdeplo)
        	except:
        		self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="gridsize: unexpected input"
        		return
        else:
        	self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="gridsize: unexpected input"
        	return

        if cut_kdeplo=="None":
        	cut_kdeplo=None
        elif cut_kdeplo.replace("-","").isdigit()==True:
        	try:
        		cut_kdeplo=int(cut_kdeplo)
        	except:
        		self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="cut: unexpected input"
        		return
        else:
        	self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="cut: unexpected input"
        	return


        if levels_kdeplo=="None":
        	levels_kdeplo=None
        elif levels_kdeplo.replace("-","").isdigit()==True:
        	try:
        		levels_kdeplo=int(levels_kdeplo)
        	except:
        		self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="levels: unexpected input"
        		return

        else:
        	self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="levels: unexpected input"
        	return

        #if fill_kdeplo_txt=="None":
        	#fill_val_kdeplo_txt=None
        #elif fill_kdeplo_txt=="True":
        	#try:
        		#fill_val_kdeplo_txt=True
        #	except:
        		#self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		#self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		#self.output_crd_err.ids.output_text_err.text="fill_val: unexpected input"
        		#return
        #elif fill_kdeplo_txt=="False":
        #	fill_val_kdeplo_txt=False
        #else:
        #	self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        #	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        #	self.output_crd_err.ids.output_text_err.text="fill_val: unexpected input"
        #	return

        if thresh_kdeplo=="None":

        	thresh_kdeplo=None
        elif "." in thresh_kdeplo and thresh_kdeplo.replace(".", "").replace("-","").isdigit()==True or thresh_kdeplo.replace("-","").isdigit()==True:
        	try:
        		thresh_kdeplo=float(thresh_kdeplo)
        	except:
        		self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="thresh: unexpected input"
        		return
        else:
        	self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="thresh: unexpected input"
        	return


        if bw_adjust_kdeplo=="None":
        	bw_adjust_kdeplo=None

        elif bw_adjust_kdeplo.replace("-","").isdigit()==True:
        	try:
        		bw_adjust_kdeplo=int(bw_adjust_kdeplo)
        	except:
        		self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="bw_adjust: unexpected input"
        		return
        else:
        	print("unexpected input")
        	self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="bw_adjust: unexpected input"

        data_kde_wid_vis=Factory.data_kde_wid_vis()
        data_kde_wid_vis.remove = lambda: self.data_kde_wid.remove_widget(data_kde_wid_vis)

        if x_kdeplo !=None and y_kdeplo !=None:
        	try:

        		plt.figure()
        		sns.set(font_scale=(font_scale_kdeplo))

        		axkdeplosnd=sns.kdeplot(
    	  	  data=DATA,
    	   	 x=(x_kdeplo),
    	  	  y=(y_kdeplo),
     	  	 shade=shade_kdeplo_val,
       		 vertical=vertical_kdeplo_val,
   	 	    kernel=(kernel_kdeplo),
   	  	   gridsize=(gridsize_kdeplo),
    	  	  cut=(cut_kdeplo),
       		 legend=legend_kdeplo_val,
      	 	 cumulative=cumulative_kdeplo_val,
    	   	 cbar=cbar_kdeplo_val,
     	   	#weights=(weights_kdeplo),
        		#hue=(hue_kdeplo),
    	    	cmap=(palette_kdeplo),
       		 #hue_order=(hue_order_kdeplo),
        		multiple=multiple_kdeplo_val,
      	  	common_norm=common_norm_kdeplo_val,
  	      	common_grid=common_grid_kdeplo_val,
      		  levels=(levels_kdeplo),
      		  thresh=(thresh_kdeplo),
     	  	 bw_method=(bw_method_kdeplo),
    	    	bw_adjust=(bw_adjust_kdeplo),
      		  #color=(color_kdeplo),
       		 #fill=(fill_val_kdeplo_txt),
       		 warn_singular=warn_singular_kdeplo_val

       		 )
        		axkdeplosnd.spines['bottom'].set_color('white')
        		axkdeplosnd.spines['top'].set_color('white')
        		axkdeplosnd.spines['right'].set_color('white')
        		axkdeplosnd.spines['left'].set_color('white')
        		axkdeplosnd.xaxis.label.set_color('white')
        		axkdeplosnd.yaxis.label.set_color('white')
        		axkdeplosnd.tick_params(colors="white", which='both')
        		if despine_kdeplo_val=="True":
        			sns.despine()
        		else:
        			pass
        		plt.savefig("C:/Arc-Plots/kdeplot1",transparent=True)

        		self.kdeplo_image=(Image(source="C:/Arc-Plots/kdeplot1.png",size_hint=(1, None),allow_stretch=True,height=450))
        		self.kdeplo_image.reload()
        		data_kde_wid_vis.ids.dtkdeplo_vis_grd.add_widget(self.kdeplo_image)

        		data_kde_wid_vis.ids.dtkdeplo_vis_grd.add_widget(MDLabel(text=""))
        		self.data_kde_wid.add_widget(data_kde_wid_vis)

        	except Exception as e:

        		self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
        	try:

        		plt.figure()
        		sns.set(font_scale=(font_scale_kdeplo))
        		sns.set_style(style="white")

        		axkdeplo=sns.kdeplot(
    	  	  data=DATA,
    	   	 x=(x_kdeplo),
    	  	  y=(y_kdeplo),
     	  	 shade=shade_kdeplo_val,
       		 vertical=vertical_kdeplo_val,
   	 	    kernel=(kernel_kdeplo),
   	  	   gridsize=(gridsize_kdeplo),
    	  	  cut=(cut_kdeplo),
       		 legend=legend_kdeplo_val,
      	 	 cumulative=cumulative_kdeplo_val,
    	   	 cbar=cbar_kdeplo_val,
     	   	#weights=(weights_kdeplo),
        		#hue=(hue_kdeplo),
    	    	palette=(palette_kdeplo),
    	    	#hue_order=(hue_order_kdeplo),
        		multiple=multiple_kdeplo_val,
      	  	common_norm=common_norm_kdeplo_val,
  	      	common_grid=common_grid_kdeplo_val,
      		  levels=(levels_kdeplo),
      		  thresh=(thresh_kdeplo),
     	  	 bw_method=(bw_method_kdeplo),
    	    	bw_adjust=(bw_adjust_kdeplo),
      		  #color=(color_kdeplo),
       		 #fill=(fill_val_kdeplo_txt),
       		 warn_singular=warn_singular_kdeplo_val

       		 )
        		axkdeplo.spines['bottom'].set_color('white')
        		axkdeplo.spines['top'].set_color('white')
        		axkdeplo.spines['right'].set_color('white')
        		axkdeplo.spines['left'].set_color('white')
        		axkdeplo.xaxis.label.set_color('white')
        		axkdeplo.yaxis.label.set_color('white')
        		axkdeplo.tick_params(colors="white", which='both')
        		if despine_kdeplo_val=="True":
        			sns.despine()
        		else:
        			pass
        		plt.savefig("C:/Arc-Plots/kdeplot1",transparent=True)


        		self.kdeplo_image=(Image(source="C:/Arc-Plots/kdeplot1.png",size_hint=(1, None),allow_stretch=True,height=450))
        		self.kdeplo_image.reload()
        		data_kde_wid_vis.ids.dtkdeplo_vis_grd.add_widget(self.kdeplo_image)

        		data_kde_wid_vis.ids.dtkdeplo_vis_grd.add_widget(MDLabel(text=""))
        		self.data_kde_wid.add_widget(data_kde_wid_vis)

        	except Exception as e:
        		self.data_kde_wid.ids.out_grid_data_kde_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(e)


    def shade_kdeplo(self,checkbox,value):
    	global shade_kdeplo_val
    	if value:
    	    shade_kdeplo_val=True
    	else:
    		shade_kdeplo_val=False

    def vertical_kdeplo(self,checkbox,value):
    	global vertical_kdeplo_val
    	if value:
    	    vertical_kdeplo_val=True
    	else:
    		vertical_kdeplo_val=False


    def legend_kdeplo(self,checkbox,value):
    	global legend_kdeplo_val
    	if value:
    	    legend_kdeplo_val=True
    	else:
    		legend_kdeplo_val=False

    def cumulative_kdeplo(self,checkbox,value):
    	global cumulative_kdeplo_val
    	if value:
    	    cumulative_kdeplo_val=True
    	else:
    		cumulative_kdeplo_val=False

    def cbar_kdeplo(self,checkbox,value):
    	global cbar_kdeplo_val
    	if value:
    	    cbar_kdeplo_val=True
    	else:
    		cbar_kdeplo_val=False

    def common_norm_kdeplo(self,checkbox,value):
    	global common_norm_kdeplo_val
    	if value:
    	    common_norm_kdeplo_val=True
    	else:
    		common_norm_kdeplo_val=False

    def common_grid_kdeplo(self,checkbox,value):
    	global common_grid_kdeplo_val
    	if value:
    		common_grid_kdeplo_val=True
    	else:
    		common_grid_kdeplo_val=False

    def warn_singular_kdeplo(self,checkbox,value):
    	global warn_singular_kdeplo_val
    	if value:
    	    warn_singular_kdeplo_val=True
    	else:
    		warn_singular_kdeplo_val=False

    def despine_kdeplo(self,checkbox,value):
    	global despine_kdeplo_val
    	if value:
    	    despine_kdeplo_val="True"
    	else:
    		despine_kdeplo_val="False"

    def  layer_kdeplo(self):
        if self.data_kde_wid.ids.stack_kdeplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_kde_wid.ids.stack_kdeplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_kde_wid.ids.fill_kdeplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_kde_wid.ids.fill_kdeplo_chk.md_bg_color=get_color_from_hex('323043')

        self.data_kde_wid.ids.layer_kdeplo_chk.md_bg_color=get_color_from_hex('808080')

        global multiple_kdeplo_val
        multiple_kdeplo_val="layer"

    def stack_kdeplo(self):

        if self.data_kde_wid.ids.layer_kdeplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_kde_wid.ids.layer_kdeplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_kde_wid.ids.fill_kdeplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_kde_wid.ids.fill_kdeplo_chk.md_bg_color=get_color_from_hex('323043')

        self.data_kde_wid.ids.stack_kdeplo_chk.md_bg_color=get_color_from_hex('808080')

        global multiple_kdeplo_val
        multiple_kdeplo_val="stack"

    def fill_kdeplo(self):

        if self.data_kde_wid.ids.layer_kdeplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_kde_wid.ids.layer_kdeplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_kde_wid.ids.stack_kdeplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_kde_wid.ids.stack_kdeplo_chk.md_bg_color=get_color_from_hex('323043')

        self.data_kde_wid.ids.fill_kdeplo_chk.md_bg_color=get_color_from_hex('808080')

        global multiple_kdeplo_val
        multiple_kdeplo_val="fill"




    def ctmap_sbn_plt(self):
    	try:
    		self.cltrmap_wid.ids.out_grid_cltrmap_wid.clear_widgets()
    	except:
    		pass
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()


    	z_score_ctmap=self.cltrmap_wid.ids.z_score_ctmap.text.replace(" ", "")
    	standard_scale_ctmap=self.cltrmap_wid.ids.standard_scale_ctmap.text.replace(" ", "")
    	cmap_ctmap=self.cltrmap_wid.ids.cmap_ctmap.text.replace(" ", "")
    	font_scale_ctmap=self.cltrmap_wid.ids.font_scale_ctmap.text.replace(" ", "")

    	if cmap_ctmap=="None":
    	    cmap_ctmap=None

    	if z_score_ctmap=="None":
        	z_score_ctmap=None
    	elif  z_score_ctmap.replace("-","").isdigit()==True:
        	try:
        		z_score_ctmap=int(z_score_ctmap)
        	except:
        		self.cltrmap_wid.ids.out_grid_cltrmap_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="z_score: unexpected input"
        		return

    	if standard_scale_ctmap=="None":
        	standard_scale_ctmap=None
    	elif  standard_scale_ctmap.replace("-","").isdigit()==True:
        	try:
        		standard_scale_ctmap=int(standard_scale_ctmap)
        	except:
        		self.cltrmap_wid.ids.out_grid_cltrmap_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="standard_scale: unexpected input"
        		return


    	if font_scale_ctmap=="None":
        	font_scale_ctmap=None
    	elif "." in font_scale_ctmap and font_scale_ctmap.replace(".", "").replace("-","").isdigit()==True:

        	try:
        		font_scale_ctmap=float(font_scale_ctmap)
        	except:
        		self.cltrmap_wid.ids.out_grid_cltrmap_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
        		return

    	elif font_scale_ctmap.replace("-","").isdigit()==True:
        	try:
        		font_scale_ctmap=float(font_scale_ctmap)
        	except:
        		self.cltrmap_wid.ids.out_grid_cltrmap_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
        		return


    	data_ctmap_wid_vis=Factory.data_ctmap_wid_vis()
    	data_ctmap_wid_vis.remove = lambda: self.cltrmap_wid.remove_widget(data_ctmap_wid_vis)

    	if 1==1:
        	try:

        		plt.figure()

        		sns.set(font_scale=(font_scale_ctmap),rc={'ytick.labelcolor':'white','xtick.labelcolor':'white'})
        		sns.set_style(style="white")
        		axctmapsnd=sns.clustermap(DATA.corr(),
        		cmap=(cmap_ctmap),
        		pivot_kws=None,
        		method='average',
        		metric='euclidean',
        		z_score=(z_score_ctmap),
        		standard_scale=(standard_scale_ctmap),
        		figsize=(10, 10),
        		cbar_kws=None,
        		row_cluster=True,
        		col_cluster=True,
        		row_linkage=None,
        		col_linkage=None,
        		row_colors=None,
        		col_colors=None,
        		mask=mask_ctmap_val,
        		dendrogram_ratio=0.2,
        		colors_ratio=0.03,
        		cbar_pos=(0.02, 0.8, 0.05, 0.18),
        		tree_kws={"color":'white'})

        		#axctmapsnd.get_xticklabels().set_color('white')
        		#axctmapsnd.yaxis.label.set_color('white')

        		plt.savefig("C:/Arc-Plots/clustermap1",transparent=True)

        		self.ctmap_image=(Image(source="C:/Arc-Plots/clustermap1.png",size_hint=(1, None),allow_stretch=True,height=500))
        		self.ctmap_image.reload()
        		data_ctmap_wid_vis.ids.dtctmapplo_vis_grd.add_widget(self.ctmap_image)

        		data_ctmap_wid_vis.ids.dtctmapplo_vis_grd.add_widget(MDLabel(text=""))
        		self.cltrmap_wid.add_widget(data_ctmap_wid_vis)

        	except Exception as e:
        		self.cltrmap_wid.ids.out_grid_cltrmap_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(e)


    def mask_ctmap(self,checkbox,value):
    	global mask_ctmap_val
    	if value:
    		mask_ctmap_val=True
    	else:
    		mask_ctmap_val=False





    def pointplot_sbn(self):

        if self.root.ids.data_pntxplo.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.data_pntxplo.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.data_pntxplo.text_color = get_color_from_hex('000000')

            self.data_pntxplo_wid = Factory.data_pntxplo_wid()
            self.root.ids.dtprlt_wid_grid.add_widget(self.data_pntxplo_wid)


            # setting default values

        else:
            self.root.ids.data_pntxplo.md_bg_color = get_color_from_hex('323043')
            self.root.ids.data_pntxplo.text_color = get_color_from_hex('ffffff')
            self.root.ids.dtprlt_wid_grid.remove_widget(self.data_pntxplo_wid)

        # plot

    def pntxplo_sbn_plt(self):

        try:
            self.data_pntxplo_wid.ids.out_grid_data_pntxplo_wid.clear_widgets()
        except:
            pass

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        x_pntxplo = self.data_pntxplo_wid.ids.x_pntxplo.text.replace(" ", "")
        y_pntxplo = self.data_pntxplo_wid.ids.y_pntxplo.text.replace(" ", "")
        hue_pntxplo = self.data_pntxplo_wid.ids.hue_pntxplo.text.replace(" ", "")
        palette_pntxplo = self.data_pntxplo_wid.ids.palette_pntxplo.text.replace(" ", "")
        font_scale_pntxplo = self.data_pntxplo_wid.ids.font_scale_pntxplo.text.replace(" ", "")

        if x_pntxplo == "None":
            x_pntxplo = None
        if y_pntxplo == "None":
            y_pntxplo = None
        if hue_pntxplo == "None":
            hue_pntxplo = None
        if palette_pntxplo == "None":
            palette_pntxplo = None

        if font_scale_pntxplo == "None":
            font_scale_pntxplo = None
        elif "." in font_scale_pntxplo and font_scale_pntxplo.replace(".", "").replace("-", "").isdigit() == True:

            try:
                font_scale_pntxplo = float(font_scale_pntxplo)
            except:
                self.data_pntxplo_wid.ids.out_grid_data_pntxplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        elif font_scale_pntxplo.replace("-", "").isdigit() == True:
            try:
                font_scale_pntxplo = float(font_scale_pntxplo)
            except:
                self.data_pntxplo_wid.ids.out_grid_data_pntxplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        data_pntxplo_wid_vis = Factory.data_pntxplo_wid_vis()
        data_pntxplo_wid_vis.remove = lambda: self.data_pntxplo_wid.remove_widget(data_pntxplo_wid_vis)

        if 1 == 1:
            try:

                plt.figure()
                sns.set(font_scale=(font_scale_pntxplo))
                sns.set_style(style="white")

                axpntxplosnd = sns.pointplot(
                    x=(x_pntxplo),
                    y=(y_pntxplo),
                    hue=(hue_pntxplo),
                    data=DATA,
                    palette=(palette_pntxplo)
                    )

                axpntxplosnd.tick_params(axis='both')

                axpntxplosnd.spines['bottom'].set_color("black")
                axpntxplosnd.spines['top'].set_color("black")
                axpntxplosnd.spines['right'].set_color("black")
                axpntxplosnd.spines['left'].set_color("black")
                #for tick in axpntxplosnd.get_xticklabels():
                    #tick.set_rotation(90)
                axpntxplosnd.xaxis.label.set_color('white')
                axpntxplosnd.yaxis.label.set_color('white')
                axpntxplosnd.tick_params(colors="white", which='both')

                sns.despine()

                plt.savefig("C:/Arc-Plots/pointplot1", transparent=True)

                self.pntxplo_image = (
                        Image(source="C:/Arc-Plots/pointplot1.png", size_hint=(1, None), allow_stretch=True, height=450))
                self.pntxplo_image.reload()
                data_pntxplo_wid_vis.ids.dtpntxploplo_vis_grd.add_widget(self.pntxplo_image)

                data_pntxplo_wid_vis.ids.dtpntxploplo_vis_grd.add_widget(MDLabel(text=""))
                self.data_pntxplo_wid.add_widget(data_pntxplo_wid_vis)

            except Exception as e:
                print(e)
                self.data_pntxplo_wid.ids.out_grid_data_pntxplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = str(e)


    def stripplot_sbn(self):

        if self.root.ids.data_strpxplo.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.data_strpxplo.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.data_strpxplo.text_color = get_color_from_hex('000000')

            self.data_strpxplo_wid = Factory.data_strpxplo_wid()
            self.root.ids.dtprlt_wid_grid.add_widget(self.data_strpxplo_wid)


            # setting default values

        else:
            self.root.ids.data_strpxplo.md_bg_color = get_color_from_hex('323043')
            self.root.ids.data_strpxplo.text_color = get_color_from_hex('ffffff')
            self.root.ids.dtprlt_wid_grid.remove_widget(self.data_strpxplo_wid)

        # plot

    def strpxplo_sbn_plt(self):

        try:
            self.data_strpxplo_wid.ids.out_grid_data_strpxplo_wid.clear_widgets()
        except:
            pass

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        x_strpxplo = self.data_strpxplo_wid.ids.x_strpxplo.text
        y_strpxplo = self.data_strpxplo_wid.ids.y_strpxplo.text
        hue_strpxplo = self.data_strpxplo_wid.ids.hue_strpxplo.text.replace(" ", "")
        palette_strpxplo = self.data_strpxplo_wid.ids.palette_strpxplo.text.replace(" ", "")
        font_scale_strpxplo = self.data_strpxplo_wid.ids.font_scale_strpxplo.text.replace(" ", "")

        if x_strpxplo == "None":
            x_strpxplo = None
        if y_strpxplo == "None":
            y_strpxplo = None
        if hue_strpxplo == "None":
            hue_strpxplo = None
        if palette_strpxplo == "None":
            palette_strpxplo = None

        if font_scale_strpxplo == "None":
            font_scale_strpxplo = None
        elif "." in font_scale_strpxplo and font_scale_strpxplo.replace(".", "").replace("-", "").isdigit() == True:

            try:
                font_scale_strpxplo = float(font_scale_strpxplo)
            except:
                self.data_strpxplo_wid.ids.out_grid_data_strpxplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        elif font_scale_strpxplo.replace("-", "").isdigit() == True:
            try:
                font_scale_strpxplo = float(font_scale_strpxplo)
            except:
                self.data_strpxplo_wid.ids.out_grid_data_strpxplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        data_strpxplo_wid_vis = Factory.data_strpxplo_wid_vis()
        data_strpxplo_wid_vis.remove = lambda: self.data_strpxplo_wid.remove_widget(data_strpxplo_wid_vis)

        if 1 == 1:
            try:

                plt.figure()
                sns.set(font_scale=(font_scale_strpxplo))
                sns.set_style(style="white")

                axstrpxplosnd = sns.stripplot(
                    x=(x_strpxplo),
                    y=(y_strpxplo),
                    hue=(hue_strpxplo),
                    data=DATA,
                    palette=(palette_strpxplo)
                    )

                axstrpxplosnd.tick_params(axis='both')

                axstrpxplosnd.spines['bottom'].set_color("black")
                axstrpxplosnd.spines['top'].set_color("black")
                axstrpxplosnd.spines['right'].set_color("black")
                axstrpxplosnd.spines['left'].set_color("black")

                axstrpxplosnd.xaxis.label.set_color('white')
                axstrpxplosnd.yaxis.label.set_color('white')
                axstrpxplosnd.tick_params(colors="white", which='both')

                sns.despine()

                plt.savefig("C:/Arc-Plots/stripplot1", transparent=True)

                self.strpxplo_image = (
                        Image(source="C:/Arc-Plots/stripplot1.png", size_hint=(1, None), allow_stretch=True, height=450))
                self.strpxplo_image.reload()
                data_strpxplo_wid_vis.ids.dtstrpxploplo_vis_grd.add_widget(self.strpxplo_image)

                data_strpxplo_wid_vis.ids.dtstrpxploplo_vis_grd.add_widget(MDLabel(text=""))
                self.data_strpxplo_wid.add_widget(data_strpxplo_wid_vis)

            except Exception as e:
                print(e)
                self.data_strpxplo_wid.ids.out_grid_data_strpxplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = str(e)


    def barplot_sbn(self):

        if self.root.ids.data_brxplo.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.data_brxplo.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.data_brxplo.text_color = get_color_from_hex('000000')

            self.data_brxplo_wid = Factory.data_brxplo_wid()
            self.root.ids.dtprlt_wid_grid.add_widget(self.data_brxplo_wid)


            # setting default values

        else:
            self.root.ids.data_brxplo.md_bg_color = get_color_from_hex('323043')
            self.root.ids.data_brxplo.text_color = get_color_from_hex('ffffff')
            self.root.ids.dtprlt_wid_grid.remove_widget(self.data_brxplo_wid)

        # plot

    def brxplo_sbn_plt(self):

        try:
            self.data_brxplo_wid.ids.out_grid_data_brxplo_wid.clear_widgets()
        except:
            pass

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        x_brxplo = self.data_brxplo_wid.ids.x_brxplo.text
        y_brxplo = self.data_brxplo_wid.ids.y_brxplo.text
        hue_brxplo = self.data_brxplo_wid.ids.hue_brxplo.text.replace(" ", "")
        palette_brxplo = self.data_brxplo_wid.ids.palette_brxplo.text.replace(" ", "")
        font_scale_brxplo = self.data_brxplo_wid.ids.font_scale_brxplo.text.replace(" ", "")

        if x_brxplo == "None":
            x_brxplo = None
        if y_brxplo == "None":
            y_brxplo = None
        if hue_brxplo == "None":
            hue_brxplo = None
        if palette_brxplo == "None":
            palette_brxplo = None

        if font_scale_brxplo == "None":
            font_scale_brxplo = None
        elif "." in font_scale_brxplo and font_scale_brxplo.replace(".", "").replace("-", "").isdigit() == True:

            try:
                font_scale_brxplo = float(font_scale_brxplo)
            except:
                self.data_brxplo_wid.ids.out_grid_data_brxplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        elif font_scale_brxplo.replace("-", "").isdigit() == True:
            try:
                font_scale_brxplo = float(font_scale_brxplo)
            except:
                self.data_brxplo_wid.ids.out_grid_data_brxplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        data_brxplo_wid_vis = Factory.data_brxplo_wid_vis()
        data_brxplo_wid_vis.remove = lambda: self.data_brxplo_wid.remove_widget(data_brxplo_wid_vis)

        if 1 == 1:
            try:

                plt.figure()
                sns.set(font_scale=(font_scale_brxplo))
                sns.set_style(style="white")

                axbrxplosnd = sns.barplot(
                    x=(x_brxplo),
                    y=(y_brxplo),
                    hue=(hue_brxplo),
                    data=DATA,
                    palette=(palette_brxplo)
                    )

                axbrxplosnd.tick_params(axis='both')

                axbrxplosnd.spines['bottom'].set_color("black")
                axbrxplosnd.spines['top'].set_color("black")
                axbrxplosnd.spines['right'].set_color("black")
                axbrxplosnd.spines['left'].set_color("black")

                axbrxplosnd.xaxis.label.set_color('white')
                axbrxplosnd.yaxis.label.set_color('white')
                axbrxplosnd.tick_params(colors="white", which='both')

                sns.despine()

                plt.savefig("C:/Arc-Plots/barplot1", transparent=True)

                self.brxplo_image = (
                        Image(source="C:/Arc-Plots/barplot1.png", size_hint=(1, None), allow_stretch=True, height=450))
                self.brxplo_image.reload()
                data_brxplo_wid_vis.ids.dtbrxploplo_vis_grd.add_widget(self.brxplo_image)

                data_brxplo_wid_vis.ids.dtbrxploplo_vis_grd.add_widget(MDLabel(text=""))
                self.data_brxplo_wid.add_widget(data_brxplo_wid_vis)

            except Exception as e:
                print(e)
                self.data_brxplo_wid.ids.out_grid_data_brxplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = str(e)


    def violinplot_sbn(self):

        if self.root.ids.data_vnplo.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.data_vnplo.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.data_vnplo.text_color = get_color_from_hex('000000')

            self.data_vnplo_wid = Factory.data_vnplo_wid()
            self.root.ids.dtprlt_wid_grid.add_widget(self.data_vnplo_wid)


            # setting default values

        else:
            self.root.ids.data_vnplo.md_bg_color = get_color_from_hex('323043')
            self.root.ids.data_vnplo.text_color = get_color_from_hex('ffffff')
            self.root.ids.dtprlt_wid_grid.remove_widget(self.data_vnplo_wid)

        # plot

    def vnplo_sbn_plt(self):

        try:
            self.data_vnplo_wid.ids.out_grid_data_vnplo_wid.clear_widgets()
        except:
            pass

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        x_vnplo = self.data_vnplo_wid.ids.x_vnplo.text
        y_vnplo = self.data_vnplo_wid.ids.y_vnplo.text
        hue_vnplo = self.data_vnplo_wid.ids.hue_vnplo.text.replace(" ", "")
        palette_vnplo = self.data_vnplo_wid.ids.palette_vnplo.text.replace(" ", "")
        font_scale_vnplo = self.data_vnplo_wid.ids.font_scale_vnplo.text.replace(" ", "")

        if x_vnplo == "None":
            x_vnplo = None
        if y_vnplo == "None":
            y_vnplo = None
        if hue_vnplo == "None":
            hue_vnplo = None
        if palette_vnplo == "None":
            palette_vnplo = None

        if font_scale_vnplo == "None":
            font_scale_vnplo = None
        elif "." in font_scale_vnplo and font_scale_vnplo.replace(".", "").replace("-", "").isdigit() == True:

            try:
                font_scale_vnplo = float(font_scale_vnplo)
            except:
                self.data_vnplo_wid.ids.out_grid_data_vnplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        elif font_scale_vnplo.replace("-", "").isdigit() == True:
            try:
                font_scale_vnplo = float(font_scale_vnplo)
            except:
                self.data_vnplo_wid.ids.out_grid_data_vnplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        data_vnplo_wid_vis = Factory.data_vnplo_wid_vis()
        data_vnplo_wid_vis.remove = lambda: self.data_vnplo_wid.remove_widget(data_vnplo_wid_vis)

        if 1 == 1:
            try:

                plt.figure()
                sns.set(font_scale=(font_scale_vnplo))
                sns.set_style(style="white")

                axvnplosnd = sns.violinplot(
                    x=(x_vnplo),
                    y=(y_vnplo),
                    hue=(hue_vnplo),
                    data=DATA,
                    palette=(palette_vnplo)
                    )

                axvnplosnd.tick_params(axis='both')

                axvnplosnd.spines['bottom'].set_color("black")
                axvnplosnd.spines['top'].set_color("black")
                axvnplosnd.spines['right'].set_color("black")
                axvnplosnd.spines['left'].set_color("black")

                axvnplosnd.xaxis.label.set_color('white')
                axvnplosnd.yaxis.label.set_color('white')
                axvnplosnd.tick_params(colors="white", which='both')

                sns.despine()

                plt.savefig("C:/Arc-Plots/violinplot1", transparent=True)

                self.vnplo_image = (
                        Image(source="C:/Arc-Plots/violinplot1.png", size_hint=(1, None), allow_stretch=True, height=450))
                self.vnplo_image.reload()
                data_vnplo_wid_vis.ids.dtvnploplo_vis_grd.add_widget(self.vnplo_image)

                data_vnplo_wid_vis.ids.dtvnploplo_vis_grd.add_widget(MDLabel(text=""))
                self.data_vnplo_wid.add_widget(data_vnplo_wid_vis)

            except Exception as e:
                print(e)
                self.data_vnplo_wid.ids.out_grid_data_vnplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = str(e)

    def boxplot_sbn(self):

        if self.root.ids.data_bxtplo.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.data_bxtplo.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.data_bxtplo.text_color = get_color_from_hex('000000')

            self.data_bxtplo_wid = Factory.data_bxtplo_wid()
            self.root.ids.dtprlt_wid_grid.add_widget(self.data_bxtplo_wid)


            # setting default values

        else:
            self.root.ids.data_bxtplo.md_bg_color = get_color_from_hex('323043')
            self.root.ids.data_bxtplo.text_color = get_color_from_hex('ffffff')
            self.root.ids.dtprlt_wid_grid.remove_widget(self.data_bxtplo_wid)

        # plot

    def bxtplo_sbn_plt(self):

        try:
            self.data_bxtplo_wid.ids.out_grid_data_bxtplo_wid.clear_widgets()
        except:
            pass

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        x_bxtplo = self.data_bxtplo_wid.ids.x_bxtplo.text
        y_bxtplo = self.data_bxtplo_wid.ids.y_bxtplo.text
        hue_bxtplo = self.data_bxtplo_wid.ids.hue_bxtplo.text.replace(" ", "")
        palette_bxtplo = self.data_bxtplo_wid.ids.palette_bxtplo.text.replace(" ", "")
        font_scale_bxtplo = self.data_bxtplo_wid.ids.font_scale_bxtplo.text.replace(" ", "")

        if x_bxtplo == "None":
            x_bxtplo = None
        if y_bxtplo == "None":
             y_bxtplo = None
        if hue_bxtplo == "None":
            hue_bxtplo = None
        if palette_bxtplo == "None":
            palette_bxtplo = None

        if font_scale_bxtplo == "None":
            font_scale_bxtplo = None
        elif "." in font_scale_bxtplo and font_scale_bxtplo.replace(".", "").replace("-", "").isdigit() == True:

            try:
                font_scale_bxtplo = float(font_scale_bxtplo)
            except:
                self.data_bxtplo_wid.ids.out_grid_data_bxtplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        elif font_scale_bxtplo.replace("-", "").isdigit() == True:
            try:
                font_scale_bxtplo = float(font_scale_bxtplo)
            except:
                self.data_bxtplo_wid.ids.out_grid_data_bxtplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        data_bxtplo_wid_vis = Factory.data_bxtplo_wid_vis()
        data_bxtplo_wid_vis.remove = lambda: self.data_bxtplo_wid.remove_widget(data_bxtplo_wid_vis)

        if 1 == 1:
            try:

                plt.figure()
                sns.set(font_scale=(font_scale_bxtplo))
                sns.set_style(style="white")

                axbxtplosnd = sns.boxplot(
                    x=(x_bxtplo),
                    y=(y_bxtplo),
                    hue=(hue_bxtplo),
                    data=DATA,
                    palette=(palette_bxtplo)
                    )

                axbxtplosnd.tick_params(axis='both')

                axbxtplosnd.spines['bottom'].set_color("black")
                axbxtplosnd.spines['top'].set_color("black")
                axbxtplosnd.spines['right'].set_color("black")
                axbxtplosnd.spines['left'].set_color("black")

                axbxtplosnd.xaxis.label.set_color('white')
                axbxtplosnd.yaxis.label.set_color('white')
                axbxtplosnd.tick_params(colors="white", which='both')

                sns.despine()

                plt.savefig("C:/Arc-Plots/boxplot1", transparent=True)

                self.bxtplo_image = (
                        Image(source="C:/Arc-Plots/boxplot1.png", size_hint=(1, None), allow_stretch=True, height=450))
                self.bxtplo_image.reload()
                data_bxtplo_wid_vis.ids.dtbxtploplo_vis_grd.add_widget(self.bxtplo_image)

                data_bxtplo_wid_vis.ids.dtbxtploplo_vis_grd.add_widget(MDLabel(text=""))
                self.data_bxtplo_wid.add_widget(data_bxtplo_wid_vis)

            except Exception as e:
                print(e)
                self.data_bxtplo_wid.ids.out_grid_data_bxtplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = str(e)

    def lineplot_sbn(self):

        if self.root.ids.data_lnplo.md_bg_color == get_color_from_hex('323043'):
            self.root.ids.data_lnplo.md_bg_color = get_color_from_hex('ffffff')
            self.root.ids.data_lnplo.text_color = get_color_from_hex('000000')
            self.data_lnplo_wid = Factory.data_lnplo_wid()
            self.root.ids.dtprlt_wid_grid.add_widget(self.data_lnplo_wid)


            # setting default values

        else:
            self.root.ids.data_lnplo.md_bg_color = get_color_from_hex('323043')
            self.root.ids.data_lnplo.text_color = get_color_from_hex('ffffff')
            self.root.ids.dtprlt_wid_grid.remove_widget(self.data_lnplo_wid)

        # plot

    def lnplo_sbn_plt(self):

        try:
            self.data_lnplo_wid.ids.out_grid_data_lnplo_wid.clear_widgets()
        except:
            pass

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        x_lnplo = self.data_lnplo_wid.ids.x_lnplo.text
        y_lnplo = self.data_lnplo_wid.ids.y_lnplo.text
        hue_lnplo = self.data_lnplo_wid.ids.hue_lnplo.text.replace(" ", "")
        palette_lnplo = self.data_lnplo_wid.ids.palette_lnplo.text.replace(" ", "")
        font_scale_lnplo = self.data_lnplo_wid.ids.font_scale_lnplo.text.replace(" ", "")

        if x_lnplo == "None":
            x_lnplo = None
        if y_lnplo == "None":
            y_lnplo = None
        if hue_lnplo == "None":
            hue_lnplo = None
        if palette_lnplo == "None":
            palette_lnplo = None

        if font_scale_lnplo == "None":
            font_scale_lnplo = None
        elif "." in font_scale_lnplo and font_scale_lnplo.replace(".", "").replace("-", "").isdigit() == True:

            try:
                font_scale_lnplo = float(font_scale_lnplo)
            except:
                self.data_lnplo_wid.ids.out_grid_data_lnplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        elif font_scale_lnplo.replace("-", "").isdigit() == True:
            try:
                font_scale_lnplo = float(font_scale_lnplo)
            except:
                self.data_lnplo_wid.ids.out_grid_data_lnplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = "font_scale: unexpected input"

        data_lnplo_wid_vis = Factory.data_lnplo_wid_vis()
        data_lnplo_wid_vis.remove = lambda: self.data_lnplo_wid.remove_widget(data_lnplo_wid_vis)

        if 1 == 1:
            try:

                plt.figure()
                sns.set(font_scale=(font_scale_lnplo))
                sns.set_style(style="white")

                axlnplosnd = sns.lineplot(
                    x=(x_lnplo),
                    y=(y_lnplo),
                    hue=(hue_lnplo),
                    data=DATA,
                    palette=(palette_lnplo)
                    )

                axlnplosnd.tick_params(axis='both')

                axlnplosnd.spines['bottom'].set_color("black")
                axlnplosnd.spines['top'].set_color("black")
                axlnplosnd.spines['right'].set_color("black")
                axlnplosnd.spines['left'].set_color("black")

                axlnplosnd.xaxis.label.set_color('white')
                axlnplosnd.yaxis.label.set_color('white')
                axlnplosnd.tick_params(colors="white", which='both')

                sns.despine()

                plt.savefig("C:/Arc-Plots/lineplot1", transparent=True)

                self.lnplo_image = (Image(source="C:/Arc-Plots/lineplot1.png", size_hint=(1, None), allow_stretch=True, height=450))
                self.lnplo_image.reload()
                data_lnplo_wid_vis.ids.dtlnploplo_vis_grd.add_widget(self.lnplo_image)

                data_lnplo_wid_vis.ids.dtlnploplo_vis_grd.add_widget(MDLabel(text=""))
                self.data_lnplo_wid.add_widget(data_lnplo_wid_vis)

            except Exception as e:
                print(e)
                self.data_lnplo_wid.ids.out_grid_data_lnplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = str(e)

    def  sctplo_sbn_plt(self):

    	try:
    		self.data_sctplo_wid.ids.out_grid_data_sctplo_wid.clear_widgets()
    	except:
    		pass

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	x_sctplo=self.data_sctplo_wid.ids.x_sctplo.text
    	y_sctplo=self.data_sctplo_wid.ids.y_sctplo.text
    	hue_sctplo=self.data_sctplo_wid.ids.hue_sctplo.text.replace(" ","")
    	size_sctplo=self.data_sctplo_wid.ids.size_sctplo.text.replace(" ","")
    	palette_sctplo=self.data_sctplo_wid.ids.palette_sctplo.text.replace(" ","")
    	#hue_order_sctplo=self.data_sctplo_wid.ids.hue_order_sctplo.text.replace(" ","")
    	n_boot_sctplo=self.data_sctplo_wid.ids.n_boot_sctplo.text.replace(" ","")
    	alpha_sctplo=self.data_sctplo_wid.ids.alpha_sctplo.text.replace(" ","")
    	font_scale_sctplo=self.data_sctplo_wid.ids.font_scale_sctplo.text.replace(" ","")

    	if x_sctplo=="None":
    		x_sctplo=None
    	if y_sctplo=="None":
    	    y_sctplo=None
    	if hue_sctplo=="None":
    	    hue_sctplo=None
    	if size_sctplo=="None":
    	    size_sctplo=None
    	if palette_sctplo=="None":
    	    palette_sctplo=None
    	#if hue_order_sctplo=="None":
    	    #hue_order_sctplo=None

    	if alpha_sctplo=="None":
        	alpha_sctplo=None
    	elif "." in alpha_sctplo and alpha_sctplo.replace(".", "").replace("-","").isdigit()==True:

        	try:
        		alpha_sctplo=float(alpha_sctplo)
        	except:
        		self.data_sctplo_wid.ids.out_grid_data_sctplo_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="alpha: unexpected input"

    	elif alpha_sctplo.replace("-","").isdigit()==True:
        	try:
        		alpha_sctplo=float(alpha_sctplo)
        	except:
        		self.data_sctplo_wid.ids.out_grid_data_sctplo_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="alpha: unexpected input"


    	if font_scale_sctplo=="None":
        	font_scale_sctplo=None
    	elif "." in font_scale_sctplo and font_scale_sctplo.replace(".", "").replace("-","").isdigit()==True:

        	try:
        		font_scale_sctplo=float(font_scale_sctplo)
        	except:
        		self.data_sctplo_wid.ids.out_grid_data_sctplo_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"

    	elif font_scale_sctplo.replace("-","").isdigit()==True:
        	try:
        		font_scale_sctplo=float(font_scale_sctplo)
        	except:
        		self.data_sctplo_wid.ids.out_grid_data_sctplo_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"


    	if n_boot_sctplo.replace("-","").isdigit()==True:
        	try:
        		n_boot_sctplo=int(n_boot_sctplo)
        	except:
        		self.data_sctplo_wid.ids.out_grid_data_sctplo_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="n_boot: unexpected input"

    	else:
        	self.data_sctplo_wid.ids.out_grid_data_sctplo_wid.add_widget(self.output_crd_err)
        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text="n_boot: unexpected input"

    	data_sctplo_wid_vis=Factory.data_sctplo_wid_vis()
    	data_sctplo_wid_vis.remove = lambda: self.data_sctplo_wid.remove_widget(data_sctplo_wid_vis)

    	if 1==1:
        	try:

        		plt.figure()
        		sns.set(font_scale=(font_scale_sctplo))
        		sns.set_style(style="white")

        		axsctplosnd=sns.scatterplot(
        		x=(x_sctplo),
        		y=(y_sctplo),
        		hue=(hue_sctplo),
        		size=(size_sctplo),
        		data=DATA,
        		palette=(palette_sctplo),
        		#hue_order=(hue_order_sctplo),
        		n_boot=(n_boot_sctplo),
        		alpha=(alpha_sctplo),
        		legend=legend_sctplo_val,
        		edgecolor="none"
        		)
        		axsctplosnd.tick_params(axis='both')


        		axsctplosnd.spines['bottom'].set_color("black")
        		axsctplosnd.spines['top'].set_color("black")
        		axsctplosnd.spines['right'].set_color("black")
        		axsctplosnd.spines['left'].set_color("black")

        		axsctplosnd.xaxis.label.set_color('white')
        		axsctplosnd.yaxis.label.set_color('white')
        		axsctplosnd.tick_params(colors="white", which='both')

        		if despine_sctplo_val=="True":
        			sns.despine()
        		else:
        			pass
        		plt.savefig("C:/Arc-Plots/scatterplot1",transparent=True)

        		self.sctplo_image=(Image(source="C:/Arc-Plots/scatterplot1.png",size_hint=(1, None),allow_stretch=True,height=450))
        		self.sctplo_image.reload()
        		data_sctplo_wid_vis.ids.dtsctploplo_vis_grd.add_widget(self.sctplo_image)

        		data_sctplo_wid_vis.ids.dtsctploplo_vis_grd.add_widget(MDLabel(text=""))
        		self.data_sctplo_wid.add_widget(data_sctplo_wid_vis)

        	except Exception as e:
        		print(e)
        		self.data_sctplo_wid.ids.out_grid_data_sctplo_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(e)

    def auto_sctplo(self):

        if self.data_sctplo_wid.ids.brief_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.brief_sctplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_sctplo_wid.ids.full_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.full_sctplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_sctplo_wid.ids.False_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.False_sctplo_chk.md_bg_color=get_color_from_hex('323043')
        self.data_sctplo_wid.ids.auto_sctplo_chk.md_bg_color=get_color_from_hex('808080')

        global legend_sctplo_val
        legend_sctplo_val="auto"

    def brief_sctplo(self):


        if self.data_sctplo_wid.ids.auto_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.auto_sctplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_sctplo_wid.ids.full_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.full_sctplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_sctplo_wid.ids.False_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.False_sctplo_chk.md_bg_color=get_color_from_hex('323043')
        self.data_sctplo_wid.ids.brief_sctplo_chk.md_bg_color=get_color_from_hex('808080')


        global legend_sctplo_val
        legend_sctplo_val="brief"

    def full_sctplo(self):


        if self.data_sctplo_wid.ids.auto_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.auto_sctplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_sctplo_wid.ids.brief_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.brief_sctplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_sctplo_wid.ids.False_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.False_sctplo_chk.md_bg_color=get_color_from_hex('323043')
        self.data_sctplo_wid.ids.full_sctplo_chk.md_bg_color=get_color_from_hex('808080')

        global legend_sctplo_val
        legend_sctplo_val="full"

    def False_sctplo(self):


        if self.data_sctplo_wid.ids.auto_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.auto_sctplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_sctplo_wid.ids.brief_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.brief_sctplo_chk.md_bg_color=get_color_from_hex('323043')

        if self.data_sctplo_wid.ids.full_sctplo_chk.md_bg_color==get_color_from_hex('808080'):
        	self.data_sctplo_wid.ids.full_sctplo_chk.md_bg_color=get_color_from_hex('323043')
        self.data_sctplo_wid.ids.False_sctplo_chk.md_bg_color=get_color_from_hex('808080')

        global legend_sctplo_val
        legend_sctplo_val=False

    def despine_sctplo(self,checkbox,value):
    	global despine_sctplo_val
    	if value:
    		despine_sctplo_val="True"
    	else:
    		despine_sctplo_val="False"

    def jntplo_sbn_plt(self):

        try:
            self.data_jntplo_wid.ids.out_grid_data_jntplo_wid.clear_widgets()
        except:
            pass

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        x_jntplo = self.data_jntplo_wid.ids.x_jntplo.text
        y_jntplo = self.data_jntplo_wid.ids.y_jntplo.text
        # color_jntplo=self.data_jntplo_wid.ids.color_jntplo.text.replace(" ","")
        height_jntplo = self.data_jntplo_wid.ids.height_jntplo.text.replace(" ", "")
        # ratio_jntplo=self.data_jntplo_wid.ids.ratio_jntplo.text.replace(" ","")
        # space_jntplo=self.data_jntplo_wid.ids.space_jntplo.text.replace(" ","")
        hue_jntplo = self.data_jntplo_wid.ids.hue_jntplo.text.replace(" ", "")
        palette_jntplo = self.data_jntplo_wid.ids.palette_jntplo.text.replace(" ", "")
        # hue_order_jntplo=self.data_jntplo_wid.ids.hue_order_jntplo.text.replace(" ","")
        font_scale_jntplo = self.data_jntplo_wid.ids.font_scale_jntplo.text.replace(" ", "")

        if x_jntplo == "None":
            x_jntplo = None
        if y_jntplo == "None":
            y_jntplo = None
        # if color_jntplo=="None":
        # color_jntplo=None
        if hue_jntplo == "None":
            hue_jntplo = None
        if palette_jntplo == "None":
            palette_jntplo = None
        # if hue_order_jntplo=="None":
        #   hue_order_jntplo=None

        if font_scale_jntplo == "None":
            font_scale_jntplo = None
        elif "." in font_scale_jntplo and font_scale_jntplo.replace(".", "").replace("-", "").isdigit() == True:

            try:
                font_scale_jntplo = float(font_scale_jntplo)
            except:
                print("unexpected input flt")
        elif font_scale_jntplo.replace("-", "").isdigit() == True:
            try:
                font_scale_jntplo = float(font_scale_jntplo)
            except:
                print("unexpected input ")

        if height_jntplo == "None":
            height_jntplo = None
        elif "." in height_jntplo and height_jntplo.replace(".", "").replace("-", "").isdigit() == True:

            try:
                height_jntplo = float(height_jntplo)
            except:
                print("unexpected input flt")
        elif height_jntplo.replace("-", "").isdigit() == True:
            try:
                height_jntplo = float(height_jntplo)
            except:
                print("unexpected input ")

        # if space_jntplo=="None":
        #	space_jntplo=None
        # elif "." in space_jntplo and space_jntplo.replace(".", "").replace("-","").isdigit()==True:

        #	try:
        #		space_jntplo=float(space_jntplo)
        #	except:
        #		print("unexpected input flt")
        # elif space_jntplo.replace("-","").isdigit()==True:
        #	try:
        #		space_jntplo=float(space_jntplo)
        #	except:
        #		print("unexpected input ")

        # if ratio_jntplo.replace("-","").isdigit()==True:
        #	try:
        #		ratio_jntplo=int(ratio_jntplo)
        #	except:
        #		print("unexpected input")
        # else:
        #	print("unexpected input")

        data_jntplo_wid_vis = Factory.data_jntplo_wid_vis()
        data_jntplo_wid_vis.remove = lambda: self.data_jntplo_wid.remove_widget(data_jntplo_wid_vis)

        if 1 == 1:
            try:
                plt.figure()
                sns.set(font_scale=(font_scale_jntplo))
                sns.set_style(style="white")

                axjntplosnd = sns.jointplot(
                    x=(x_jntplo),
                    y=(y_jntplo),
                    data=DATA,
                    kind=(kind_jntplo_val),
                    # color=(color_jntplo),
                    height=(height_jntplo),
                    # ratio=(ratio_jntplo),
                    # space=(space_jntplo),
                    dropna=dropna_jntplo_val,
                    marginal_ticks=marginal_ticks_jntplo_val,
                    hue=(hue_jntplo),
                    palette=(palette_jntplo),
                    # hue_order=(hue_order_jntplo)
                )

                # axjntplosnd.xaxis.label.set_color('white')
                # axjntplosnd.yaxis.label.set_color('white')
                # axjntplosnd.tick_params(colors="white", which='both')
                plt.savefig("C:/Arc-Plots/jointplot1", transparent=True)

                self.jntplo_image = (
                    Image(source="C:/Arc-Plots/jointplot1.png", size_hint=(1, None), allow_stretch=True, height=600))
                self.jntplo_image.reload()
                data_jntplo_wid_vis.ids.dtjntploplo_vis_grd.add_widget(self.jntplo_image)

                data_jntplo_wid_vis.ids.dtjntploplo_vis_grd.add_widget(MDLabel(text=""))
                self.data_jntplo_wid.add_widget(data_jntplo_wid_vis)

            except Exception as e:
                print(e)
                self.data_jntplo_wid.ids.out_grid_data_jntplo_wid.add_widget(self.output_crd_err)
                self.output_crd_err.ids.output_text_err_heading.text = "[b]Error"
                self.output_crd_err.ids.output_text_err.text = str(e)

    def scatter_jntplo(self):
    	global kind_jntplo_val
    	kind_jntplo_val="scatter"

    def kde_jntplo(self):
    	global kind_jntplo_val
    	kind_jntplo_val="kde"

    def hex_jntplo(self):
    	global kind_jntplo_val
    	kind_jntplo_val="hex"

    def hist_jntplo(self):
    	global kind_jntplo_val
    	kind_jntplo_val="hist"

    def reg_jntplo(self):
    	global kind_jntplo_val
    	kind_jntplo_val="reg"

    def resid_jntplo(self):
    	global kind_jntplo_val
    	kind_jntplo_val="resid"


    def matrix_msg(self):

        if self.root.ids.data_matrix_msg.md_bg_color==get_color_from_hex('323043'):

        	self.matrix_msg_vis=Factory.matrix_msg_vis()

        	try:

        		fig = msno.matrix(DATA)
        		#fig.xaxis.label.set_color("white")
        		#fig.yaxis.label.set_color("white")
        		fig_copy = fig.get_figure()
        		fig_copy.savefig("C:/Arc-Plots/missing_values_matrix", bbox_inches = 'tight', transparent=False)

        		self.msgmatrix_image_2=(Image(source="C:/Arc-Plots/missing_values_matrix.png",size_hint=(1, None),allow_stretch=True,height=350))
        		self.img124=MDLabel(text="")
        		self.msgmatrix_image_2.reload()
        		self.matrix_msg_vis.ids.msgmatrix_vis_grd.add_widget(self.msgmatrix_image_2)
        		self.matrix_msg_vis.ids.msgmatrix_vis_grd.add_widget(self.img124)


        		self.root.ids.data_matrix_msg.md_bg_color=get_color_from_hex('ffffff')
        		self.root.ids.data_matrix_msg.text_color=get_color_from_hex('000000')
        		self.root.ids.dtprlt_wid_grid.add_widget(self.matrix_msg_vis)
        	except Exception as e:
        		print(e)


        else:
        	self.root.ids.data_matrix_msg.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_matrix_msg.text_color=get_color_from_hex('ffffff')
        	try:

        		self.root.ids.dtprlt_wid_grid.remove_widget(self.matrix_msg_vis)
        	except Exception as e:
        		print(e)


    def dropna_jntplo(self,checkbox,value):
    	global dropna_jntplo_val
    	if value:
    		dropna_jntplo_val=True
    	else:
    		dropna_jntplo_val=False

    def marginal_ticks_jntplo(self,checkbox,value):

    	global marginal_ticks_jntplo_val
    	if value:
    		marginal_ticks_jntplo_val=True
    	else:
    		marginal_ticks_jntplo_val=False


    def ctplo_sbn(self):

        if self.root.ids.data_ctplo.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_ctplo.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_ctplo.text_color=get_color_from_hex('000000')

        	self.data_ctplo_wid=Factory.data_ctplo_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.data_ctplo_wid)

        else:
        	self.root.ids.data_ctplo.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_ctplo.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.data_ctplo_wid)


    def strplo_sbn(self):

        if self.root.ids.data_strplo.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_strplo.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_strplo.text_color=get_color_from_hex('000000')

        	self.data_strplo_wid=Factory.data_strplo_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.data_strplo_wid)

        else:
        	self.root.ids.data_strplo.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_strplo.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.data_strplo_wid)


    def swmplo_sbn(self):

        if self.root.ids.data_swmplo.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_swmplo.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_swmplo.text_color=get_color_from_hex('000000')

        	self.data_swmplo_wid=Factory.data_swmplo_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.data_swmplo_wid)

        else:
        	self.root.ids.data_swmplo.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_swmplo.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.data_swmplo_wid)

    def bxplo_sbn(self):

        if self.root.ids.data_bxplo.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_bxplo.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_bxplo.text_color=get_color_from_hex('000000')

        	self.data_bxplo_wid=Factory.data_bxplo_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.data_bxplo_wid)

        else:
        	self.root.ids.data_bxplo.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_bxplo.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.data_bxplo_wid)

    def  kde_sbn(self):

        if self.root.ids.data_kde.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_kde.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_kde.text_color=get_color_from_hex('000000')

        	self.data_kde_wid=Factory.data_kde_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.data_kde_wid)

        	self.data_kde_wid.ids.shade_kdeplo_chk.active=True
        	self.data_kde_wid.ids.vertical_kdeplo_chk.active=True
        	self.data_kde_wid.ids.vertical_kdeplo_chk.active=False
        	self.data_kde_wid.ids.legend_kdeplo_chk.active=True
        	self.data_kde_wid.ids.cbar_kdeplo_chk.active=True
        	self.data_kde_wid.ids.cbar_kdeplo_chk.active=False
        	self.data_kde_wid.ids.despine_kdeplo_chk.active=True
        	#self.data_kde_wid.ids.despine_kdeplo_chk.active=False

        	self.data_kde_wid.ids.cumulative_kdeplo_chk.active=True
        	self.data_kde_wid.ids.cumulative_kdeplo_chk.active=False
        	self.data_kde_wid.ids.common_norm_kdeplo_chk.active=True
        	self.data_kde_wid.ids.common_grid_kdeplo_chk.active=True
        	self.data_kde_wid.ids.common_grid_kdeplo_chk.active=False
        	self.data_kde_wid.ids.warn_singular_kdeplo_chk.active=True
        	self.layer_kdeplo()

        else:
        	self.root.ids.data_kde.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_kde.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.data_kde_wid)

    def  htmap_sbn(self):

        if self.root.ids.data_htmap.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_htmap.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_htmap.text_color=get_color_from_hex('000000')


        	self.htmap_wid=Factory.data_htmap_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.htmap_wid)

        	self.htmap_wid.ids.vmin_htid.text='None'
        	self.htmap_wid.ids.vmax_htid.text='None'
        	self.htmap_wid.ids.cmap_htid.text='None'
        	self.htmap_wid.ids.center_htid.text='None'
        	self.htmap_wid.ids.fmt_htid.text=".2g"
        	self.htmap_wid.ids.linewidths_htid.text="0"
        	self.htmap_wid.ids.linecolor_htid.text="white"
        	self.htmap_wid.ids.fnt_sz.text="1"
        	self.htmap_wid.ids.ax_htid.text='None'
        	self.htmap_wid.ids.robust_ht_chk.active=True
        	self.htmap_wid.ids.robust_ht_chk.active=False
        	self.htmap_wid.ids.annot_ht_chk.active=True
        	self.htmap_wid.ids.annot_ht_chk.active=False
        	self.htmap_wid.ids.cbar_ht_chk.active=True

        	self.htmap_wid.ids.square_ht_chk.active=True
        	self.htmap_wid.ids.square_ht_chk.active=False
        	self.htmap_wid.ids.mask_ht_chk.active=True
        	self.htmap_wid.ids.mask_ht_chk.active=False

        else:
        	self.root.ids.data_htmap.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_htmap.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.htmap_wid)





    def  htmap_sbn_plt(self):
    	try:
    		self.htmap_wid.ids.out_grid_htmap_wid.clear_widgets()
    	except:
    		pass
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	vmin_htid=self.htmap_wid.ids.vmin_htid.text.replace(" ", "")
    	vmax_htid=self.htmap_wid.ids.vmax_htid.text.replace(" ", "")
    	cmap_htid=self.htmap_wid.ids.cmap_htid.text.replace(" ", "")
    	center_htid=self.htmap_wid.ids.center_htid.text.replace(" ", "")

    	fmt_htid=self.htmap_wid.ids.fmt_htid.text.replace(" ", "")
    	linewidths_htid=self.htmap_wid.ids.linewidths_htid.text.replace(" ", "")

    	linecolor_htid=self.htmap_wid.ids.linecolor_htid.text.replace(" ", "")
    	ax_htid=self.htmap_wid.ids.ax_htid.text.replace(" ", "")
    	fnt_sz=self.htmap_wid.ids.fnt_sz.text.replace(" ", "")

    	if fnt_sz=="None":
    		fnt_sz=None
    	elif "." in fnt_sz and fnt_sz.replace(".", "").replace("-","").isdigit()==True:

        	try:
        		fnt_sz=float(fnt_sz)
        	except:
        		self.htmap_wid.ids.out_grid_htmap_wid.add_widget(self.output_crd_err)

        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
        		return

    	elif fnt_sz.replace("-","").isdigit()==True:
        	try:
        		fnt_sz=float(fnt_sz)
        	except:
        		self.htmap_wid.ids.out_grid_htmap_wid.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
        		return

    	else:
    		self.htmap_wid.ids.out_grid_htmap_wid.add_widget(self.output_crd_err)
    		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    		self.output_crd_err.ids.output_text_err.text="font_scale: unexpected input"
    		return


    	if vmin_htid=="None":
        	vmin_htid=None
    	if vmax_htid=="None":
        	vmax_htid=None
    	if cmap_htid=="None":
        	cmap_htid=None
    	if center_htid=="None":
        	center_htid=None
    	if fmt_htid=="None":
        	fmt_htid=None
    	if linewidths_htid=="None":
        	linewidths_htid=None
    	if linecolor_htid=="None":
        	linecolor_htid=None
    	if ax_htid=="None":
        	ax_htid=None


    	try:
        	plt.figure()
        	sns.set(font_scale=(fnt_sz))
        	sns.heatmap(DATA.corr(),
        	vmin=(vmin_htid),
        	vmax=(vmax_htid),
            cmap=(cmap_htid),
        	center=(center_htid),
            robust=rbsthtmp,
        	annot=anthmp,
            fmt=(fmt_htid),

            linewidths=(linewidths_htid),
            linecolor=(linecolor_htid),
    	    cbar=cbarmpt,

            cbar_ax=None,
        	square=sqrhtp,

            mask=mskht,
        	ax=(ax_htid))

        	plt.savefig("C:/Arc-Plots/heatmap1",transparent=True)

    	except Exception as e:
    		self.htmap_wid.ids.out_grid_htmap_wid.add_widget(self.output_crd_err)
    		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
    		self.output_crd_err.ids.output_text_err.text=str(e)




    def  cltrmap_sbn(self):


        if self.root.ids.data_cltrmap.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_cltrmap.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_cltrmap.text_color=get_color_from_hex('000000')

        	self.cltrmap_wid=Factory.data_cltrmap_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.cltrmap_wid)
        	self.cltrmap_wid.ids.mask_ctmap_chk.active=True
        	self.cltrmap_wid.ids.mask_ctmap_chk.active=False

        else:
        	self.root.ids.data_cltrmap.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_cltrmap.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.cltrmap_wid)


    def cltrmap_sbn_plt(self):
    	try:
    		self.data_cltrmap_wid.ids.out_grid_data_cltrmap_wid.clear_widgets()
    	except:
    		pass
    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()


    	method_ctmap=self.cltrmap_wid.ids.method_ctmap.text.replace(" ", "")
    	metric_ctmap=self.cltrmap_wid.ids.metric_ctmap.text.replace(" ", "")
    	z_score_ctmap=self.cltrmap_wid.ids.z_score_ctmap.text.replace(" ", "")
    	standard_scale_ctmap=self.cltrmap_wid.ids.standard_scale_ctmap.text.replace(" ", "")
    	cbar_kws_ctmap=self.cltrmap_wid.ids.cbar_kws_ctmap.text.replace(" ", "")
    	deco_ctmap=self.cltrmap_wid.ids.deco_ctmap.text.replace(" ", "")
    	cbar_pos_ctmap=self.cltrmap_wid.ids.cbar_pos_ctmap.text.replace(" ", "")

########
    	try:
        	axctmap=sns.clustermap(data=DATA,
        	method=(method_ctmap),
        	metric=(metric_ctmap),
        	z_score=(z_score_ctmap),
        	standard_scale=(standard_scale_ctmap),
            figsize=(10, 10),
        	cbar_kws=(cbar_kws_ctmap),
        	row_cluster=True,
        	col_cluster=True,
            row_linkage=None,
            col_linkage=None,
            row_colors=None,
        	col_colors=None,
            mask=None,
        	dendrogram_ratio=0.2,
            colors_ratio=0.03,
        	cbar_pos=(0.02, 0.8, 0.05, 0.18),
            tree_kws=None)
            #axctmap.get_xticklabels().set_color('white')
            #plt.savefig("C:/Arc-Plots/clustermap1")

    	except Exception as e:
        	self.htmap_wid.ids.out_grid_htmap_wid.add_widget(self.output_crd_err)

        	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        	self.output_crd_err.ids.output_text_err.text=str(e)

    def  countplt_sbn(self):

        if self.root.ids.data_countplt_sbn.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.data_countplt_sbn.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.data_countplt_sbn.text_color=get_color_from_hex('000000')


        	self.countplt_wid=Factory.data_countplt_sbn_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.countplt_wid)

        	self.countplt_wid.ids.x_cntplt.text="None"
        	self.countplt_wid.ids.y_cntplt.text="None"
        	self.countplt_wid.ids.hue_cntplt.text="None"
        	self.countplt_wid.ids.order_cntplt.text="None"
        	self.countplt_wid.ids.hue_order_cntplt.text="None"
        	self.countplt_wid.ids.color_cntplt.text="None"
        	self.countplt_wid.ids.palette_cntplt.text="None"
        	self.countplt_wid.ids.saturation_cntplt.text="0.75"
        	self.countplt_wid.ids.ax_cntplt.text="None"
        	self.countplt_wid.ids.fntscct.text="1"

        	self.vertical_cntplt()
        	self.countplt_wid.ids.dodge_cntplt_chk.active=True
        	self.countplt_sbn_plt()

        else:

        	self.root.ids.data_countplt_sbn.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.data_countplt_sbn.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.countplt_wid)

    def countplt_sbn_plt(self):

        x_cntplt=self.countplt_wid.ids.x_cntplt.text
        y_cntplt=self.countplt_wid.ids.y_cntplt.text
        hue_cntplt=self.countplt_wid.ids.hue_cntplt.text.replace(" ", "")
        order_cntplt=self.countplt_wid.ids.order_cntplt.text.replace(" ", "")
        hue_order_cntplt=self.countplt_wid.ids.hue_order_cntplt.text.replace(" ", "")
        color_cntplt=self.countplt_wid.ids.color_cntplt.text.replace(" ", "")
        palette_cntplt=self.countplt_wid.ids.palette_cntplt.text.replace(" ", "")
        saturation_cntplt=self.countplt_wid.ids.saturation_cntplt.text.replace(" ", "")
        ax_cntplt=self.countplt_wid.ids.ax_cntplt.text.replace(" ", "")
        fntscct=self.countplt_wid.ids.fntscct.text.replace(" ", "")

        if fntscct=="None":
        	fntscct=None
        elif "." in fntscct and fntscct.replace(".", "").replace("-","").isdigit()==True or fntscct.replace("-","").isdigit()==True:
        	try:
        		fntscct=float(fntscct)
        	except:
        		print("unexpected input")
        else:
        	print("unexpected input")


        if saturation_cntplt=="None":
        	saturation_cntplt=None
        elif "." in saturation_cntplt and saturation_cntplt.replace(".", "").replace("-","").isdigit()==True or saturation_cntplt.replace("-","").isdigit()==True:
        	try:
        		saturation_cntplt=float(saturation_cntplt)
        	except:
        		print("unexpected input")
        else:
        	print("unexpected input")

        if x_cntplt=="None":
        	x_cntplt=None
        if y_cntplt=="None":
        	y_cntplt=None
        if hue_cntplt=="None":
        	hue_cntplt=None
        if order_cntplt=="None":
        	order_cntplt=None
        if hue_order_cntplt=="None":
        	hue_order_cntplt=None
        if color_cntplt=="None":
        	color_cntplt=None
        if palette_cntplt=="None":
        	palette_cntplt=None
        if saturation_cntplt=="None":
        	saturation_cntplt=None
        if ax_cntplt=="None":
        	ax_cntplt=None


        try:

        	plt.figure()
        	sns.set(font_scale=(fntscct))
        	sns.countplot(data=DATA,
            x=(x_cntplt),
            y=(y_cntplt),
        	hue=(hue_cntplt),
        	order=(order_cntplt),
        	hue_order=(hue_order_cntplt),
        	orient=(vrtclcnt),
            color=(color_cntplt),
            palette=(palette_cntplt),
        	saturation=(float(saturation_cntplt)),
        	dodge=dgctpt,
        	ax=(ax_cntplt))

        	plt.savefig("C:/Arc-Plots/countplot1",transparent=True)

        except Exception as e:
        	print(e)

    def vertical_cntplt(self):
    	global vrtclcnt
    	vrtclcnt="vertical"

    def horizontal_cntplt(self):
    	global vrtclcnt
    	vrtclcnt="horizontal"

    def dodge_cntplt(self,checkbox,value):

    	global dgctpt
    	if value:
    	    dgctpt=True
    	else:
        	dgctpt=False

    def maxabsscls_cls(self):

        if self.root.ids.max_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.max_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.max_chk.text_color=get_color_from_hex('000000')
        	self.slr_max_wid=Factory.slr_max_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_max_wid)

        	self.slr_max_wid.ids.maxabcpy_scl_chk.active=True

        else:
        	self.root.ids.max_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.max_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_max_wid)

        	try:
        		preprocessing_fit_status.remove("maxabsscaler")
        	except:
        		pass

        	try:
        		maxabstp= [t[0] for t in gbl_pl].index('maxabs_scaler_gb')
        		gbl_pl.pop(maxabstp)

        	except:
        		pass

    def quatcls_cls(self):

        if self.root.ids.qt_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.qt_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.qt_chk.text_color=get_color_from_hex('000000')
        	self.slr_qt_wid=Factory.slr_qt_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_qt_wid)

        	self.slr_qt_wid.ids.cpy_qttr_chk.active=True
        	self.slr_qt_wid.ids.igimzr_qttr_cls_chk.active=True
        	self.slr_qt_wid.ids.igimzr_qttr_cls_chk.active=False
        	self.uniform_qttr()

        else:
        	self.root.ids.qt_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.qt_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_qt_wid)

        	try:
        		preprocessing_fit_status.remove("quantiletransformer")
        	except:
        		pass

        	try:
        		qttrstp= [t[0] for t in gbl_pl].index('quantile_transformer_gb')
        		gbl_pl.pop(qttrstp)

        	except:
        		pass

    def robst_cls(self):

        if self.root.ids.rbst_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.rbst_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.rbst_chk.text_color=get_color_from_hex('000000')
        	self.slr_robust_wid=Factory.slr_robust_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_robust_wid)

        	self.slr_robust_wid.ids.with_centering_rbstsr_chk.active=True
        	self.slr_robust_wid.ids.with_scaling_rbstsr_chk.active=True
        	self.slr_robust_wid.ids.copy_rbstsr_chk.active=True
        	self.slr_robust_wid.ids.unit_variance_rbstsr_chk.active=True


        else:
        	self.root.ids.rbst_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.rbst_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_robust_wid)

        	try:
        		preprocessing_fit_status.remove("robustscaler")
        	except:
        		pass

        	try:
        		rbststp= [t[0] for t in gbl_pl].index('robust_scaler_gb')
        		gbl_pl.pop(rbststp)
        	except:
        	   pass



    def stdscl_cls(self):

        if self.root.ids.stad_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.stad_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.stad_chk.text_color=get_color_from_hex('000000')
        	self.slr_stad_wid=Factory.slr_stad_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_stad_wid)

        	self.slr_stad_wid.ids.stadcpy_scl_chk.active=True
        	self.slr_stad_wid.ids.stadwtmn_scl_chk.active=True
        	self.slr_stad_wid.ids.stadwiths_scl_chk.active=True

        else:
        	self.root.ids.stad_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.stad_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_stad_wid)

        	try:
        	    stdslrstp= [t[0] for t in gbl_pl].index('standard_scaler_gb')
        	    gbl_pl.pop(stdslrstp)
        	    print(gbl_pl)

        	except Exception as e:
        		print(e)

        	try:
        		preprocessing_fit_status.remove("standardscaler")
        	except:
        		pass


    def nrmlz_cls(self):

        if self.root.ids.nrmlz_cls_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.nrmlz_cls_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.nrmlz_cls_chk.text_color=get_color_from_hex('000000')
        	self.slr_nlzr_wid=Factory.slr_nlzr_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_nlzr_wid)

        	self.l2_nlzr()
        	self.slr_nlzr_wid.ids.copy_nlzr_chk.active=True



        else:
        	self.root.ids.nrmlz_cls_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.nrmlz_cls_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_nlzr_wid)

        	try:
        	    nlzrslrstp= [t[0] for t in gbl_pl].index('normalizer_gb')
        	    gbl_pl.pop(nlzrslrstp)
        	    print(gbl_pl)

        	except Exception as e:
        		print(e)

        	try:
        		preprocessing_fit_status.remove("normalizer")
        	except:
        		pass

    def pca_cls(self):

        if self.root.ids.pca_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.pca_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.pca_chk.text_color=get_color_from_hex('000000')
        	self.slr_pca_wid=Factory.slr_pca_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_pca_wid)

        	self.slr_pca_wid.ids.copy_pca_chk.active=True
        	self.slr_pca_wid.ids.whiten_pca_chk.active=True
        	self.auto_pca_sv()


        else:
        	self.root.ids.pca_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.pca_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_pca_wid)

        	try:
        		preprocessing_fit_status.remove("pca")
        	except:
        		pass

        	try:
        		pcastp= [t[0] for t in gbl_pl].index('pca_gb')
        		gbl_pl.pop(pcastp)
        	except:
        		pass

    def knni_cls(self):

        if self.root.ids.knnimp_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.knnimp_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.knnimp_chk.text_color=get_color_from_hex('000000')
        	self.slr_knnimp_wid=Factory.slr_knnimp_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_knnimp_wid)
        	self.uniform_kitr()
        	self.slr_knnimp_wid.ids.copy_kitr_chk.active=True
        	self.slr_knnimp_wid.ids.add_indicator_kitr_chk.active=True
        	self.slr_knnimp_wid.ids.add_indicator_kitr_chk.active=False


        else:
        	self.root.ids.knnimp_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.knnimp_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_knnimp_wid)

        	try:
        		preprocessing_fit_status.remove("knnimputer")
        	except:
        		pass

        	try:
        		knnimpstp= [t[0] for t in gbl_pl].index('knnimputer_gb')
        		gbl_pl.pop(knnimpstp)
        	except:
        		pass

    def pwr_cls(self):

        if self.root.ids.pwr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.pwr_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.pwr_chk.text_color=get_color_from_hex('000000')
        	self.slr_pwr_wid=Factory.slr_pwr_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_pwr_wid)

        	self.slr_pwr_wid.ids.standardize_pwrtr_chk.active=True
        	self.slr_pwr_wid.ids.copy_pwrtr_chk.active=True
        	self.yeo_pwttr()


        else:
        	self.root.ids.pwr_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.pwr_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_pwr_wid)


        	try:
        		preprocessing_fit_status.remove("powertransformer")
        	except:
        		pass

        	try:
        		trnsfnrstp= [t[0] for t in gbl_pl].index('power_transformer_gb')
        		gbl_pl.pop(trnsfnrstp)
        	except:
        		pass

    def vrthd_cls(self):

        if self.root.ids.vrthd_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.vrthd_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.vrthd_chk.text_color=get_color_from_hex('000000')
        	self.slr_vrthd_wid=Factory.slr_vrthd_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_vrthd_wid)


        else:
        	self.root.ids.vrthd_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.vrthd_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_vrthd_wid)


        	try:
        		preprocessing_fit_status.remove("variancethreshold")
        	except:
        		pass

        	try:
        		selprcstp= [t[0] for t in gbl_pl].index("variancethreshold_gb")
        		gbl_pl.pop(selprcstp)

        	except:
        		pass


    def slkbt_cls(self):

        if self.root.ids.slkbt_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.slkbt_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.slkbt_chk.text_color=get_color_from_hex('000000')
        	self.slr_slkbt_wid=Factory.slr_slkbt_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_slkbt_wid)

        	self.f_classif_slkbt()

        else:
        	self.root.ids.slkbt_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.slkbt_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_slkbt_wid)

        	try:
        		preprocessing_fit_status.remove("selectkbest")
        	except:
        		pass

        	try:
        		slkbtstp= [t[0] for t in gbl_pl].index("selectkbest_gb")
        		gbl_pl.pop(slkbtstp)

        	except:
        		pass

    def sctptl_cls(self):

        if self.root.ids.sctptl_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.sctptl_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.sctptl_chk.text_color=get_color_from_hex('000000')
        	self.slr_sctptl_wid=Factory.slr_sctptl_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_sctptl_wid)
        	self.f_classif_sctptl()

        else:
        	self.root.ids.sctptl_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.sctptl_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_sctptl_wid)


        	try:
        		preprocessing_fit_status.remove("selectpercentile")
        	except:
        		pass

        	try:
        		sltprclstp= [t[0] for t in gbl_pl].index("selectpercentile_gb")
        		gbl_pl.pop(sltprclstp)
        	except:
        		pass

    def gusct_cls(self):

        if self.root.ids.gusct_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.gusct_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.gusct_chk.text_color=get_color_from_hex('000000')
        	self.slr_gusct_wid=Factory.slr_gusct_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_gusct_wid)

        	self.f_classif_gusct()
        	self.percentile_gusct()

        else:
        	self.root.ids.gusct_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.gusct_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_gusct_wid)


        	try:
        		preprocessing_fit_status.remove("genericunivariateselect")
        	except:
        		pass


        	try:
        		grncvtrstp= [t[0] for t in gbl_pl].index("genericunivariateselect_gb")
        		gbl_pl.pop(grncvtrstp)
        	except:
        		pass


    def discretizer_cls(self):

        if self.root.ids.dztr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.dztr_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.dztr_chk.text_color=get_color_from_hex('000000')
        	self.slr_dztr_wid=Factory.slr_dztr_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_dztr_wid)
        	self.onehot_dtzr()
        	self.quantile_dtzr()
        	self.None_dtzr()


        else:
        	self.root.ids.dztr_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.dztr_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_dztr_wid)

        	try:
        		preprocessing_fit_status.remove("kbinsdiscretizer")
        	except:
        		pass

        	try:
        		kbinsdtstp= [t[0] for t in gbl_pl].index('kbinsdiscretizer_gb')
        		gbl_pl.pop(kbinsdtstp)
        	except:
        		pass

    def mnwid_cls(self):

        if self.root.ids.min_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.min_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.min_chk.text_color=get_color_from_hex('000000')
        	self.slr_min_wid=Factory.slr_min_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_min_wid)
        	self.slr_min_wid.ids.cpy_minslcr_chk.active=True
        	self.slr_min_wid.ids.clip_minslcr_chk.active=True
        	self.slr_min_wid.ids.clip_minslcr_chk.active=False

        else:
        	self.root.ids.min_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.min_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_min_wid)

        	try:
        		preprocessing_fit_status.remove("minmaxscaler")
        	except:
        		pass

        	try:
        		minmaxstp= [t[0] for t in gbl_pl].index('minmax_scaler_gb')
        		gbl_pl.pop(minmaxstp)
        	except:
        		pass

    def agmtcltr_cls(self):

        if self.root.ids.agmtcltr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.agmtcltr_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.agmtcltr_chk.text_color=get_color_from_hex('000000')
        	self.slr_agmtcltr_wid=Factory.slr_agmtcltr_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.slr_agmtcltr_wid)
        	self.slr_agmtcltr_wid.ids.compute_distances_chk.active=True
        	self.slr_agmtcltr_wid.ids.compute_distances_chk.active=False
        	self.euclidean_agmr()
        	self.ward_agmr()

        else:
        	self.root.ids.agmtcltr_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.agmtcltr_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.slr_agmtcltr_wid)

        	try:
        		preprocessing_fit_status.remove("agglomerative")
        	except:
        		pass

        	try:
        		agmtrstp= [t[0] for t in gbl_pl].index('agglomerative_gb')
        		gbl_pl.pop(agmtrstp)

        	except:
        		pass


    def dbscan_cls(self):

        if self.root.ids.dbscan_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.dbscan_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.dbscan_chk.text_color=get_color_from_hex('000000')
        	self.slr_dbscan_wid=Factory.slr_dbscan_wid()
        	self.root.ids.dtprlt_wid_grid.add_widget(self.slr_dbscan_wid)
        	self.auto_dcan()

        else:
        	self.root.ids.dbscan_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.dbscan_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.dtprlt_wid_grid.remove_widget(self.slr_dbscan_wid)

        	try:
        		preprocessing_fit_status.remove("dbscan")
        	except:
        		pass

        	try:
        		dbscnstp= [t[0] for t in gbl_pl].index('dbscan_gb')
        		gbl_pl.pop(dbscnstp)

        	except Exception as e:
        		print(e)

    def incpca_cls(self):

        if self.root.ids.incpca_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.incpca_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.incpca_chk.text_color=get_color_from_hex('000000')
        	self.slr_incpca_wid=Factory.slr_incpca_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_incpca_wid)
        	self.slr_incpca_wid.ids.whiten_incpca_chk.active=True
        	self.slr_incpca_wid.ids.whiten_incpca_chk.active=False
        	self.slr_incpca_wid.ids.copy_incpca_chk.active=True


        else:
        	self.root.ids.incpca_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.incpca_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_incpca_wid)

        	try:
        		preprocessing_fit_status.remove("incpca")
        	except:
        		pass

        	try:
        		incpacastp= [t[0] for t in gbl_pl].index('incpca_gb')
        		gbl_pl.pop(incpacastp)

        	except:
        		pass

    def lblecdr_cls(self):

        if self.root.ids.lblecdr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.lblecdr_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.lblecdr_chk.text_color=get_color_from_hex('000000')
        	self.slr_lblecdr_wid=Factory.slr_lblecdr_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_lblecdr_wid)


        else:
        	self.root.ids.lblecdr_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.lblecdr_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_lblecdr_wid)

    def ohecdr_cls(self):

        if self.root.ids.ohecdr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.ohecdr_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.ohecdr_chk.text_color=get_color_from_hex('000000')
        	self.slr_ohecdr_wid=Factory.slr_ohecdr_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_ohecdr_wid)
        	self.None_ohecdr()
        	self.error_ohecdr()
        	self.slr_ohecdr_wid.ids.sparse_ohecdr_chk.active=True

        else:
        	self.root.ids.ohecdr_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.ohecdr_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_ohecdr_wid)

        	try:
        		preprocessing_fit_status.remove("onehotencoder")
        	except:
        		pass

        	try:
        		oheftstp= [t[0] for t in gbl_pl].index('onehotencoder_gb')
        		gbl_pl.pop(oheftstp)

        	except:
        		pass

    def polyft_cls(self):

        if self.root.ids.polyft_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.polyft_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.polyft_chk.text_color=get_color_from_hex('000000')
        	self.slr_polyft_wid=Factory.slr_polyft_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_polyft_wid)
        	self.slr_polyft_wid.ids.include_bias_polyft_chk.active=True
        	self.slr_polyft_wid.ids.interaction_only_polyft_chk.active=True
        	self.slr_polyft_wid.ids.interaction_only_polyft_chk.active=False
        	self.C_polyft()

        else:
        	self.root.ids.polyft_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.polyft_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_polyft_wid)


        	try:
        		preprocessing_fit_status.remove('polynomialfeatures')
        	except:
        		pass

        	try:
        		polyftstp= [t[0] for t in gbl_pl].index('polynomialfeatures_gb')
        		gbl_pl.pop(polyftstp)

        	except:
        		pass


    def lblebnr_cls(self):

        if self.root.ids.lblebnr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.lblebnr_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.lblebnr_chk.text_color=get_color_from_hex('000000')
        	self.slr_lblbin_wid=Factory.slr_lblbin_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_lblbin_wid)

        	self.slr_lblbin_wid.ids.sparse_output_lblbin_chk.active=True
        	self.slr_lblbin_wid.ids.sparse_output_lblbin_chk.active=False
        else:
        	self.root.ids.lblebnr_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.lblebnr_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_lblbin_wid)

        	try:
        	    lblzrslrstp= [t[0] for t in gbl_pl].index('labelbinarizer_gb')
        	    gbl_pl.pop(lblzrslrstp)
        	    print(gbl_pl)

        	except Exception as e:
        		print(e)

        	try:
        		preprocessing_fit_status.remove("labelbinarizer")
        	except:
        		pass


    def mltlbnr_cls(self):

        if self.root.ids.mltlbnr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.root.ids.mltlbnr_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.root.ids.mltlbnr_chk.text_color=get_color_from_hex('000000')
        	self.slr_mlblr_wid=Factory.slr_mlblr_wid()
        	self.root.ids.preprocessing_grid.add_widget(self.slr_mlblr_wid)
        	self.slr_mlblr_wid.ids.sparse_output_mlblr_chk.active=True
        	self.slr_mlblr_wid.ids.sparse_output_mlblr_chk.active=False



        else:
        	self.root.ids.mltlbnr_chk.md_bg_color=get_color_from_hex('323043')
        	self.root.ids.mltlbnr_chk.text_color=get_color_from_hex('ffffff')
        	self.root.ids.preprocessing_grid.remove_widget(self.slr_mlblr_wid)

        	try:
        	    lmlslrstp= [t[0] for t in gbl_pl].index('multilabelbinarizer_gb')
        	    gbl_pl.pop(lmlslrstp)
        	    print(gbl_pl)

        	except Exception as e:
        		print(e)

        	try:
        		preprocessing_fit_status.remove("multilabelbinarizer")
        	except:
        		pass


    def copy_smitr(self,checkbox,value):

    	 global cpy_smtr
    	 if value:
        	 cpy_smtr=True
    	 else:
         	cpy_smtr=False

    def add_smtrm(self,checkbox,value):

    	global addsmtr
    	if value:
    	    addsmtr=True
    	else:
        	addsmtr=False

    def shrnk_act(self,checkbox,value):

        global shrnk
        if value:
        	shrnk=True
        else:
            shrnk=False

    def prob_act(self,checkbox,value):

        global prob_val
        if value:
        	prob_val=True
        else:
        	prob_val=False

    def verbose_act(self,checkbox,value):

        global vrbs
        if value:
            vrbs=True
        else:
            vrbs=False

    def break_act(self,checkbox,value):

        global brktie
        if value:
            brktie=True
        else:
            brktie=False

    def ovo_svc_act(self):

        if self.svm_model.ids.ovo_svm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.svm_model.ids.ovo_svm_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clf__decision_function_shape' in grid_params_svm:
        	    pass
        	else:
        	   grid_params_svm[clfdfs]=clfdfs_l
        	clfdfs_l.append('ovo')
        else:
            self.svm_model.ids.ovo_svm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	clfdfs_l.remove('ovo')
            	del grid_params_svm['clf__decision_function_shape']
            except:
            	pass

    def ovr_svc_act(self):

        if self.svm_model.ids.ovr_svm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.svm_model.ids.ovr_svm_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clf__decision_function_shape' in grid_params_svm:
        	    pass
        	else:
        	   grid_params_svm[clfdfs]=clfdfs_l
        	clfdfs_l.append('ovr')
        else:
            self.svm_model.ids.ovr_svm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	clfdfs_l.remove('ovr')
            	del grid_params_svm['clf__decision_function_shape']
            except:
            	pass

    def uniform_knb(self):

        if self.model_knn.ids.uniform_knb_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_knn.ids.uniform_knb_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfknn__weights' in grid_params_knn:
        	    pass
        	else:
         		grid_params_knn[wghtknb]=weightsknb
        	weightsknb.append('uniform')
        else:
            self.model_knn.ids.uniform_knb_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	weightsknb.remove('uniform')
            	del grid_params_knn['clfknn__weights']

            except:
            	pass

    def distance_knb(self):

        if self.model_knn.ids.distance_knb_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_knn.ids.distance_knb_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfknn__weights' in grid_params_knn:
        	    pass
        	else:
         		grid_params_knn[wghtknb]=weightsknb
        	weightsknb.append('distance')
        else:
            self.model_knn.ids.distance_knb_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	weightsknb.remove('distance')
            	del grid_params_knn['clfknn__weights']

            except:
            	pass


    def auto_knb(self):

        if self.model_knn.ids.auto_knb_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_knn.ids.auto_knb_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfknn__algorithm' in grid_params_knn:
        	    pass
        	else:
        		grid_params_knn[algknb]=algorithmknb
        	algorithmknb.append('auto')

        else:
            self.model_knn.ids.auto_knb_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	algorithmknb.remove('auto')
            	del grid_params_knn['clfknn__algorithm']

            except:
            	pass

    def ball_tree_knb(self):

        if self.model_knn.ids.ball_tree_knb_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_knn.ids.ball_tree_knb_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfknn__algorithm' in grid_params_knn:
        	    pass
        	else:
        		grid_params_knn[algknb]=algorithmknb
        	algorithmknb.append('ball_tree')

        else:
            self.model_knn.ids.ball_tree_knb_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	algorithmknb.remove('ball_tree')
            	del grid_params_knn['clfknn__algorithm']

            except:
            	pass

    def kd_tree_knb(self):

        if self.model_knn.ids.kd_tree_knb_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_knn.ids.kd_tree_knb_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfknn__algorithm' in grid_params_knn:
        	    pass
        	else:
        		grid_params_knn[algknb]=algorithmknb
        	algorithmknb.append('kd_tree')

        else:
            self.model_knn.ids.kd_tree_knb_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	algorithmknb.remove('kd_tree')
            	del grid_params_knn['clfknn__algorithm']

            except:
            	pass


    def brute_knb(self):

        if self.model_knn.ids.brute_knb_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_knn.ids.brute_knb_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfknn__algorithm' in grid_params_knn:
        	    pass
        	else:
        		grid_params_knn[algknb]=algorithmknb
        	algorithmknb.append('brute')

        else:
            self.model_knn.ids.brute_knb_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	algorithmknb.remove('brute')
            	del grid_params_knn['clfknn__algorithm']

            except:
            	pass


    def l1_ld(self):

        if self.model_linear_svc.ids.l1_ld_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_linear_svc.ids.l1_ld_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfl__penalty' in grid_params_lsvc:
        	    pass
        	else:
        		grid_params_lsvc[penlsv]=penaltylsv
        	penaltylsv.append('l1')

        else:
            self.model_linear_svc.ids.l1_ld_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	penaltylsv.remove('l1')
            	del grid_params_lsvc['clfl__penalty']
            except:
            	pass

    def l2_ld(self):

        if self.model_linear_svc.ids.l2_ld_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_linear_svc.ids.l2_ld_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfl__penalty' in grid_params_lsvc:
        	    pass
        	else:
        	   grid_params_lsvc[penlsv]=penaltylsv
        	penaltylsv.append('l2')
        else:
            self.model_linear_svc.ids.l2_ld_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	penaltylsv.remove('l2')
            	del grid_params_lsvc['clfl__penalty']
            except:
            	pass


    def hinge_ld(self):

        if self.model_linear_svc.ids.hinge_ld_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_linear_svc.ids.hinge_ld_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfl__loss' in grid_params_lsvc:
        	    pass
        	else:
        		grid_params_lsvc[lslsv]=losslsv
        	losslsv.append('hinge')


        else:
            self.model_linear_svc.ids.hinge_ld_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	losslsv.remove('hinge')
            	del grid_params_lsvc['clfl__loss']
            except:
            	pass

    def squared_hinge_ld(self):

        if self.model_linear_svc.ids.squared_hinge_ld_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_linear_svc.ids.squared_hinge_ld_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfl__loss' in grid_params_lsvc:
        	    pass
        	else:
        		grid_params_lsvc[lslsv]=losslsv
        	losslsv.append('squared_hinge')

        else:
            self.model_linear_svc.ids.squared_hinge_ld_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	losslsv.remove('squared_hinge')
            	del grid_params_lsvc['clfl__loss']
            except:
            	pass

    def dual_ld(self,checkbox,value):

    	if value:
    		pipe_lsvc['clfl'].dual=True
    	else:
    		pipe_lsvc['clfl'].dual=False

    def fit_ld(self,checkbox,value):

    	if value:
    		pipe_lsvc['clfl'].fit_intercept=True
    	else:
    		pipe_lsvc['clfl'].fit_intercept=False

    def ovr_ld(self):

        if self.model_linear_svc.ids.ovr_ld_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_linear_svc.ids.ovr_ld_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfl__multi_class' in grid_params_lsvc:
        	    pass
        	else:
        		grid_params_lsvc[mlclsv]=mltclslsv
        	mltclslsv.append('ovr')
        else:
            self.model_linear_svc.ids.ovr_ld_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	mltclslsv.remove('ovr')
            	del grid_params_lsvc['clfl__multi_class']

            except:
            	pass

    def crammer_singer_ld(self):

        if self.model_linear_svc.ids.crammer_singer_ld_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_linear_svc.ids.crammer_singer_ld_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfl__multi_class' in grid_params_lsvc:
        	    pass
        	else:
        		grid_params_lsvc[mlclsv]=mltclslsv
        	mltclslsv.append('crammer_singer')

        else:
            self.model_linear_svc.ids.crammer_singer_ld_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	mltclslsv.remove('crammer_singer')
            	del grid_params_lsvc['clfl__multi_class']

            except:
            	pass

    def fit_mlr(self,checkbox,value):

        global fit_mlr_val
        if value:
        	fit_mlr_val=True
        else:
        	fit_mlr_val=False

    def nor_mlr(self,checkbox,value):

        global nor_mlr_val
        if value:
            nor_mlr_val=True
        else:
            nor_mlr_val=False

    def copy_mlr(self,checkbox,value):

    	global copy_mlr_val
    	if value:
    		copy_mlr_val=True
    	else:
    	    copy_mlr_val=False

    def positive_mlr(self,checkbox,value):

    	global positive_mlr_val
    	if value:
    		positive_mlr_val=True
    	else:
    	    positive_mlr_val=False


    def linear_1(self):

        if self.svm_model.ids.linear_svm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.svm_model.ids.linear_svm_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clf__kernel' in grid_params_svm:
        	    pass
        	else:
        		grid_params_svm[clfkrnl]=spw
        	spw.append('linear')
        else:
            self.svm_model.ids.linear_svm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	spw.remove('linear')
            	del grid_params_svm['clf__kernel']
            except:
            	pass


    def rbf_1(self):

        if self.svm_model.ids.rbf_svm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.svm_model.ids.rbf_svm_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clf__kernel' in grid_params_svm:
        	    pass
        	else:
        		grid_params_svm[clfkrnl]=spw
        	spw.append('rbf')
        else:
            self.svm_model.ids.rbf_svm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	spw.remove('rbf')
            	del grid_params_svm['clf__kernel']
            except:
            	pass


    def poly_1(self):

        if self.svm_model.ids.poly_svm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.svm_model.ids.poly_svm_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clf__kernel' in grid_params_svm:
        	    pass
        	else:
        		grid_params_svm[clfkrnl]=spw
        	spw.append('poly')
        else:
            self.svm_model.ids.poly_svm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	spw.remove('poly')
            	del grid_params_svm['clf__kernel']
            except:
            	pass

    def sigmoid_1(self):

        if self.svm_model.ids.sigmoid_svm_chk.md_bg_color==get_color_from_hex('323043'):
        	self.svm_model.ids.sigmoid_svm_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clf__kernel' in grid_params_svm:
        	    pass
        	else:
        		grid_params_svm[clfkrnl]=spw
        	spw.append('sigmoid')
        else:
            self.svm_model.ids.sigmoid_svm_chk.md_bg_color=get_color_from_hex('323043')
            try:
            	spw.remove('sigmoid')
            	del grid_params_svm['clf__kernel']
            except:
            	pass

    def scale_1(self):
        if self.svm_model.ids.scale_1_svcid.md_bg_color==get_color_from_hex('323043'):
        	self.svm_model.ids.scale_1_svcid.md_bg_color=get_color_from_hex('808080')
        	if 'clf__gamma' in grid_params_svm:
        	   pass
        	else:
         	   grid_params_svm[clfgma]=jsk
        	jsk.append('scale')
        else:
            self.svm_model.ids.scale_1_svcid.md_bg_color=get_color_from_hex('323043')
            try:
            	jsk.remove('scale')
            	del grid_params_svm['clf__gamma']
            except:
            	pass

    def auto_1(self):

        if self.svm_model.ids.auto_1_svcid.md_bg_color==get_color_from_hex('323043'):
        	self.svm_model.ids.auto_1_svcid.md_bg_color=get_color_from_hex('808080')
        	if 'clf__gamma' in grid_params_svm:
        	    pass
        	else:

        		grid_params_svm[clfgma]=jsk
        	jsk.append('auto')
        else:
            self.svm_model.ids.auto_1_svcid.md_bg_color=get_color_from_hex('323043')

            try:
            	jsk.remove('auto')
            	del grid_params_svm['clf__gamma']
            except:
            	pass

    def gini_dt(self):
        if self.model_dt.ids.gini_dt_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_dt.ids.gini_dt_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfdt__criterion' in grid_params_dtre:
        		 pass
        	else:
        		grid_params_dtre[clfcrdt]=cridt_l
        	cridt_l.append('gini')


        else:
            self.model_dt.ids.gini_dt_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	cridt_l.remove('gini')
            	del grid_params_dtre['clfdt__criterion']

            except:
            	pass

    def entropy_dt(self):
        if self.model_dt.ids.entropy_dt_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_dt.ids.entropy_dt_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfdt__criterion' in grid_params_dtre:
        	    pass
        	else:
        		grid_params_dtre[clfcrdt]=cridt_l
        	cridt_l.append('entropy')


        else:
            self.model_dt.ids.entropy_dt_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	cridt_l.remove('entropy')
            	del grid_params_dtre['clfdt__criterion']

            except:
            	pass

    def best_dt(self):
        if self.model_dt.ids.best_dt_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_dt.ids.best_dt_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfdt__splitter' in grid_params_dtre:
        	    pass
        	else:
        		grid_params_dtre[clf_spltr_dt]=splitter_dt_l
        	splitter_dt_l.append('best')


        else:
            self.model_dt.ids.best_dt_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	splitter_dt_l.remove('best')
            	del grid_params_dtre['clfdt__splitter']

            except:
            	pass

    def random_dt(self):
        if self.model_dt.ids.random_dt_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_dt.ids.random_dt_chk.md_bg_color=get_color_from_hex('808080')

        	if 'clfdt__splitter' in grid_params_dtre:
        	    pass
        	else:
        		grid_params_dtre[clf_spltr_dt]=splitter_dt_l
        	splitter_dt_l.append('random')


        else:
            self.model_dt.ids.random_dt_chk.md_bg_color=get_color_from_hex('323043')

            try:
            	splitter_dt_l.remove('random')
            	del grid_params_dtre['clfdt__splitter']

            except:
            	pass

    def show_confirmation_dialog(self):
        if not self.dialog:
            self.dialog = MDDialog(
                size_hint=(.8,None),
                type="custom",
                content_cls=param_popup(),
                buttons=[
                    Button(
                        text="CANCEL"
                    ),
                    Button(
                        text="OK"
                    ),
                ],
            )
        self.dialog.open()

    def nan_chk(self):

        if os.path.isfile(gt)==True:

        	try:
        		self.root.ids.data_grid.clear_widgets()
        	except:
        		pass

        	global DATA
        	DATA=pd.read_csv(gt)

        	if DATA.isnull().values.any()==True:

        		missing_values=DATA.isnull().sum().sum()
        		print('missing values found')
        		print(" \nCount total NaN in a DataFrame : \n\n",DATA.isnull().sum().sum())
        		try:
        			self.root.ids.data_grid.clear_widgets()
        		except:
        			pass
        		self.misng_val=Factory.misng_val()
        		self.root.ids.data_grid.add_widget(self.misng_val)
        		self.misng_val.ids.card_lbl.text=(str(missing_values)+' NaN values found')

        	else:
        		print('no missing values')
        		try:
        			self.root.ids.data_grid.clear_widgets()
        		except:
        			pass
        		self.misng_val=Factory.misng_val()
        		self.root.ids.data_grid.add_widget(self.misng_val)
        		self.misng_val.ids.card_lbl.text='No NaN values'
        else:
            try:
            	self.root.ids.data_grid.clear_widgets()
            except:
            	pass

            self.misng_val=Factory.misng_val()
            self.root.ids.data_grid.add_widget(self.misng_val)
            self.misng_val.ids.card_lbl.text='file not found'
            print("file not found")


    def l1_lgr(self):
        if self.model_log.ids.l1_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.l1_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__penalty' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[penlogr]=penaltylreg
        	penaltylreg.append('l1')
        else:
        	self.model_log.ids.l1_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    penaltylreg.remove('l1')
        	    del grid_params_logreg['clflog__penalty']

        	except:
        		pass

    def l2_lgr(self):
        if self.model_log.ids.l2_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.l2_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__penalty' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[penlogr]=penaltylreg
        	penaltylreg.append('l2')
        else:
        	self.model_log.ids.l2_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    penaltylreg.remove('l2')
        	    del grid_params_logreg['clflog__penalty']

        	except:
        		pass

    def ela_lgr(self):
        if self.model_log.ids.ela_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.ela_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__penalty' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[penlogr]=penaltylreg
        	penaltylreg.append('elasticnet')
        else:
        	self.model_log.ids.ela_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    penaltylreg.remove('elasticnet')
        	    del grid_params_logreg['clflog__penalty']

        	except:
        		pass

    def none_lgr(self):
        if self.model_log.ids.none_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.none_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__penalty' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[penlogr]=penaltylreg
        	penaltylreg.append('none')
        else:
        	self.model_log.ids.none_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    penaltylreg.remove('none')
        	    del grid_params_logreg['clflog__penalty']

        	except:
        		pass


    def dual_lgr(self,checkbox,value):

        if value:
        	pipe_logreg['clflog'].dual=True
        else:
        	pipe_logreg['clflog'].dual=False

    def fit_lgr(self,checkbox,value):

        if value:
            pipe_logreg['clflog'].fit_intercept=True
        else:
        	pipe_logreg['clflog'].fit_intercept=False

    def warm_lgr(self,checkbox,value):

        if value:
        	pipe_logreg['clflog'].warm_start=True
        else:
        	pipe_logreg['clflog'].warm_start=False

    def newton_lgr(self):
        if self.model_log.ids.newton_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.newton_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__solver' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[slvrlogr]=solverlreg
        	solverlreg.append('newton-cg')
        else:
        	self.model_log.ids.newton_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    solverlreg.remove('newton-cg')
        	    del grid_params_logreg['clflog__solver']

        	except:
        		pass

    def lbf_lgr(self):
        if self.model_log.ids.lbf_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.lbf_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__solver' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[penlogr]=solverlreg
        	solverlreg.append('lbfgs')
        else:
        	self.model_log.ids.lbf_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    solverlreg.remove("lbfgs")
        	    del grid_params_logreg['clflog__solver']

        	except:
        		pass

    def lib_lgr(self):
        if self.model_log.ids.lib_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.lib_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__solver' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[penlogr]=solverlreg
        	solverlreg.append("liblinear")
        else:
        	self.model_log.ids.lib_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    solverlreg.remove("liblinear")
        	    del grid_params_logreg['clflog__solver']

        	except:
        		pass

    def saga_lgr(self):
        if self.model_log.ids.saga_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.saga_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__solver' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[penlogr]=solverlreg
        	solverlreg.append("saga")
        else:
        	self.model_log.ids.saga_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    solverlreg.remove("saga")
        	    del grid_params_logreg['clflog__solver']

        	except:
        		pass

    def sag_lgr(self):
        if self.model_log.ids.sag_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.sag_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__solver' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[penlogr]=solverlreg
        	solverlreg.append("sag")
        else:
        	self.model_log.ids.sag_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    solverlreg.remove("sag")
        	    del grid_params_logreg['clflog__solver']

        	except:
        		pass

    def auto_lgr(self):
        if self.model_log.ids.auto_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.auto_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__multi_class' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[mltclogr]=multilreg
        	multilreg.append("auto")
        else:
        	self.model_log.ids.auto_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    multilreg.remove("auto")
        	    del grid_params_logreg['clflog__multi_class']

        	except:
        		pass

    def multi_lgr(self):
        if self.model_log.ids.multi_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.multi_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__multi_class' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[mltclogr]=multilreg
        	multilreg.append("multinomial")
        else:
        	self.model_log.ids.multi_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    multilreg.remove("multinomial")
        	    del grid_params_logreg['clflog__multi_class']

        	except:
        		pass

    def ovr_lgr(self):
        if self.model_log.ids.ovr_lgr_chk.md_bg_color==get_color_from_hex('323043'):
        	self.model_log.ids.ovr_lgr_chk.md_bg_color=get_color_from_hex('808080')
        	if 'clflog__multi_class' in grid_params_logreg:
        	    pass
        	else:                        	grid_params_logreg[mltclogr]=multilreg
        	multilreg.append("ovr")
        else:
        	self.model_log.ids.ovr_lgr_chk.md_bg_color=get_color_from_hex('323043')

        	try:
        	    multilreg.remove("ovr")
        	    del grid_params_logreg['clflog__multi_class']

        	except:
        		pass


    def liner(self):

    	cols = DATA.columns.values
    	values = DATA.values

    def preprocessing(self):

        global preprocess
        preprocess=[]
        pipe_prep=Pipeline(preprocess)
        pipe_prep.fit(X_train, y_train)

    def add_grdscv_svc(self):

        if self.prameter_optimizer_wid.ids.gridsearchcv_chk.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid.ids.gridsearchcv_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid.ids.gridsearchcv_chk.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid=Factory.gridsearchcv_wid()
        	self.svm_model.ids.hypopt_grid.add_widget(self.gridsearchcv_wid)
        	self.gridsearch_asgn=Factory.gridsearch_asgn()
        	self.svm_model.ids.hypopt_grid.add_widget(self.gridsearch_asgn)
        	self.gridsearchcv_wid.ids.return_train_score_gsvc_chk.active=True
        	self.gridsearchcv_wid.ids.return_train_score_gsvc_chk.active=False


        else:
        	self.prameter_optimizer_wid.ids.gridsearchcv_chk.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid.ids.gridsearchcv_chk.text_color=get_color_from_hex('ffffff')

        	self.svm_model.ids.hypopt_grid.remove_widget(self.gridsearchcv_wid)
        	self.svm_model.ids.hypopt_grid.remove_widget(self.gridsearch_asgn)


    def grdsrchacte(self):
    	try:
    		current_paramopt_svc.clear()
    		current_paramopt_svc.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.svm_model.ids.out_grid_svc.clear_widgets()
    	except:
        	pass

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	scoring_gscv=self.gridsearchcv_wid.ids.scoring_gscv.text.replace(" ", "")

    	n_jobs_gscv=self.gridsearchcv_wid.ids.n_jobs_gscv.text.replace(" ", "")

    	refit_gscv=self.gridsearchcv_wid.ids.refit_gscv.text.replace(" ", "")

    	cv_gscv=self.gridsearchcv_wid.ids.cv_gscv.text.replace(" ", "")

    	verbose_gscv=self.gridsearchcv_wid.ids.verbose_gscv.text.replace(" ", "")


    	if scoring_gscv=="None":
    		scoring_gscv=None
    	elif "," in scoring_gscv:
    		scoring_gscv=list(map(str,scoring_gscv.split(',')))
    	else:
    		pass

    	if n_jobs_gscv=="None":
    		n_jobs_gscv=None
    	elif n_jobs_gscv.isdigit()==True:
    		n_jobs_gscv=int(n_jobs_gscv)
    	else:
    		pass

    	if refit_gscv=="True":
    		refit_gscv=True
    	elif refit_gscv=="False":
    		refit_gscv=False
    	else:
    		pass

    	if cv_gscv=="None":
    		cv_gscv=None
    	elif cv_gscv.isdigit()==True:
    		cv_gscv=int(cv_gscv)
    	else:
    		pass

    	if verbose_gscv.isdigit()==True:
    		verbose_gscv=int(verbose_gscv)
    	else:
    		pass

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return

    	try:
    		gs_svm = GridSearchCV(estimator=pipe_svm,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv),
      	  n_jobs=(n_jobs_gscv),
       	 refit=(refit_gscv),
       	 cv=(cv_gscv),
   	     verbose=(verbose_gscv),
     	   return_train_score=retutrval_gscv
      	  )

    	except Exception as e:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)

    	try:
    	    global gsvm

    	    if len(gbl_pl)==0:
    	        try:
    	        	gsvm=gs_svm.fit(X_train, y_train)
    	        	y_pred = gsvm.predict(X_test)
    	        	cr_gsvms=(classification_report(y_test, y_pred))
            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gsvms)
            	except Exception as e:
            		print(e)
            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gsvm=gs_svm.fit(X_train_1, y_train)
    	        	y_pred = gsvm.predict(X_test_1)
    	        	cr_gsvmr=(classification_report(y_test, y_pred))
            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gsvmr)

            	except Exception as e:
            		print(e)
            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
    		#self.root.ids.model_output.text=str(e)
    		#print(e)

    def retutrasco_gscv(self,checkbox,value):
    	global retutrval_gscv
    	if value:
    		retutrval_gscv=True
    	else:
    		retutrval_gscv=False

    def cv_results_gscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "gridsearchcv" in current_paramopt_svc:
        	try:
        		cv_results_gscv_out=gsvm.cv_results_
        		print(cv_results_gscv_out)
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "gridsearchcv" in current_paramopt_svc:
        	try:
        		best_score_gscv_out=gsvm.best_score_
        		print(best_score_gscv_out)
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "gridsearchcv" in current_paramopt_svc:
        	try:
        		best_params_gscv_out=gsvm.best_params_
        		print(best_params_gscv_out)
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "gridsearchcv" in current_paramopt_svc:
        	try:
        		best_index_gscv_out=gsvm.best_index_
        		print(best_index_gscv_out)
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "gridsearchcv" in current_paramopt_svc:
        	try:
        		scorer_gscv_out=gsvm.scorer_
        		print(scorer_gscv_out)
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "gridsearchcv" in current_paramopt_svc:
        	try:
        		n_splits_gscv_out=gsvm.n_splits_
        		print(n_splits_gscv_out)
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "gridsearchcv" in current_paramopt_svc:
        	try:
        		refit_time_gscv_out=gsvm.refit_time_
        		print(refit_time_gscv_out)
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "gridsearchcv" in current_paramopt_svc:
        	try:
        		multimetric_gscv_out=gsvm.multimetric_
        		print(multimetric_gscv_out)
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "gridsearchcv" in current_paramopt_svc:
        	try:
        		feature_names_in_gscv_out=gsvm.feature_names_in_
        		print(feature_names_in_gscv_out)
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass




    def add_rndmcv_svc(self):

        if self.prameter_optimizer_wid.ids.randomizedsearchcv_chk.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid.ids.randomizedsearchcv_chk.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid.ids.randomizedsearchcv_chk.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid=Factory.randomizedsearchcv_wid()
        	self.svm_model.ids.hypopt_grid.add_widget(self.randomizedsearchcv_wid)
        	self.randomizedsearch_asgn=Factory.randomizedsearch_asgn()
        	self.svm_model.ids.hypopt_grid.add_widget(self.randomizedsearch_asgn)
        	self.randomizedsearchcv_wid.ids.return_train_score_rscv_chk.active=True
        	self.randomizedsearchcv_wid.ids.return_train_score_rscv_chk.active=False

        else:
        	self.prameter_optimizer_wid.ids.randomizedsearchcv_chk.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid.ids.randomizedsearchcv_chk.text_color=get_color_from_hex('ffffff')

        	self.svm_model.ids.hypopt_grid.remove_widget(self.randomizedsearchcv_wid)
        	self.svm_model.ids.hypopt_grid.remove_widget(self.randomizedsearch_asgn)


    def rndmstvhact(self):

    	try:
    		current_paramopt_svc.clear()
    		current_paramopt_svc.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.svm_model.ids.out_grid_svc.clear_widgets()
    	except:
        	pass

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

    	n_iter_rscv=self.randomizedsearchcv_wid.ids.n_iter_rscv.text.replace(" ", "")
    	scoring_rscv=self.randomizedsearchcv_wid.ids.scoring_rscv.text.replace(" ", "")
    	n_jobs_rscv=self.randomizedsearchcv_wid.ids.n_jobs_rscv.text.replace(" ", "")
    	refit_rscv=self.randomizedsearchcv_wid.ids.refit_rscv.text.replace(" ", "")
    	cv_rscv=self.randomizedsearchcv_wid.ids.cv_rscv.text.replace(" ", "")
    	verbose_rscv=self.randomizedsearchcv_wid.ids.verbose_rscv.text.replace(" ", "")
    	random_state_rscv=self.randomizedsearchcv_wid.ids.random_state_rscv.text.replace(" ", "")

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return

    	if n_iter_rscv=="None":
    		n_iter_rscv=None
    	elif n_iter_rscv.isdigit()==True:
    		n_iter_rscv=int(n_iter_rscv)
    	else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv=="None":
    		scoring_rscv=None
    	elif "," in scoring_rscv:
    		scoring_rscv=list(map(str,scoring_rscv.split(',')))
    	else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv=="None":
    		n_jobs_rscv=None
    	elif n_jobs_rscv.isdigit()==True:
    		n_jobs_rscv=int(n_jobs_rscv)
    	else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv=="True":
    		refit_rscv=True
    	elif refit_rscv=="False":
    		refit_rscv=False
    	else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return

    	if cv_rscv=="None":
    		cv_rscv=None
    	elif cv_rscv.isdigit()==True:
    		cv_rscv=int(cv_rscv)
    	else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv.isdigit()==True:
    		verbose_rscv=int(verbose_rscv)
    	else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv=="None":
    		random_state_rscv=None
    	elif random_state_rscv.isdigit()==True:
    		random_state_rscv=int(random_state_rscv)
    	else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return

    	try:
     	   gs_svm =RandomizedSearchCV(
        	estimator=pipe_svm,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv),
       	 scoring=(scoring_rscv),
       	 n_jobs=(n_jobs_rscv),
       	 refit=(refit_rscv),
       	 cv=(cv_rscv),
        	verbose=(verbose_rscv),
     	   random_state=(random_state_rscv),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv)

    	except Exception as e:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)


    	try:
    	    global gsvm

    	    if len(gbl_pl)==0:
    	        try:
    	        	gsvm=gs_svm.fit(X_train, y_train)
    	        	y_pred = gsvm.predict(X_test)
    	        	cr_gsvms=(classification_report(y_test, y_pred))

            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gsvms)

            	except Exception as e:
            		print(e)
            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gsvm=gs_svm.fit(X_train_1, y_train)
    	        	y_pred = gsvm.predict(X_test_1)
    	        	cr_gsvmr=(classification_report(y_test, y_pred))
            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gsvmr)

            	except Exception as e:
            		print(e)
            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
        	#self.root.ids.model_output.text=str(e)
        	#print(e)



    def returtraiscor_rscv(self,checkbox,value):
    	global rtrntrscr_rscv
    	if value:
    		rtrntrscr_rscv=True
    	else:
    		rtrntrscr_rscv=False


    def cv_results_rscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "randomizedsearchcv" in current_paramopt_svc:
        	try:
        		cv_results_rscv_out=gsvm.cv_results_
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "randomizedsearchcv" in current_paramopt_svc:
        	try:
        		best_score_rscv_out=gsvm.best_score_
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "randomizedsearchcv" in current_paramopt_svc:
        	try:
        		best_params_rscv_out=gsvm.best_params_
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "randomizedsearchcv" in current_paramopt_svc:
        	try:
        		best_index_rscv_out=gsvm.best_index_
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "randomizedsearchcv" in current_paramopt_svc:
        	try:
        		scorer_rscv_out=gsvm.scorer_
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "randomizedsearchcv" in current_paramopt_svc:
        	try:
        		n_splits_rscv_out=gsvm.n_splits_
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "randomizedsearchcv" in current_paramopt_svc:
        	try:
        		refit_time_rscv_out=gsvm.refit_time_
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "randomizedsearchcv" in current_paramopt_svc:
        	try:
        		multimetric_rscv_out=gsvm.multimetric_
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gsvm" in globals() and "randomizedsearchcv" in current_paramopt_svc:
        	try:
        		feature_names_in_rscv_out=gsvm.feature_names_in_
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_out)
        	except AttributeError as a:
        		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def  model_svc(self):

        try:
        	self.svm_model.ids.out_grid_svc.clear_widgets()
        except:
        	pass

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if len(spw)==1:
        	pipe_svm['clf'].kernel=(spw[0])
        	try:
        		del grid_params_svm['clf__kernel']
        	except:
        		pass
        elif len(spw)==0:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: kernel"
            return
        else:
        	if 'clf__kernel' in grid_params_svm:
        	    pass
        	else:
        	    grid_params_svm[clfkrnl]=spw


        if len(jsk)==1:
        	pipe_svm['clf'].gamma=(jsk[0])
        	try:
        	   del grid_params_svm['clf__gamma']
        	except:
        		pass
        elif len(jsk)==0:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: gamma"
            return
        else:
        	if 'clf__gamma' in grid_params_svm:
        	    pass
        	else:
        	    grid_params_svm[clfgma]=jsk

        if len(clfdfs_l)==1:
        	pipe_svm['clf'].decision_function_shape=(clfdfs_l[0])
        	try:
        	   del grid_params_svm['clf__decision_function_shape']
        	except:
        		pass
        elif len(clfdfs_l)==0:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: decision_function_shape"
            return

        else:
        		if 'clf__decision_function_shape' in grid_params_svm:
        		    pass
        		else:
        		    grid_params_svm[clfdfs]=clfdfs_l

        print(spw)
        print(jsk)
        print(grid_params_svm)
        print(pipe_svm)



        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return

        if  len(grid_params_svm)==0:

            global svcdt
            try:
            	self.svm_model.ids.hypopt_grid.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		svcdt=pipe_svm.fit(X_train, y_train)
            		y_pred = svcdt.predict(X_test)
            		cr_svmgs=(classification_report(y_test, y_pred))

            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_svmgs)

            	except Exception as e:
            		print(e)
            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		svcdt=pipe_svm.fit(X_train_1, y_train)
            		y_pred = svcdt.predict(X_test_1)
            		cr_svmgs=(classification_report(y_test, y_pred))


            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_svmgs)
            	except Exception as e:
            		print(e)
            		self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.svm_model.ids.hypopt_grid.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid=Factory.prameter_optimizer_wid()
            self.svm_model.ids.hypopt_grid.add_widget(self.prameter_optimizer_wid)



    def add_grdscv_nusvc(self):

        if self.prameter_optimizer_wid_nusvc.ids.gridsearchcv_chk_nusvc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_nusvc.ids.gridsearchcv_chk_nusvc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_nusvc.ids.gridsearchcv_chk_nusvc.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_nusvc=Factory.gridsearchcv_wid_nusvc()
        	self.nu_model.ids.hypopt_grid_nusvc.add_widget(self.gridsearchcv_wid_nusvc)
        	self.gridsearch_asgn_nusvc=Factory.gridsearch_asgn_nusvc()
        	self.nu_model.ids.hypopt_grid_nusvc.add_widget(self.gridsearch_asgn_nusvc)
        	self.gridsearchcv_wid_nusvc.ids.return_train_score_gnusvc_chk.active=True
        	self.gridsearchcv_wid_nusvc.ids.return_train_score_gnusvc_chk.active=False


        else:
        	self.prameter_optimizer_wid_nusvc.ids.gridsearchcv_chk_nusvc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_nusvc.ids.gridsearchcv_chk_nusvc.text_color=get_color_from_hex('ffffff')

        	self.nu_model.ids.hypopt_grid_nusvc.remove_widget(self.gridsearchcv_wid_nusvc)
        	self.nu_model.ids.hypopt_grid_nusvc.remove_widget(self.gridsearch_asgn_nusvc)



    def grdsrchacte_nusvc(self):

    	try:
    		current_paramopt_nusvc.clear()
    		current_paramopt_nusvc.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.nu_model.ids.out_grid_nusvc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_nusvc=self.gridsearchcv_wid_nusvc.ids.scoring_gscv_nusvc.text.replace(" ", "")

    	n_jobs_gscv_nusvc=self.gridsearchcv_wid_nusvc.ids.n_jobs_gscv_nusvc.text.replace(" ", "")

    	refit_gscv_nusvc=self.gridsearchcv_wid_nusvc.ids.refit_gscv_nusvc.text.replace(" ", "")

    	cv_gscv_nusvc=self.gridsearchcv_wid_nusvc.ids.cv_gscv_nusvc.text.replace(" ", "")

    	verbose_gscv_nusvc=self.gridsearchcv_wid_nusvc.ids.verbose_gscv_nusvc.text.replace(" ", "")

    	if scoring_gscv_nusvc=="None":
    		scoring_gscv_nusvc=None
    	elif "," in scoring_gscv_nusvc:
    		scoring_gscv_nusvc=list(map(str,scoring_gscv_nusvc.split(',')))
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_nusvc=="None":
    		n_jobs_gscv_nusvc=None
    	elif n_jobs_gscv_nusvc.isdigit()==True:
    		n_jobs_gscv_nusvc=int(n_jobs_gscv_nusvc)
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_nusvc=="True":
    		refit_gscv_nusvc=True
    	elif refit_gscv_nusvc=="False":
    		refit_gscv_nusvc=False
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_nusvc=="None":
    		cv_gscv_nusvc=None
    	elif cv_gscv_nusvc.isdigit()==True:
    		cv_gscv_nusvc=int(cv_gscv_nusvc)
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_nusvc.isdigit()==True:
    		verbose_gscv_nusvc=int(verbose_gscv_nusvc)
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_nusvc = GridSearchCV(estimator=pipe_nusvc,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_nusvc),
      	  n_jobs=(n_jobs_gscv_nusvc),
       	 refit=(refit_gscv_nusvc),
       	 cv=(cv_gscv_nusvc),
   	     verbose=(verbose_gscv_nusvc),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_nusvc
      	  )
    	except Exception as e:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gnusvc

    	    if len(gbl_pl)==0:
    	        try:
    	        	gnusvc=gs_nusvc.fit(X_train, y_train)
    	        	y_pred = gnusvc.predict(X_test)
    	        	cr_gnusvcs=(classification_report(y_test, y_pred))
    	        	#self.root.ids.model_output.text=cr_gnusvcs
            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gnusvcs)
            	except Exception as e:
            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gnusvc=gs_nusvc.fit(X_train_1, y_train)
    	        	y_pred = gnusvc.predict(X_test_1)
    	        	cr_gnusvcr=(classification_report(y_test, y_pred))

            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gnusvcr)
            	except Exception as e:
            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass
    	#	self.root.ids.model_output.text=str(e)
    	#	print(e)

    def retutrasco_gscv_nusvc(self,checkbox,value):
    	global retutrval_gscv_nusvc
    	if value:
    		retutrval_gscv_nusvc=True
    	else:
    		retutrval_gscv_nusvc=False



    def add_rndmcv_nusvc(self):

        if self.prameter_optimizer_wid_nusvc.ids.randomizedsearchcv_chk_nusvc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_nusvc.ids.randomizedsearchcv_chk_nusvc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_nusvc.ids.randomizedsearchcv_chk_nusvc.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_nusvc=Factory.randomizedsearchcv_wid_nusvc()
        	self.nu_model.ids.hypopt_grid_nusvc.add_widget(self.randomizedsearchcv_wid_nusvc)
        	self.randomizedsearch_asgn_nusvc=Factory.randomizedsearch_asgn_nusvc()
        	self.nu_model.ids.hypopt_grid_nusvc.add_widget(self.randomizedsearch_asgn_nusvc)
        	self.randomizedsearchcv_wid_nusvc.ids.return_train_score_rscv_nusvc_chk.active=True
        	self.randomizedsearchcv_wid_nusvc.ids.return_train_score_rscv_nusvc_chk.active=False

        else:
        	self.prameter_optimizer_wid_nusvc.ids.randomizedsearchcv_chk_nusvc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_nusvc.ids.randomizedsearchcv_chk_nusvc.text_color=get_color_from_hex('ffffff')

        	self.nu_model.ids.hypopt_grid_nusvc.remove_widget(self.randomizedsearchcv_wid_nusvc)
        	self.nu_model.ids.hypopt_grid_nusvc.remove_widget(self.randomizedsearch_asgn_nusvc)


    def rndmstvhact_nusvc(self):

    	try:
    		current_paramopt_nusvc.clear()
    		current_paramopt_nusvc.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.nu_model.ids.out_grid_nusvc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_nusvc=self.randomizedsearchcv_wid_nusvc.ids.n_iter_rscv_nusvc.text.replace(" ", "")
    	scoring_rscv_nusvc=self.randomizedsearchcv_wid_nusvc.ids.scoring_rscv_nusvc.text.replace(" ", "")
    	n_jobs_rscv_nusvc=self.randomizedsearchcv_wid_nusvc.ids.n_jobs_rscv_nusvc.text.replace(" ", "")
    	refit_rscv_nusvc=self.randomizedsearchcv_wid_nusvc.ids.refit_rscv_nusvc.text.replace(" ", "")
    	cv_rscv_nusvc=self.randomizedsearchcv_wid_nusvc.ids.cv_rscv_nusvc.text.replace(" ", "")
    	verbose_rscv_nusvc=self.randomizedsearchcv_wid_nusvc.ids.verbose_rscv_nusvc.text.replace(" ", "")
    	random_state_rscv_nusvc=self.randomizedsearchcv_wid_nusvc.ids.random_state_rscv_nusvc.text.replace(" ", "")

    	if n_iter_rscv_nusvc=="None":
    		n_iter_rscv_nusvc=None
    	elif n_iter_rscv_nusvc.isdigit()==True:
    		n_iter_rscv_nusvc=int(n_iter_rscv_nusvc)
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_nusvc=="None":
    		scoring_rscv_nusvc=None
    	elif "," in scoring_rscv_nusvc:
    		scoring_rscv_nusvc=list(map(str,scoring_rscv_nusvc.split(',')))
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_nusvc=="None":
    		n_jobs_rscv_nusvc=None
    	elif n_jobs_rscv_nusvc.isdigit()==True:
    		n_jobs_rscv_nusvc=int(n_jobs_rscv_nusvc)
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_nusvc=="True":
    		refit_rscv_nusvc=True
    	elif refit_rscv_nusvc=="False":
    		refit_rscv_nusvc=False
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_nusvc=="None":
    		cv_rscv_nusvc=None
    	elif cv_rscv_nusvc.isdigit()==True:
    		cv_rscv_nusvc=int(cv_rscv_nusvc)
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_nusvc.isdigit()==True:
    		verbose_rscv_nusvc=int(verbose_rscv_nusvc)
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_nusvc=="None":
    		random_state_rscv_nusvc=None
    	elif random_state_rscv_nusvc.isdigit()==True:
    		random_state_rscv_nusvc=int(random_state_rscv_nusvc)
    	else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_nusvc =RandomizedSearchCV(
        	estimator=pipe_nusvc,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_nusvc),
       	 scoring=(scoring_rscv_nusvc),
       	 n_jobs=(n_jobs_rscv_nusvc),
       	 refit=(refit_rscv_nusvc),
       	 cv=(cv_rscv_nusvc),
        	verbose=(verbose_rscv_nusvc),
        	random_state=(random_state_rscv_nusvc),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_nusvc)

    	except Exception as e:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gnusvc

    	    if len(gbl_pl)==0:
    	        try:
    	        	gnusvc=gs_nusvc.fit(X_train, y_train)
    	        	y_pred = gnusvc.predict(X_test)
    	        	cr_gnusvcs=(classification_report(y_test, y_pred))
            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gnusvcs)

            	except Exception as e:
            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gnusvc=gs_nusvc.fit(X_train_1, y_train)
    	        	y_pred = gnusvc.predict(X_test_1)
    	        	cr_gnusvcr=(classification_report(y_test, y_pred))
            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gnusvcr)

            	except Exception as e:
            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
        #	self.root.ids.model_output.text=str(e)
        #	print(e)



    def returtraiscor_rscv_nusvc(self,checkbox,value):
    	global rtrntrscr_rscv_nusvc
    	if value:
    		rtrntrscr_rscv_nusvc=True
    	else:
    		rtrntrscr_rscv_nusvc=False


#gridsearch and randomisedsearch attributes


    def cv_results_gscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "gridsearchcv" in current_paramopt_nusvc:
        	try:
        		cv_results_gscv_nusvc_out=gnusvc.cv_results_
        		print(cv_results_gscv_nusvc_out)
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "gridsearchcv" in current_paramopt_nusvc:
        	try:
        		best_score_gscv_nusvc_out=gnusvc.best_score_
        		print(best_score_gscv_nusvc_out)
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "gridsearchcv" in current_paramopt_nusvc:
        	try:
        		best_params_gscv_nusvc_out=gnusvc.best_params_
        		print(best_params_gscv_nusvc_out)
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "gridsearchcv" in current_paramopt_nusvc:
        	try:
        		best_index_gscv_nusvc_out=gnusvc.best_index_
        		print(best_index_gscv_nusvc_out)
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "gridsearchcv" in current_paramopt_nusvc:
        	try:
        		scorer_gscv_nusvc_out=gnusvc.scorer_
        		print(scorer_gscv_nusvc_out)
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "gridsearchcv" in current_paramopt_nusvc:
        	try:
        		n_splits_gscv_nusvc_out=gnusvc.n_splits_
        		print(n_splits_gscv_nusvc_out)
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "gridsearchcv" in current_paramopt_nusvc:
        	try:
        		refit_time_gscv_nusvc_out=gnusvc.refit_time_
        		print(refit_time_gscv_nusvc_out)
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "gridsearchcv" in current_paramopt_nusvc:
        	try:
        		multimetric_gscv_nusvc_out=gnusvc.multimetric_
        		print(multimetric_gscv_nusvc_out)
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "gridsearchcv" in current_paramopt_nusvc:
        	try:
        		feature_names_in_gscv_nusvc_out=gnusvc.feature_names_in_
        		print(feature_names_in_gscv_nusvc_out)
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "randomizedsearchcv" in current_paramopt_nusvc:
        	try:
        		cv_results_rscv_nusvc_out=gnusvc.cv_results_
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "randomizedsearchcv" in current_paramopt_nusvc:
        	try:
        		best_score_rscv_nusvc_out=gnusvc.best_score_
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "randomizedsearchcv" in current_paramopt_nusvc:
        	try:
        		best_params_rscv_nusvc_out=gnusvc.best_params_
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "randomizedsearchcv" in current_paramopt_nusvc:
        	try:
        		best_index_rscv_nusvc_out=gnusvc.best_index_
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "randomizedsearchcv" in current_paramopt_nusvc:
        	try:
        		scorer_rscv_nusvc_out=gnusvc.scorer_
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "randomizedsearchcv" in current_paramopt_nusvc:
        	try:
        		n_splits_rscv_nusvc_out=gnusvc.n_splits_
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "randomizedsearchcv" in current_paramopt_nusvc:
        	try:
        		refit_time_rscv_nusvc_out=gnusvc.refit_time_
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "randomizedsearchcv" in current_paramopt_nusvc:
        	try:
        		multimetric_rscv_nusvc_out=gnusvc.multimetric_
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_nusvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gnusvc" in globals() and "randomizedsearchcv" in current_paramopt_nusvc:
        	try:
        		feature_names_in_rscv_nusvc_out=gnusvc.feature_names_in_
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_nusvc_out)
        	except AttributeError as a:
        		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def  model_nusvc(self):

        try:
        	self.nu_model.ids.out_grid_nusvc.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()


        if len(decision_function_shape_nugrlst_l)==1:
        	pipe_nusvc['clfnusvc'].decision_function_shape=(decision_function_shape_nugrlst_l[0])
        	try:
        		del grid_params_nusvc['clfnusvc__decision_function_shape']
        	except:
        		pass
        elif len(decision_function_shape_nugrlst_l)==0:

            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text="undefined: decision_function_shape"
            	return

        else:
        	if 'clfnusvc__decision_function_shape' in grid_params_nusvc:
        	    pass
        	else:        	    grid_params_nusvc[decision_function_shape_nugrlst]=decision_function_shape_nugrlst_l

        if len(gamma_nugrlst_l)==1:
        	pipe_nusvc['clfnusvc'].gamma=(gamma_nugrlst_l[0])
        	try:
        		del grid_params_nusvc['clfnusvc__gamma']
        	except:
        		pass
        elif len(gamma_nugrlst_l)==0:

            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text="undefined: gamma"
            	return

        else:
        	if 'clfnusvc__gamma' in grid_params_nusvc:
        	    pass
        	else:        	    grid_params_nusvc[gamma_nugrlst]=gamma_nugrlst_l

        if len(kernel_nugrlst_l)==1:
        	pipe_nusvc['clfnusvc'].kernel=(kernel_nugrlst_l[0])
        	try:
        		del grid_params_nusvc['clfnusvc__kernel']
        	except:
        		pass
        elif len(gamma_nugrlst_l)==0:

            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text="undefined: kernel"
            	return
        else:
        	if 'clfnusvc__kernel' in grid_params_nusvc:
        	    pass
        	else:        	    grid_params_nusvc[kernel_nugrlst]=kernel_nugrlst_l

        print(pipe_nusvc)


        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return



        if  len(grid_params_nusvc)==0:

            global nusvcdat
            try:
            	self.nu_model.ids.hypopt_grid_nusvc.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		nusvcdat=pipe_nusvc.fit(X_train, y_train)
            		y_pred = nusvcdat.predict(X_test)
            		cr_nusvcgs=(classification_report(y_test, y_pred))
            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_nusvcgs)

            	except Exception as e:

            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		nusvcdat=pipe_nusvc.fit(X_train_1, y_train)
            		y_pred = nusvcdat.predict(X_test_1)
            		cr_nusvcgs=(classification_report(y_test, y_pred))

            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_nusvcgs)

            	except Exception as e:

            		self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.nu_model.ids.hypopt_grid_nusvc.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_nusvc=Factory.prameter_optimizer_wid_nusvc()
            self.nu_model.ids.hypopt_grid_nusvc.add_widget(self.prameter_optimizer_wid_nusvc)


    def add_grdscv_rdfc(self):

        if self.prameter_optimizer_wid_rdfc.ids.gridsearchcv_chk_rdfc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_rdfc.ids.gridsearchcv_chk_rdfc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_rdfc.ids.gridsearchcv_chk_rdfc.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_rdfc=Factory.gridsearchcv_wid_rdfc()
        	self.model_random_forest.ids.hypopt_grid_rdfc.add_widget(self.gridsearchcv_wid_rdfc)
        	self.gridsearch_asgn_rdfc=Factory.gridsearch_asgn_rdfc()
        	self.model_random_forest.ids.hypopt_grid_rdfc.add_widget(self.gridsearch_asgn_rdfc)
        	self.gridsearchcv_wid_rdfc.ids.return_train_score_grdfc_chk.active=True
        	self.gridsearchcv_wid_rdfc.ids.return_train_score_grdfc_chk.active=False


        else:
        	self.prameter_optimizer_wid_rdfc.ids.gridsearchcv_chk_rdfc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_rdfc.ids.gridsearchcv_chk_rdfc.text_color=get_color_from_hex('ffffff')

        	self.model_random_forest.ids.hypopt_grid_rdfc.remove_widget(self.gridsearchcv_wid_rdfc)
        	self.model_random_forest.ids.hypopt_grid_rdfc.remove_widget(self.gridsearch_asgn_rdfc)



    def grdsrchacte_rdfc(self):

    	try:
    		current_paramopt_rdfc.clear()
    		current_paramopt_rdfc.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.model_random_forest.ids.out_grid_rdfc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_rdfc=self.gridsearchcv_wid_rdfc.ids.scoring_gscv_rdfc.text.replace(" ", "")

    	n_jobs_gscv_rdfc=self.gridsearchcv_wid_rdfc.ids.n_jobs_gscv_rdfc.text.replace(" ", "")

    	refit_gscv_rdfc=self.gridsearchcv_wid_rdfc.ids.refit_gscv_rdfc.text.replace(" ", "")

    	cv_gscv_rdfc=self.gridsearchcv_wid_rdfc.ids.cv_gscv_rdfc.text.replace(" ", "")

    	verbose_gscv_rdfc=self.gridsearchcv_wid_rdfc.ids.verbose_gscv_rdfc.text.replace(" ", "")

    	if scoring_gscv_rdfc=="None":
    		scoring_gscv_rdfc=None
    	elif "," in scoring_gscv_rdfc:
    		scoring_gscv_rdfc=list(map(str,scoring_gscv_rdfc.split(',')))
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_rdfc=="None":
    		n_jobs_gscv_rdfc=None
    	elif n_jobs_gscv_rdfc.isdigit()==True:
    		n_jobs_gscv_rdfc=int(n_jobs_gscv_rdfc)
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_rdfc=="True":
    		refit_gscv_rdfc=True
    	elif refit_gscv_rdfc=="False":
    		refit_gscv_rdfc=False
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_rdfc=="None":
    		cv_gscv_rdfc=None
    	elif cv_gscv_rdfc.isdigit()==True:
    		cv_gscv_rdfc=int(cv_gscv_rdfc)
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_rdfc.isdigit()==True:
    		verbose_gscv_rdfc=int(verbose_gscv_rdfc)
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_rdfc = GridSearchCV(estimator=pipe_rdfc,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_rdfc),
      	  n_jobs=(n_jobs_gscv_rdfc),
       	 refit=(refit_gscv_rdfc),
       	 cv=(cv_gscv_rdfc),
   	     verbose=(verbose_gscv_rdfc),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_rdfc
      	  )
    	except Exception as e:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global grdfc

    	    if len(gbl_pl)==0:
    	        try:
    	        	grdfc=gs_rdfc.fit(X_train, y_train)
    	        	y_pred = grdfc.predict(X_test)
    	        	cr_grdfcs=(classification_report(y_test, y_pred))

            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_grdfcs)
            	except Exception as e:
            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	grdfc=gs_rdfc.fit(X_train_1, y_train)
    	        	y_pred = grdfc.predict(X_test_1)
    	        	cr_grdfcr=(classification_report(y_test, y_pred))

            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_grdfcr)
            	except Exception as e:
            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass
    		#self.root.ids.model_output.text=str(e)
    		#print(e)




    def retutrasco_gscv_rdfc(self,checkbox,value):
    	global retutrval_gscv_rdfc
    	if value:
    		retutrval_gscv_rdfc=True
    	else:
    		retutrval_gscv_rdfc=False



    def add_rndmcv_rdfc(self):

        if self.prameter_optimizer_wid_rdfc.ids.randomizedsearchcv_chk_rdfc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_rdfc.ids.randomizedsearchcv_chk_rdfc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_rdfc.ids.randomizedsearchcv_chk_rdfc.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_rdfc=Factory.randomizedsearchcv_wid_rdfc()
        	self.model_random_forest.ids.hypopt_grid_rdfc.add_widget(self.randomizedsearchcv_wid_rdfc)
        	self.randomizedsearch_asgn_rdfc=Factory.randomizedsearch_asgn_rdfc()
        	self.model_random_forest.ids.hypopt_grid_rdfc.add_widget(self.randomizedsearch_asgn_rdfc)
        	self.randomizedsearchcv_wid_rdfc.ids.return_train_score_rscv_rdfc_chk.active=True
        	self.randomizedsearchcv_wid_rdfc.ids.return_train_score_rscv_rdfc_chk.active=False

        else:
        	self.prameter_optimizer_wid_rdfc.ids.randomizedsearchcv_chk_rdfc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_rdfc.ids.randomizedsearchcv_chk_rdfc.text_color=get_color_from_hex('ffffff')

        	self.model_random_forest.ids.hypopt_grid_rdfc.remove_widget(self.randomizedsearchcv_wid_rdfc)
        	self.model_random_forest.ids.hypopt_grid_rdfc.remove_widget(self.randomizedsearch_asgn_rdfc)



    def rndmstvhact_rdfc(self):

    	try:
    		current_paramopt_rdfc.clear()
    		current_paramopt_rdfc.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.model_random_forest.ids.out_grid_rdfc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_rdfc=self.randomizedsearchcv_wid_rdfc.ids.n_iter_rscv_rdfc.text.replace(" ", "")
    	scoring_rscv_rdfc=self.randomizedsearchcv_wid_rdfc.ids.scoring_rscv_rdfc.text.replace(" ", "")
    	n_jobs_rscv_rdfc=self.randomizedsearchcv_wid_rdfc.ids.n_jobs_rscv_rdfc.text.replace(" ", "")
    	refit_rscv_rdfc=self.randomizedsearchcv_wid_rdfc.ids.refit_rscv_rdfc.text.replace(" ", "")
    	cv_rscv_rdfc=self.randomizedsearchcv_wid_rdfc.ids.cv_rscv_rdfc.text.replace(" ", "")
    	verbose_rscv_rdfc=self.randomizedsearchcv_wid_rdfc.ids.verbose_rscv_rdfc.text.replace(" ", "")
    	random_state_rscv_rdfc=self.randomizedsearchcv_wid_rdfc.ids.random_state_rscv_rdfc.text.replace(" ", "")

    	if n_iter_rscv_rdfc=="None":
    		n_iter_rscv_rdfc=None
    	elif n_iter_rscv_rdfc.isdigit()==True:
    		n_iter_rscv_rdfc=int(n_iter_rscv_rdfc)
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_rdfc=="None":
    		scoring_rscv_rdfc=None
    	elif "," in scoring_rscv_rdfc:
    		scoring_rscv_rdfc=list(map(str,scoring_rscv_rdfc.split(',')))
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_rdfc=="None":
    		n_jobs_rscv_rdfc=None
    	elif n_jobs_rscv_rdfc.isdigit()==True:
    		n_jobs_rscv_rdfc=int(n_jobs_rscv_rdfc)
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_rdfc=="True":
    		refit_rscv_rdfc=True
    	elif refit_rscv_rdfc=="False":
    		refit_rscv_rdfc=False
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_rdfc=="None":
    		cv_rscv_rdfc=None
    	elif cv_rscv_rdfc.isdigit()==True:
    		cv_rscv_rdfc=int(cv_rscv_rdfc)
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_rdfc.isdigit()==True:
    		verbose_rscv_rdfc=int(verbose_rscv_rdfc)
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_rdfc=="None":
    		random_state_rscv_rdfc=None
    	elif random_state_rscv_rdfc.isdigit()==True:
    		random_state_rscv_rdfc=int(random_state_rscv_rdfc)
    	else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_rdfc =RandomizedSearchCV(
        	estimator=pipe_rdfc,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_rdfc),
       	 scoring=(scoring_rscv_rdfc),
       	 n_jobs=(n_jobs_rscv_rdfc),
       	 refit=(refit_rscv_rdfc),
       	 cv=(cv_rscv_rdfc),
        	verbose=(verbose_rscv_rdfc),
        	random_state=(random_state_rscv_rdfc),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_rdfc)

    	except Exception as e:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global grdfc

    	    if len(gbl_pl)==0:
    	        try:
    	        	grdfc=gs_rdfc.fit(X_train, y_train)
    	        	y_pred = grdfc.predict(X_test)
    	        	cr_grdfcs=(classification_report(y_test, y_pred))
            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_grdfcs)

            	except Exception as e:
            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	grdfc=gs_rdfc.fit(X_train_1, y_train)
    	        	y_pred = grdfc.predict(X_test_1)
    	        	cr_grdfcr=(classification_report(y_test, y_pred))
            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_grdfcr)

            	except Exception as e:
            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
        	#self.root.ids.model_output.text=str(e)
        	#print(e)



    def returtraiscor_rscv_rdfc(self,checkbox,value):
    	global rtrntrscr_rscv_rdfc
    	if value:
    		rtrntrscr_rscv_rdfc=True
    	else:
    		rtrntrscr_rscv_rdfc=False

#gridsearch attributes


    def cv_results_gscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "gridsearchcv" in current_paramopt_rdfc:
        	try:
        		cv_results_gscv_rdfc_out=grdfc.cv_results_
        		print(cv_results_gscv_rdfc_out)
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "gridsearchcv" in current_paramopt_rdfc:
        	try:
        		best_score_gscv_rdfc_out=grdfc.best_score_
        		print(best_score_gscv_rdfc_out)
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "gridsearchcv" in current_paramopt_rdfc:
        	try:
        		best_params_gscv_rdfc_out=grdfc.best_params_
        		print(best_params_gscv_rdfc_out)
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "gridsearchcv" in current_paramopt_rdfc:
        	try:
        		best_index_gscv_rdfc_out=grdfc.best_index_
        		print(best_index_gscv_rdfc_out)
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "gridsearchcv" in current_paramopt_rdfc:
        	try:
        		scorer_gscv_rdfc_out=grdfc.scorer_
        		print(scorer_gscv_rdfc_out)
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "gridsearchcv" in current_paramopt_rdfc:
        	try:
        		n_splits_gscv_rdfc_out=grdfc.n_splits_
        		print(n_splits_gscv_rdfc_out)
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "gridsearchcv" in current_paramopt_rdfc:
        	try:
        		refit_time_gscv_rdfc_out=grdfc.refit_time_
        		print(refit_time_gscv_rdfc_out)
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "gridsearchcv" in current_paramopt_rdfc:
        	try:
        		multimetric_gscv_rdfc_out=grdfc.multimetric_
        		print(multimetric_gscv_rdfc_out)
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "gridsearchcv" in current_paramopt_rdfc:
        	try:
        		feature_names_in_gscv_rdfc_out=grdfc.feature_names_in_
        		print(feature_names_in_gscv_rdfc_out)
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "randomizedsearchcv" in current_paramopt_rdfc:
        	try:
        		cv_results_rscv_rdfc_out=grdfc.cv_results_
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "randomizedsearchcv" in current_paramopt_rdfc:
        	try:
        		best_score_rscv_rdfc_out=grdfc.best_score_
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "randomizedsearchcv" in current_paramopt_rdfc:
        	try:
        		best_params_rscv_rdfc_out=grdfc.best_params_
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "randomizedsearchcv" in current_paramopt_rdfc:
        	try:
        		best_index_rscv_rdfc_out=grdfc.best_index_
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "randomizedsearchcv" in current_paramopt_rdfc:
        	try:
        		scorer_rscv_rdfc_out=grdfc.scorer_
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "randomizedsearchcv" in current_paramopt_rdfc:
        	try:
        		n_splits_rscv_rdfc_out=grdfc.n_splits_
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "randomizedsearchcv" in current_paramopt_rdfc:
        	try:
        		refit_time_rscv_rdfc_out=grdfc.refit_time_
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "randomizedsearchcv" in current_paramopt_rdfc:
        	try:
        		multimetric_rscv_rdfc_out=grdfc.multimetric_
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_rdfc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "grdfc" in globals() and "randomizedsearchcv" in current_paramopt_rdfc:
        	try:
        		feature_names_in_rscv_rdfc_out=grdfc.feature_names_in_
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_rdfc_out)
        	except AttributeError as a:
        		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def model_rdfc(self):

 ###
        try:
        	self.model_random_forest.ids.out_grid_rdfc.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return
        if len(criterion_rdfcgrlst_l)==1:
        	pipe_rdfc['clfrdfc'].criterion=(criterion_rdfcgrlst_l[0])
        	try:
        		del grid_params_rdfc['clfrdfc__criterion']
        	except:
        		pass
        elif len(criterion_rdfcgrlst_l)==0:

            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: criterion"
            return

        else:
        	if 'clfrdfc__criterion' in grid_params_rdfc:
        	    pass
        	else:        	    grid_params_rdfc[criterion_rdfcgrlst]=criterion_rdfcgrlst_l


        if len(class_weight_rdfcgrlst_l)==1:
        	pipe_rdfc['clfrdfc'].class_weight=(class_weight_rdfcgrlst_l[0])
        	try:
        		del grid_params_rdfc['clfrdfc__class_weight']
        	except:
        		pass
        elif len(class_weight_rdfcgrlst_l)==0:

            self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: class_weight"
            return

        else:
        	if "clfrdfc__class_weight" in grid_params_rdfc:
        	    pass
        	else:        	    grid_params_rdfc[class_weight_rdfcgrlst]=class_weight_rdfcgrlst_l

        if  len(grid_params_rdfc)==0:

            global rdfcdat
            try:
            	self.model_random_forest.ids.hypopt_grid_rdfc.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		rdfcdat=pipe_rdfc.fit(X_train, y_train)
            		y_pred = rdfcdat.predict(X_test)
            		crrdfc=(classification_report(y_test, y_pred))
            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crrdfc)

            	except Exception as e:
            		print(e)

            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		rdfcdat=pipe_rdfc.fit(X_train_1, y_train)
            		y_pred = rdfcdat.predict(X_test_1)
            		crrdfc=(classification_report(y_test, y_pred))
            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crrdfc)

            	except Exception as e:
            		print(e)

            		self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.model_random_forest.ids.hypopt_grid_rdfc.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_rdfc=Factory.prameter_optimizer_wid_rdfc()
            self.model_random_forest.ids.hypopt_grid_rdfc.add_widget(self.prameter_optimizer_wid_rdfc)



    def add_grdscv_mnb(self):

        if self.prameter_optimizer_wid_mnb.ids.gridsearchcv_chk_mnb.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_mnb.ids.gridsearchcv_chk_mnb.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_mnb.ids.gridsearchcv_chk_mnb.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_mnb=Factory.gridsearchcv_wid_mnb()
        	self.mnb_model.ids.hypopt_grid_mnb.add_widget(self.gridsearchcv_wid_mnb)
        	self.gridsearch_asgn_mnb=Factory.gridsearch_asgn_mnb()
        	self.mnb_model.ids.hypopt_grid_mnb.add_widget(self.gridsearch_asgn_mnb)
        	self.gridsearchcv_wid_mnb.ids.return_train_score_gmnb_chk.active=True
        	self.gridsearchcv_wid_mnb.ids.return_train_score_gmnb_chk.active=False


        else:
        	self.prameter_optimizer_wid_mnb.ids.gridsearchcv_chk_mnb.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_mnb.ids.gridsearchcv_chk_mnb.text_color=get_color_from_hex('ffffff')

        	self.mnb_model.ids.hypopt_grid_mnb.remove_widget(self.gridsearchcv_wid_mnb)
        	self.mnb_model.ids.hypopt_grid_mnb.remove_widget(self.gridsearch_asgn_mnb)





    def grdsrchacte_mnb(self):

    	try:
    		current_paramopt_mnb.clear()
    		current_paramopt_mnb.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.mnb_model.ids.out_grid_mnb.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_mnb=self.gridsearchcv_wid_mnb.ids.scoring_gscv_mnb.text.replace(" ", "")

    	n_jobs_gscv_mnb=self.gridsearchcv_wid_mnb.ids.n_jobs_gscv_mnb.text.replace(" ", "")

    	refit_gscv_mnb=self.gridsearchcv_wid_mnb.ids.refit_gscv_mnb.text.replace(" ", "")

    	cv_gscv_mnb=self.gridsearchcv_wid_mnb.ids.cv_gscv_mnb.text.replace(" ", "")

    	verbose_gscv_mnb=self.gridsearchcv_wid_mnb.ids.verbose_gscv_mnb.text.replace(" ", "")

    	if scoring_gscv_mnb=="None":
    		scoring_gscv_mnb=None
    	elif "," in scoring_gscv_mnb:
    		scoring_gscv_mnb=list(map(str,scoring_gscv_mnb.split(',')))
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_mnb=="None":
    		n_jobs_gscv_mnb=None
    	elif n_jobs_gscv_mnb.isdigit()==True:
    		n_jobs_gscv_mnb=int(n_jobs_gscv_mnb)
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_mnb=="True":
    		refit_gscv_mnb=True
    	elif refit_gscv_mnb=="False":
    		refit_gscv_mnb=False
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_mnb=="None":
    		cv_gscv_mnb=None
    	elif cv_gscv_mnb.isdigit()==True:
    		cv_gscv_mnb=int(cv_gscv_mnb)
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_mnb.isdigit()==True:
    		verbose_gscv_mnb=int(verbose_gscv_mnb)
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_mnb = GridSearchCV(estimator=pipe_mnb,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_mnb),
      	  n_jobs=(n_jobs_gscv_mnb),
       	 refit=(refit_gscv_mnb),
       	 cv=(cv_gscv_mnb),
   	     verbose=(verbose_gscv_mnb),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_mnb
      	  )
    	except Exception as e:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gmnb

    	    if len(gbl_pl)==0:
    	        try:
    	        	gmnb=gs_mnb.fit(X_train, y_train)
    	        	y_pred = gmnb.predict(X_test)
    	        	cr_gmnbs=(classification_report(y_test, y_pred))

            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gmnbs)
            	except Exception as e:
            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gmnb=gs_mnb.fit(X_train_1, y_train)
    	        	y_pred = gmnb.predict(X_test_1)
    	        	cr_gmnbr=(classification_report(y_test, y_pred))

            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gmnbr)
            	except Exception as e:
            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass
    		#self.root.ids.model_output.text=str(e)
    		#print(e)


    def retutrasco_gscv_mnb(self,checkbox,value):
    	global retutrval_gscv_mnb
    	if value:
    		retutrval_gscv_mnb=True
    	else:
    		retutrval_gscv_mnb=False



    def add_rndmcv_mnb(self):

        if self.prameter_optimizer_wid_mnb.ids.randomizedsearchcv_chk_mnb.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_mnb.ids.randomizedsearchcv_chk_mnb.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_mnb.ids.randomizedsearchcv_chk_mnb.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_mnb=Factory.randomizedsearchcv_wid_mnb()
        	self.mnb_model.ids.hypopt_grid_mnb.add_widget(self.randomizedsearchcv_wid_mnb)
        	self.randomizedsearch_asgn_mnb=Factory.randomizedsearch_asgn_mnb()
        	self.mnb_model.ids.hypopt_grid_mnb.add_widget(self.randomizedsearch_asgn_mnb)
        	self.randomizedsearchcv_wid_mnb.ids.return_train_score_rscv_mnb_chk.active=True
        	self.randomizedsearchcv_wid_mnb.ids.return_train_score_rscv_mnb_chk.active=False

        else:
        	self.prameter_optimizer_wid_mnb.ids.randomizedsearchcv_chk_mnb.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_mnb.ids.randomizedsearchcv_chk_mnb.text_color=get_color_from_hex('ffffff')

        	self.mnb_model.ids.hypopt_grid_mnb.remove_widget(self.randomizedsearchcv_wid_mnb)
        	self.mnb_model.ids.hypopt_grid_mnb.remove_widget(self.randomizedsearch_asgn_mnb)



    def rndmstvhact_mnb(self):

    	try:
    		current_paramopt_mnb.clear()
    		current_paramopt_mnb.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.mnb_model.ids.out_grid_mnb.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_mnb=self.randomizedsearchcv_wid_mnb.ids.n_iter_rscv_mnb.text.replace(" ", "")
    	scoring_rscv_mnb=self.randomizedsearchcv_wid_mnb.ids.scoring_rscv_mnb.text.replace(" ", "")
    	n_jobs_rscv_mnb=self.randomizedsearchcv_wid_mnb.ids.n_jobs_rscv_mnb.text.replace(" ", "")
    	refit_rscv_mnb=self.randomizedsearchcv_wid_mnb.ids.refit_rscv_mnb.text.replace(" ", "")
    	cv_rscv_mnb=self.randomizedsearchcv_wid_mnb.ids.cv_rscv_mnb.text.replace(" ", "")
    	verbose_rscv_mnb=self.randomizedsearchcv_wid_mnb.ids.verbose_rscv_mnb.text.replace(" ", "")
    	random_state_rscv_mnb=self.randomizedsearchcv_wid_mnb.ids.random_state_rscv_mnb.text.replace(" ", "")

    	if n_iter_rscv_mnb=="None":
    		n_iter_rscv_mnb=None
    	elif n_iter_rscv_mnb.isdigit()==True:
    		n_iter_rscv_mnb=int(n_iter_rscv_mnb)
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_mnb=="None":
    		scoring_rscv_mnb=None
    	elif "," in scoring_rscv_mnb:
    		scoring_rscv_mnb=list(map(str,scoring_rscv_mnb.split(',')))
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_mnb=="None":
    		n_jobs_rscv_mnb=None
    	elif n_jobs_rscv_mnb.isdigit()==True:
    		n_jobs_rscv_mnb=int(n_jobs_rscv_mnb)
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_mnb=="True":
    		refit_rscv_mnb=True
    	elif refit_rscv_mnb=="False":
    		refit_rscv_mnb=False
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_mnb=="None":
    		cv_rscv_mnb=None
    	elif cv_rscv_mnb.isdigit()==True:
    		cv_rscv_mnb=int(cv_rscv_mnb)
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_mnb.isdigit()==True:
    		verbose_rscv_mnb=int(verbose_rscv_mnb)
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_mnb=="None":
    		random_state_rscv_mnb=None
    	elif random_state_rscv_mnb.isdigit()==True:
    		random_state_rscv_mnb=int(random_state_rscv_mnb)
    	else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_mnb =RandomizedSearchCV(
        	estimator=pipe_mnb,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_mnb),
       	 scoring=(scoring_rscv_mnb),
       	 n_jobs=(n_jobs_rscv_mnb),
       	 refit=(refit_rscv_mnb),
       	 cv=(cv_rscv_mnb),
        	verbose=(verbose_rscv_mnb),
        	random_state=(random_state_rscv_mnb),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_mnb)

    	except Exception as e:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gmnb

    	    if len(gbl_pl)==0:
    	        try:
    	        	gmnb=gs_mnb.fit(X_train, y_train)
    	        	y_pred = gmnb.predict(X_test)
    	        	cr_gmnbs=(classification_report(y_test, y_pred))
            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gmnbs)

            	except Exception as e:
            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gmnb=gs_mnb.fit(X_train_1, y_train)
    	        	y_pred = gmnb.predict(X_test_1)
    	        	cr_gmnbr=(classification_report(y_test, y_pred))
            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gmnbr)

            	except Exception as e:
            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
        	#self.root.ids.model_output.text=str(e)
        	#print(e)


    def returtraiscor_rscv_mnb(self,checkbox,value):
    	global rtrntrscr_rscv_mnb
    	if value:
    		rtrntrscr_rscv_mnb=True
    	else:
    		rtrntrscr_rscv_mnb=False


#gridsearch attributes


    def cv_results_gscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "gridsearchcv" in current_paramopt_mnb:
        	try:
        		cv_results_gscv_mnb_out=gmnb.cv_results_
        		print(cv_results_gscv_mnb_out)
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "gridsearchcv" in current_paramopt_mnb:
        	try:
        		best_score_gscv_mnb_out=gmnb.best_score_
        		print(best_score_gscv_mnb_out)
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "gridsearchcv" in current_paramopt_mnb:
        	try:
        		best_params_gscv_mnb_out=gmnb.best_params_
        		print(best_params_gscv_mnb_out)
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "gridsearchcv" in current_paramopt_mnb:
        	try:
        		best_index_gscv_mnb_out=gmnb.best_index_
        		print(best_index_gscv_mnb_out)
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "gridsearchcv" in current_paramopt_mnb:
        	try:
        		scorer_gscv_mnb_out=gmnb.scorer_
        		print(scorer_gscv_mnb_out)
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "gridsearchcv" in current_paramopt_mnb:
        	try:
        		n_splits_gscv_mnb_out=gmnb.n_splits_
        		print(n_splits_gscv_mnb_out)
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "gridsearchcv" in current_paramopt_mnb:
        	try:
        		refit_time_gscv_mnb_out=gmnb.refit_time_
        		print(refit_time_gscv_mnb_out)
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "gridsearchcv" in current_paramopt_mnb:
        	try:
        		multimetric_gscv_mnb_out=gmnb.multimetric_
        		print(multimetric_gscv_mnb_out)
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "gridsearchcv" in current_paramopt_mnb:
        	try:
        		feature_names_in_gscv_mnb_out=gmnb.feature_names_in_
        		print(feature_names_in_gscv_mnb_out)
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "randomizedsearchcv" in current_paramopt_mnb:
        	try:
        		cv_results_rscv_mnb_out=gmnb.cv_results_
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "randomizedsearchcv" in current_paramopt_mnb:
        	try:
        		best_score_rscv_mnb_out=gmnb.best_score_
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "randomizedsearchcv" in current_paramopt_mnb:
        	try:
        		best_params_rscv_mnb_out=gmnb.best_params_
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "randomizedsearchcv" in current_paramopt_mnb:
        	try:
        		best_index_rscv_mnb_out=gmnb.best_index_
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "randomizedsearchcv" in current_paramopt_mnb:
        	try:
        		scorer_rscv_mnb_out=gmnb.scorer_
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "randomizedsearchcv" in current_paramopt_mnb:
        	try:
        		n_splits_rscv_mnb_out=gmnb.n_splits_
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "randomizedsearchcv" in current_paramopt_mnb:
        	try:
        		refit_time_rscv_mnb_out=gmnb.refit_time_
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "randomizedsearchcv" in current_paramopt_mnb:
        	try:
        		multimetric_rscv_mnb_out=gmnb.multimetric_
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_mnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gmnb" in globals() and "randomizedsearchcv" in current_paramopt_mnb:
        	try:
        		feature_names_in_rscv_mnb_out=gmnb.feature_names_in_
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_mnb_out)
        	except AttributeError as a:
        		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def model_mnb(self):


 ###
        try:
        	self.mnb_model.ids.out_grid_mnb.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return
###
        if  len(grid_params_mnb)==0:

            global mnbdat
            try:
            	self.mnb_model.ids.hypopt_grid_mnb.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		mnbdat=pipe_mnb.fit(X_train, y_train)
            		y_pred = mnbdat.predict(X_test)
            		crmnb=(classification_report(y_test, y_pred))

            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crmnb)

            	except Exception as e:
            		print(e)

            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)
            else:
            	try:
                    X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
                    X_test_1=Pipeline((gbl_pl)).transform(X_test)
                    mnbdat=pipe_mnb.fit(X_train_1, y_train)
                    y_pred = mnbdat.predict(X_test_1)
                    crmnb = (classification_report(y_test, y_pred))
                    self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                    self.output_crd.ids.output_text_heading.text="[b]classification_report"
                    self.output_crd.ids.output_text.text=str(crmnb)

            	except Exception as e:
            		print(e)

            		self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


        else:
            try:
            	self.mnb_model.ids.hypopt_grid_mnb.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_mnb=Factory.prameter_optimizer_wid_mnb()
            self.mnb_model.ids.hypopt_grid_mnb.add_widget(self.prameter_optimizer_wid_mnb)



    def add_grdscv_bnnb(self):

        if self.prameter_optimizer_wid_bnnb.ids.gridsearchcv_chk_bnnb.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_bnnb.ids.gridsearchcv_chk_bnnb.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_bnnb.ids.gridsearchcv_chk_bnnb.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_bnnb=Factory.gridsearchcv_wid_bnnb()
        	self.bnnb_model.ids.hypopt_grid_bnnb.add_widget(self.gridsearchcv_wid_bnnb)
        	self.gridsearch_asgn_bnnb=Factory.gridsearch_asgn_bnnb()
        	self.bnnb_model.ids.hypopt_grid_bnnb.add_widget(self.gridsearch_asgn_bnnb)
        	self.gridsearchcv_wid_bnnb.ids.return_train_score_gbnnb_chk.active=True
        	self.gridsearchcv_wid_bnnb.ids.return_train_score_gbnnb_chk.active=False


        else:
        	self.prameter_optimizer_wid_bnnb.ids.gridsearchcv_chk_bnnb.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_bnnb.ids.gridsearchcv_chk_bnnb.text_color=get_color_from_hex('ffffff')

        	self.bnnb_model.ids.hypopt_grid_bnnb.remove_widget(self.gridsearchcv_wid_bnnb)
        	self.bnnb_model.ids.hypopt_grid_bnnb.remove_widget(self.gridsearch_asgn_bnnb)




    def grdsrchacte_bnnb(self):

    	try:
    		current_paramopt_bnnb.clear()
    		current_paramopt_bnnb.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.bnnb_model.ids.out_grid_bnnb.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_bnnb=self.gridsearchcv_wid_bnnb.ids.scoring_gscv_bnnb.text.replace(" ", "")

    	n_jobs_gscv_bnnb=self.gridsearchcv_wid_bnnb.ids.n_jobs_gscv_bnnb.text.replace(" ", "")

    	refit_gscv_bnnb=self.gridsearchcv_wid_bnnb.ids.refit_gscv_bnnb.text.replace(" ", "")

    	cv_gscv_bnnb=self.gridsearchcv_wid_bnnb.ids.cv_gscv_bnnb.text.replace(" ", "")

    	verbose_gscv_bnnb=self.gridsearchcv_wid_bnnb.ids.verbose_gscv_bnnb.text.replace(" ", "")

    	if scoring_gscv_bnnb=="None":
    		scoring_gscv_bnnb=None
    	elif "," in scoring_gscv_bnnb:
    		scoring_gscv_bnnb=list(map(str,scoring_gscv_bnnb.split(',')))
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_bnnb=="None":
    		n_jobs_gscv_bnnb=None
    	elif n_jobs_gscv_bnnb.isdigit()==True:
    		n_jobs_gscv_bnnb=int(n_jobs_gscv_bnnb)
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_bnnb=="True":
    		refit_gscv_bnnb=True
    	elif refit_gscv_bnnb=="False":
    		refit_gscv_bnnb=False
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_bnnb=="None":
    		cv_gscv_bnnb=None
    	elif cv_gscv_bnnb.isdigit()==True:
    		cv_gscv_bnnb=int(cv_gscv_bnnb)
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_bnnb.isdigit()==True:
    		verbose_gscv_bnnb=int(verbose_gscv_bnnb)
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_bnnb = GridSearchCV(estimator=pipe_bnnb,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_bnnb),
      	  n_jobs=(n_jobs_gscv_bnnb),
       	 refit=(refit_gscv_bnnb),
       	 cv=(cv_gscv_bnnb),
   	     verbose=(verbose_gscv_bnnb),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_bnnb
      	  )
    	except Exception as e:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gbnnb

    	    if len(gbl_pl)==0:
    	        try:
    	        	gbnnb=gs_bnnb.fit(X_train, y_train)
    	        	y_pred = gbnnb.predict(X_test)
    	        	cr_gbnnbs=(classification_report(y_test, y_pred))

            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gbnnbs)
            	except Exception as e:
            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gbnnb=gs_bnnb.fit(X_train_1, y_train)
    	        	y_pred = gbnnb.predict(X_test_1)
    	        	cr_gbnnbr=(classification_report(y_test, y_pred))

            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gbnnbr)
            	except Exception as e:
            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass
    		#self.root.ids.model_output.text=str(e)
    		#print(e)



    def retutrasco_gscv_bnnb(self,checkbox,value):
    	global retutrval_gscv_bnnb
    	if value:
    		retutrval_gscv_bnnb=True
    	else:
    		retutrval_gscv_bnnb=False



    def add_rndmcv_bnnb(self):

        if self.prameter_optimizer_wid_bnnb.ids.randomizedsearchcv_chk_bnnb.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_bnnb.ids.randomizedsearchcv_chk_bnnb.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_bnnb.ids.randomizedsearchcv_chk_bnnb.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_bnnb=Factory.randomizedsearchcv_wid_bnnb()
        	self.bnnb_model.ids.hypopt_grid_bnnb.add_widget(self.randomizedsearchcv_wid_bnnb)
        	self.randomizedsearch_asgn_bnnb=Factory.randomizedsearch_asgn_bnnb()
        	self.bnnb_model.ids.hypopt_grid_bnnb.add_widget(self.randomizedsearch_asgn_bnnb)
        	self.randomizedsearchcv_wid_bnnb.ids.return_train_score_rscv_bnnb_chk.active=True
        	self.randomizedsearchcv_wid_bnnb.ids.return_train_score_rscv_bnnb_chk.active=False

        else:
        	self.prameter_optimizer_wid_bnnb.ids.randomizedsearchcv_chk_bnnb.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_bnnb.ids.randomizedsearchcv_chk_bnnb.text_color=get_color_from_hex('ffffff')

        	self.bnnb_model.ids.hypopt_grid_bnnb.remove_widget(self.randomizedsearchcv_wid_bnnb)
        	self.bnnb_model.ids.hypopt_grid_bnnb.remove_widget(self.randomizedsearch_asgn_bnnb)




    def rndmstvhact_bnnb(self):

    	try:
    		current_paramopt_bnnb.clear()
    		current_paramopt_bnnb.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.bnnb_model.ids.out_grid_bnnb.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_bnnb=self.randomizedsearchcv_wid_bnnb.ids.n_iter_rscv_bnnb.text.replace(" ", "")
    	scoring_rscv_bnnb=self.randomizedsearchcv_wid_bnnb.ids.scoring_rscv_bnnb.text.replace(" ", "")
    	n_jobs_rscv_bnnb=self.randomizedsearchcv_wid_bnnb.ids.n_jobs_rscv_bnnb.text.replace(" ", "")
    	refit_rscv_bnnb=self.randomizedsearchcv_wid_bnnb.ids.refit_rscv_bnnb.text.replace(" ", "")
    	cv_rscv_bnnb=self.randomizedsearchcv_wid_bnnb.ids.cv_rscv_bnnb.text.replace(" ", "")
    	verbose_rscv_bnnb=self.randomizedsearchcv_wid_bnnb.ids.verbose_rscv_bnnb.text.replace(" ", "")
    	random_state_rscv_bnnb=self.randomizedsearchcv_wid_bnnb.ids.random_state_rscv_bnnb.text.replace(" ", "")

    	if n_iter_rscv_bnnb=="None":
    		n_iter_rscv_bnnb=None
    	elif n_iter_rscv_bnnb.isdigit()==True:
    		n_iter_rscv_bnnb=int(n_iter_rscv_bnnb)
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_bnnb=="None":
    		scoring_rscv_bnnb=None
    	elif "," in scoring_rscv_bnnb:
    		scoring_rscv_bnnb=list(map(str,scoring_rscv_bnnb.split(',')))
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_bnnb=="None":
    		n_jobs_rscv_bnnb=None
    	elif n_jobs_rscv_bnnb.isdigit()==True:
    		n_jobs_rscv_bnnb=int(n_jobs_rscv_bnnb)
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_bnnb=="True":
    		refit_rscv_bnnb=True
    	elif refit_rscv_bnnb=="False":
    		refit_rscv_bnnb=False
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_bnnb=="None":
    		cv_rscv_bnnb=None
    	elif cv_rscv_bnnb.isdigit()==True:
    		cv_rscv_bnnb=int(cv_rscv_bnnb)
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_bnnb.isdigit()==True:
    		verbose_rscv_bnnb=int(verbose_rscv_bnnb)
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_bnnb=="None":
    		random_state_rscv_bnnb=None
    	elif random_state_rscv_bnnb.isdigit()==True:
    		random_state_rscv_bnnb=int(random_state_rscv_bnnb)
    	else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_bnnb =RandomizedSearchCV(
        	estimator=pipe_bnnb,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_bnnb),
       	 scoring=(scoring_rscv_bnnb),
       	 n_jobs=(n_jobs_rscv_bnnb),
       	 refit=(refit_rscv_bnnb),
       	 cv=(cv_rscv_bnnb),
        	verbose=(verbose_rscv_bnnb),
        	random_state=(random_state_rscv_bnnb),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_bnnb)

    	except Exception as e:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gbnnb

    	    if len(gbl_pl)==0:
    	        try:
    	        	gbnnb=gs_bnnb.fit(X_train, y_train)
    	        	y_pred = gbnnb.predict(X_test)
    	        	cr_gbnnbs=(classification_report(y_test, y_pred))
            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gbnnbs)

            	except Exception as e:
            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gbnnb=gs_bnnb.fit(X_train_1, y_train)
    	        	y_pred = gbnnb.predict(X_test_1)
    	        	cr_gbnnbr=(classification_report(y_test, y_pred))
            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gbnnbr)

            	except Exception as e:
            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
        #	self.root.ids.model_output.text=str(e)
        #	print(e)

    def returtraiscor_rscv_bnnb(self,checkbox,value):
    	global rtrntrscr_rscv_bnnb
    	if value:
    		rtrntrscr_rscv_bnnb=True
    	else:
    		rtrntrscr_rscv_bnnb=False



    def cv_results_gscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "gridsearchcv" in current_paramopt_bnnb:
        	try:
        		cv_results_gscv_bnnb_out=gbnnb.cv_results_
        		print(cv_results_gscv_bnnb_out)
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "gridsearchcv" in current_paramopt_bnnb:
        	try:
        		best_score_gscv_bnnb_out=gbnnb.best_score_
        		print(best_score_gscv_bnnb_out)
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "gridsearchcv" in current_paramopt_bnnb:
        	try:
        		best_params_gscv_bnnb_out=gbnnb.best_params_
        		print(best_params_gscv_bnnb_out)
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "gridsearchcv" in current_paramopt_bnnb:
        	try:
        		best_index_gscv_bnnb_out=gbnnb.best_index_
        		print(best_index_gscv_bnnb_out)
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "gridsearchcv" in current_paramopt_bnnb:
        	try:
        		scorer_gscv_bnnb_out=gbnnb.scorer_
        		print(scorer_gscv_bnnb_out)
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "gridsearchcv" in current_paramopt_bnnb:
        	try:
        		n_splits_gscv_bnnb_out=gbnnb.n_splits_
        		print(n_splits_gscv_bnnb_out)
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "gridsearchcv" in current_paramopt_bnnb:
        	try:
        		refit_time_gscv_bnnb_out=gbnnb.refit_time_
        		print(refit_time_gscv_bnnb_out)
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "gridsearchcv" in current_paramopt_bnnb:
        	try:
        		multimetric_gscv_bnnb_out=gbnnb.multimetric_
        		print(multimetric_gscv_bnnb_out)
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "gridsearchcv" in current_paramopt_bnnb:
        	try:
        		feature_names_in_gscv_bnnb_out=gbnnb.feature_names_in_
        		print(feature_names_in_gscv_bnnb_out)
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def cv_results_rscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "randomizedsearchcv" in current_paramopt_bnnb:
        	try:
        		cv_results_rscv_bnnb_out=gbnnb.cv_results_
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "randomizedsearchcv" in current_paramopt_bnnb:
        	try:
        		best_score_rscv_bnnb_out=gbnnb.best_score_
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "randomizedsearchcv" in current_paramopt_bnnb:
        	try:
        		best_params_rscv_bnnb_out=gbnnb.best_params_
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "randomizedsearchcv" in current_paramopt_bnnb:
        	try:
        		best_index_rscv_bnnb_out=gbnnb.best_index_
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "randomizedsearchcv" in current_paramopt_bnnb:
        	try:
        		scorer_rscv_bnnb_out=gbnnb.scorer_
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "randomizedsearchcv" in current_paramopt_bnnb:
        	try:
        		n_splits_rscv_bnnb_out=gbnnb.n_splits_
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "randomizedsearchcv" in current_paramopt_bnnb:
        	try:
        		refit_time_rscv_bnnb_out=gbnnb.refit_time_
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "randomizedsearchcv" in current_paramopt_bnnb:
        	try:
        		multimetric_rscv_bnnb_out=gbnnb.multimetric_
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_bnnb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gbnnb" in globals() and "randomizedsearchcv" in current_paramopt_bnnb:
        	try:
        		feature_names_in_rscv_bnnb_out=gbnnb.feature_names_in_
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_bnnb_out)
        	except AttributeError as a:
        		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass





    def model_bnnb(self):

        try:
        	self.bnnb_model.ids.out_grid_bnnb.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return

        if  len(grid_params_bnnb)==0:

            global bnnbdat
            try:
            	self.bnnb_model.ids.hypopt_grid_bnnb.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		bnnbdat=pipe_bnnb.fit(X_train, y_train)
            		y_pred = bnnbdat.predict(X_test)
            		crbnnb=(classification_report(y_test, y_pred))

            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crbnnb)

            	except Exception as e:
            		print(e)

            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)
            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		bnnbdat=pipe_bnnb.fit(X_train_1, y_train)
            		y_pred = bnnbdat.predict(X_test_1)
            		crbnnb=(classification_report(y_test, y_pred))

            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crbnnb)

            	except Exception as e:
            		print(e)

            		self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.bnnb_model.ids.hypopt_grid_bnnb.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_bnnb=Factory.prameter_optimizer_wid_bnnb()
            self.bnnb_model.ids.hypopt_grid_bnnb.add_widget(self.prameter_optimizer_wid_bnnb)



    def add_grdscv_conb(self):

        if self.prameter_optimizer_wid_conb.ids.gridsearchcv_chk_conb.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_conb.ids.gridsearchcv_chk_conb.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_conb.ids.gridsearchcv_chk_conb.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_conb=Factory.gridsearchcv_wid_conb()
        	self.conb_model.ids.hypopt_grid_conb.add_widget(self.gridsearchcv_wid_conb)
        	self.gridsearch_asgn_conb=Factory.gridsearch_asgn_conb()
        	self.conb_model.ids.hypopt_grid_conb.add_widget(self.gridsearch_asgn_conb)
        	self.gridsearchcv_wid_conb.ids.return_train_score_gconb_chk.active=True
        	self.gridsearchcv_wid_conb.ids.return_train_score_gconb_chk.active=False


        else:
        	self.prameter_optimizer_wid_conb.ids.gridsearchcv_chk_conb.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_conb.ids.gridsearchcv_chk_conb.text_color=get_color_from_hex('ffffff')

        	self.conb_model.ids.hypopt_grid_conb.remove_widget(self.gridsearchcv_wid_conb)
        	self.conb_model.ids.hypopt_grid_conb.remove_widget(self.gridsearch_asgn_conb)



    def grdsrchacte_conb(self):

    	try:
    		current_paramopt_conb.clear()
    		current_paramopt_conb.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.conb_model.ids.out_grid_conb.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_conb=self.gridsearchcv_wid_conb.ids.scoring_gscv_conb.text.replace(" ", "")

    	n_jobs_gscv_conb=self.gridsearchcv_wid_conb.ids.n_jobs_gscv_conb.text.replace(" ", "")

    	refit_gscv_conb=self.gridsearchcv_wid_conb.ids.refit_gscv_conb.text.replace(" ", "")

    	cv_gscv_conb=self.gridsearchcv_wid_conb.ids.cv_gscv_conb.text.replace(" ", "")

    	verbose_gscv_conb=self.gridsearchcv_wid_conb.ids.verbose_gscv_conb.text.replace(" ", "")

    	if scoring_gscv_conb=="None":
    		scoring_gscv_conb=None
    	elif "," in scoring_gscv_conb:
    		scoring_gscv_conb=list(map(str,scoring_gscv_conb.split(',')))
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_conb=="None":
    		n_jobs_gscv_conb=None
    	elif n_jobs_gscv_conb.isdigit()==True:
    		n_jobs_gscv_conb=int(n_jobs_gscv_conb)
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_conb=="True":
    		refit_gscv_conb=True
    	elif refit_gscv_conb=="False":
    		refit_gscv_conb=False
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_conb=="None":
    		cv_gscv_conb=None
    	elif cv_gscv_conb.isdigit()==True:
    		cv_gscv_conb=int(cv_gscv_conb)
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_conb.isdigit()==True:
    		verbose_gscv_conb=int(verbose_gscv_conb)
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_conb = GridSearchCV(estimator=pipe_conb,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_conb),
      	  n_jobs=(n_jobs_gscv_conb),
       	 refit=(refit_gscv_conb),
       	 cv=(cv_gscv_conb),
   	     verbose=(verbose_gscv_conb),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_conb
      	  )
    	except Exception as e:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gconb

    	    if len(gbl_pl)==0:
    	        try:
    	        	gconb=gs_conb.fit(X_train, y_train)
    	        	y_pred = gconb.predict(X_test)
    	        	cr_gconbs=(classification_report(y_test, y_pred))

            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gconbs)
            	except Exception as e:
            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gconb=gs_conb.fit(X_train_1, y_train)
    	        	y_pred = gconb.predict(X_test_1)
    	        	cr_gconbr=(classification_report(y_test, y_pred))

            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gconbr)
            	except Exception as e:
            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass
    		#self.root.ids.model_output.text=str(e)
    		#print(e)


    def retutrasco_gscv_conb(self,checkbox,value):
    	global retutrval_gscv_conb
    	if value:
    		retutrval_gscv_conb=True
    	else:
    		retutrval_gscv_conb=False



    def add_rndmcv_conb(self):

        if self.prameter_optimizer_wid_conb.ids.randomizedsearchcv_chk_conb.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_conb.ids.randomizedsearchcv_chk_conb.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_conb.ids.randomizedsearchcv_chk_conb.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_conb=Factory.randomizedsearchcv_wid_conb()
        	self.conb_model.ids.hypopt_grid_conb.add_widget(self.randomizedsearchcv_wid_conb)
        	self.randomizedsearch_asgn_conb=Factory.randomizedsearch_asgn_conb()
        	self.conb_model.ids.hypopt_grid_conb.add_widget(self.randomizedsearch_asgn_conb)
        	self.randomizedsearchcv_wid_conb.ids.return_train_score_rscv_conb_chk.active=True
        	self.randomizedsearchcv_wid_conb.ids.return_train_score_rscv_conb_chk.active=False

        else:
        	self.prameter_optimizer_wid_conb.ids.randomizedsearchcv_chk_conb.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_conb.ids.randomizedsearchcv_chk_conb.text_color=get_color_from_hex('ffffff')

        	self.conb_model.ids.hypopt_grid_conb.remove_widget(self.randomizedsearchcv_wid_conb)
        	self.conb_model.ids.hypopt_grid_conb.remove_widget(self.randomizedsearch_asgn_conb)



    def rndmstvhact_conb(self):

    	try:
    		current_paramopt_conb.clear()
    		current_paramopt_conb.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.conb_model.ids.out_grid_conb.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_conb=self.randomizedsearchcv_wid_conb.ids.n_iter_rscv_conb.text.replace(" ", "")
    	scoring_rscv_conb=self.randomizedsearchcv_wid_conb.ids.scoring_rscv_conb.text.replace(" ", "")
    	n_jobs_rscv_conb=self.randomizedsearchcv_wid_conb.ids.n_jobs_rscv_conb.text.replace(" ", "")
    	refit_rscv_conb=self.randomizedsearchcv_wid_conb.ids.refit_rscv_conb.text.replace(" ", "")
    	cv_rscv_conb=self.randomizedsearchcv_wid_conb.ids.cv_rscv_conb.text.replace(" ", "")
    	verbose_rscv_conb=self.randomizedsearchcv_wid_conb.ids.verbose_rscv_conb.text.replace(" ", "")
    	random_state_rscv_conb=self.randomizedsearchcv_wid_conb.ids.random_state_rscv_conb.text.replace(" ", "")

    	if n_iter_rscv_conb=="None":
    		n_iter_rscv_conb=None
    	elif n_iter_rscv_conb.isdigit()==True:
    		n_iter_rscv_conb=int(n_iter_rscv_conb)
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_conb=="None":
    		scoring_rscv_conb=None
    	elif "," in scoring_rscv_conb:
    		scoring_rscv_conb=list(map(str,scoring_rscv_conb.split(',')))
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_conb=="None":
    		n_jobs_rscv_conb=None
    	elif n_jobs_rscv_conb.isdigit()==True:
    		n_jobs_rscv_conb=int(n_jobs_rscv_conb)
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_conb=="True":
    		refit_rscv_conb=True
    	elif refit_rscv_conb=="False":
    		refit_rscv_conb=False
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_conb=="None":
    		cv_rscv_conb=None
    	elif cv_rscv_conb.isdigit()==True:
    		cv_rscv_conb=int(cv_rscv_conb)
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_conb.isdigit()==True:
    		verbose_rscv_conb=int(verbose_rscv_conb)
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_conb=="None":
    		random_state_rscv_conb=None
    	elif random_state_rscv_conb.isdigit()==True:
    		random_state_rscv_conb=int(random_state_rscv_conb)
    	else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_conb =RandomizedSearchCV(
        	estimator=pipe_conb,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_conb),
       	 scoring=(scoring_rscv_conb),
       	 n_jobs=(n_jobs_rscv_conb),
       	 refit=(refit_rscv_conb),
       	 cv=(cv_rscv_conb),
        	verbose=(verbose_rscv_conb),
        	random_state=(random_state_rscv_conb),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_conb)

    	except Exception as e:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gconb

    	    if len(gbl_pl)==0:
    	        try:
    	        	gconb=gs_conb.fit(X_train, y_train)
    	        	y_pred = gconb.predict(X_test)
    	        	cr_gconbs=(classification_report(y_test, y_pred))
            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gconbs)

            	except Exception as e:
            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gconb=gs_conb.fit(X_train_1, y_train)
    	        	y_pred = gconb.predict(X_test_1)
    	        	cr_gconbr=(classification_report(y_test, y_pred))
            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gconbr)

            	except Exception as e:
            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass
       # 	self.root.ids.model_output.text=str(e)
        #	print(e)




    def returtraiscor_rscv_conb(self,checkbox,value):
    	global rtrntrscr_rscv_conb
    	if value:
    		rtrntrscr_rscv_conb=True
    	else:
    		rtrntrscr_rscv_conb=False



    def cv_results_gscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "gridsearchcv" in current_paramopt_conb:
        	try:
        		cv_results_gscv_conb_out=gconb.cv_results_
        		print(cv_results_gscv_conb_out)
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "gridsearchcv" in current_paramopt_conb:
        	try:
        		best_score_gscv_conb_out=gconb.best_score_
        		print(best_score_gscv_conb_out)
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "gridsearchcv" in current_paramopt_conb:
        	try:
        		best_params_gscv_conb_out=gconb.best_params_
        		print(best_params_gscv_conb_out)
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "gridsearchcv" in current_paramopt_conb:
        	try:
        		best_index_gscv_conb_out=gconb.best_index_
        		print(best_index_gscv_conb_out)
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "gridsearchcv" in current_paramopt_conb:
        	try:
        		scorer_gscv_conb_out=gconb.scorer_
        		print(scorer_gscv_conb_out)
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "gridsearchcv" in current_paramopt_conb:
        	try:
        		n_splits_gscv_conb_out=gconb.n_splits_
        		print(n_splits_gscv_conb_out)
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "gridsearchcv" in current_paramopt_conb:
        	try:
        		refit_time_gscv_conb_out=gconb.refit_time_
        		print(refit_time_gscv_conb_out)
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "gridsearchcv" in current_paramopt_conb:
        	try:
        		multimetric_gscv_conb_out=gconb.multimetric_
        		print(multimetric_gscv_conb_out)
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "gridsearchcv" in current_paramopt_conb:
        	try:
        		feature_names_in_gscv_conb_out=gconb.feature_names_in_
        		print(feature_names_in_gscv_conb_out)
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "randomizedsearchcv" in current_paramopt_conb:
        	try:
        		cv_results_rscv_conb_out=gconb.cv_results_
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "randomizedsearchcv" in current_paramopt_conb:
        	try:
        		best_score_rscv_conb_out=gconb.best_score_
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "randomizedsearchcv" in current_paramopt_conb:
        	try:
        		best_params_rscv_conb_out=gconb.best_params_
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "randomizedsearchcv" in current_paramopt_conb:
        	try:
        		best_index_rscv_conb_out=gconb.best_index_
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "randomizedsearchcv" in current_paramopt_conb:
        	try:
        		scorer_rscv_conb_out=gconb.scorer_
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "randomizedsearchcv" in current_paramopt_conb:
        	try:
        		n_splits_rscv_conb_out=gconb.n_splits_
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "randomizedsearchcv" in current_paramopt_conb:
        	try:
        		refit_time_rscv_conb_out=gconb.refit_time_
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "randomizedsearchcv" in current_paramopt_conb:
        	try:
        		multimetric_rscv_conb_out=gconb.multimetric_
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_conb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gconb" in globals() and "randomizedsearchcv" in current_paramopt_conb:
        	try:
        		feature_names_in_rscv_conb_out=gconb.feature_names_in_
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_conb_out)
        	except AttributeError as a:
        		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def model_conb(self):

 ###
        try:
        	self.conb_model.ids.out_grid_conb.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return
###
        if  len(grid_params_conb)==0:

            global conbdat
            try:
            	self.conb_model.ids.hypopt_grid_conb.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		conbdat=pipe_conb.fit(X_train, y_train)
            		y_pred = conbdat.predict(X_test)
            		crconb=(classification_report(y_test, y_pred))
            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crconb)

            	except Exception as e:
            		print(e)

            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)
            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		conbdat=pipe_conb.fit(X_train_1, y_train)
            		y_pred = conbdat.predict(X_test_1)
            		crconb=(classification_report(y_test, y_pred))
            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crconb)

            	except Exception as e:
            		print(e)

            		self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


        else:
            try:
            	self.conb_model.ids.hypopt_grid_conb.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_conb=Factory.prameter_optimizer_wid_conb()
            self.conb_model.ids.hypopt_grid_conb.add_widget(self.prameter_optimizer_wid_conb)



    def add_grdscv_ganb(self):

        if self.prameter_optimizer_wid_ganb.ids.gridsearchcv_chk_ganb.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_ganb.ids.gridsearchcv_chk_ganb.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_ganb.ids.gridsearchcv_chk_ganb.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_ganb=Factory.gridsearchcv_wid_ganb()
        	self.ganb_model.ids.hypopt_grid_ganb.add_widget(self.gridsearchcv_wid_ganb)
        	self.gridsearch_asgn_ganb=Factory.gridsearch_asgn_ganb()
        	self.ganb_model.ids.hypopt_grid_ganb.add_widget(self.gridsearch_asgn_ganb)
        	self.gridsearchcv_wid_ganb.ids.return_train_score_gganb_chk.active=True
        	self.gridsearchcv_wid_ganb.ids.return_train_score_gganb_chk.active=False


        else:
        	self.prameter_optimizer_wid_ganb.ids.gridsearchcv_chk_ganb.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_ganb.ids.gridsearchcv_chk_ganb.text_color=get_color_from_hex('ffffff')

        	self.ganb_model.ids.hypopt_grid_ganb.remove_widget(self.gridsearchcv_wid_ganb)
        	self.ganb_model.ids.hypopt_grid_ganb.remove_widget(self.gridsearch_asgn_ganb)



    def grdsrchacte_ganb(self):

    	try:
    		current_paramopt_ganb.clear()
    		current_paramopt_ganb.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.ganb_model.ids.out_grid_ganb.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_ganb=self.gridsearchcv_wid_ganb.ids.scoring_gscv_ganb.text.replace(" ", "")

    	n_jobs_gscv_ganb=self.gridsearchcv_wid_ganb.ids.n_jobs_gscv_ganb.text.replace(" ", "")

    	refit_gscv_ganb=self.gridsearchcv_wid_ganb.ids.refit_gscv_ganb.text.replace(" ", "")

    	cv_gscv_ganb=self.gridsearchcv_wid_ganb.ids.cv_gscv_ganb.text.replace(" ", "")

    	verbose_gscv_ganb=self.gridsearchcv_wid_ganb.ids.verbose_gscv_ganb.text.replace(" ", "")

    	if scoring_gscv_ganb=="None":
    		scoring_gscv_ganb=None
    	elif "," in scoring_gscv_ganb:
    		scoring_gscv_ganb=list(map(str,scoring_gscv_ganb.split(',')))
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_ganb=="None":
    		n_jobs_gscv_ganb=None
    	elif n_jobs_gscv_ganb.isdigit()==True:
    		n_jobs_gscv_ganb=int(n_jobs_gscv_ganb)
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_ganb=="True":
    		refit_gscv_ganb=True
    	elif refit_gscv_ganb=="False":
    		refit_gscv_ganb=False
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_ganb=="None":
    		cv_gscv_ganb=None
    	elif cv_gscv_ganb.isdigit()==True:
    		cv_gscv_ganb=int(cv_gscv_ganb)
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_ganb.isdigit()==True:
    		verbose_gscv_ganb=int(verbose_gscv_ganb)
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_ganb = GridSearchCV(estimator=pipe_ganb,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_ganb),
      	  n_jobs=(n_jobs_gscv_ganb),
       	 refit=(refit_gscv_ganb),
       	 cv=(cv_gscv_ganb),
   	     verbose=(verbose_gscv_ganb),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_ganb
      	  )
    	except Exception as e:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gganb

    	    if len(gbl_pl)==0:
    	        try:
    	        	gganb=gs_ganb.fit(X_train, y_train)
    	        	y_pred = gganb.predict(X_test)
    	        	cr_gganbs=(classification_report(y_test, y_pred))

            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gganbs)
            	except Exception as e:
            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gganb=gs_ganb.fit(X_train_1, y_train)
    	        	y_pred = gganb.predict(X_test_1)
    	        	cr_gganbr=(classification_report(y_test, y_pred))

            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gganbr)
            	except Exception as e:
            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass


    def retutrasco_gscv_ganb(self,checkbox,value):
    	global retutrval_gscv_ganb
    	if value:
    		retutrval_gscv_ganb=True
    	else:
    		retutrval_gscv_ganb=False



    def add_rndmcv_ganb(self):

        if self.prameter_optimizer_wid_ganb.ids.randomizedsearchcv_chk_ganb.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_ganb.ids.randomizedsearchcv_chk_ganb.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_ganb.ids.randomizedsearchcv_chk_ganb.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_ganb=Factory.randomizedsearchcv_wid_ganb()
        	self.ganb_model.ids.hypopt_grid_ganb.add_widget(self.randomizedsearchcv_wid_ganb)
        	self.randomizedsearch_asgn_ganb=Factory.randomizedsearch_asgn_ganb()
        	self.ganb_model.ids.hypopt_grid_ganb.add_widget(self.randomizedsearch_asgn_ganb)
        	self.randomizedsearchcv_wid_ganb.ids.return_train_score_rscv_ganb_chk.active=True
        	self.randomizedsearchcv_wid_ganb.ids.return_train_score_rscv_ganb_chk.active=False

        else:
        	self.prameter_optimizer_wid_ganb.ids.randomizedsearchcv_chk_ganb.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_ganb.ids.randomizedsearchcv_chk_ganb.text_color=get_color_from_hex('ffffff')

        	self.ganb_model.ids.hypopt_grid_ganb.remove_widget(self.randomizedsearchcv_wid_ganb)
        	self.ganb_model.ids.hypopt_grid_ganb.remove_widget(self.randomizedsearch_asgn_ganb)



    def rndmstvhact_ganb(self):

    	try:
    		current_paramopt_ganb.clear()
    		current_paramopt_ganb.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.ganb_model.ids.out_grid_ganb.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_ganb=self.randomizedsearchcv_wid_ganb.ids.n_iter_rscv_ganb.text.replace(" ", "")
    	scoring_rscv_ganb=self.randomizedsearchcv_wid_ganb.ids.scoring_rscv_ganb.text.replace(" ", "")
    	n_jobs_rscv_ganb=self.randomizedsearchcv_wid_ganb.ids.n_jobs_rscv_ganb.text.replace(" ", "")
    	refit_rscv_ganb=self.randomizedsearchcv_wid_ganb.ids.refit_rscv_ganb.text.replace(" ", "")
    	cv_rscv_ganb=self.randomizedsearchcv_wid_ganb.ids.cv_rscv_ganb.text.replace(" ", "")
    	verbose_rscv_ganb=self.randomizedsearchcv_wid_ganb.ids.verbose_rscv_ganb.text.replace(" ", "")
    	random_state_rscv_ganb=self.randomizedsearchcv_wid_ganb.ids.random_state_rscv_ganb.text.replace(" ", "")

    	if n_iter_rscv_ganb=="None":
    		n_iter_rscv_ganb=None
    	elif n_iter_rscv_ganb.isdigit()==True:
    		n_iter_rscv_ganb=int(n_iter_rscv_ganb)
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_ganb=="None":
    		scoring_rscv_ganb=None
    	elif "," in scoring_rscv_ganb:
    		scoring_rscv_ganb=list(map(str,scoring_rscv_ganb.split(',')))
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_ganb=="None":
    		n_jobs_rscv_ganb=None
    	elif n_jobs_rscv_ganb.isdigit()==True:
    		n_jobs_rscv_ganb=int(n_jobs_rscv_ganb)
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_ganb=="True":
    		refit_rscv_ganb=True
    	elif refit_rscv_ganb=="False":
    		refit_rscv_ganb=False
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_ganb=="None":
    		cv_rscv_ganb=None
    	elif cv_rscv_ganb.isdigit()==True:
    		cv_rscv_ganb=int(cv_rscv_ganb)
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_ganb.isdigit()==True:
    		verbose_rscv_ganb=int(verbose_rscv_ganb)
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_ganb=="None":
    		random_state_rscv_ganb=None
    	elif random_state_rscv_ganb.isdigit()==True:
    		random_state_rscv_ganb=int(random_state_rscv_ganb)
    	else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_ganb =RandomizedSearchCV(
        	estimator=pipe_ganb,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_ganb),
       	 scoring=(scoring_rscv_ganb),
       	 n_jobs=(n_jobs_rscv_ganb),
       	 refit=(refit_rscv_ganb),
       	 cv=(cv_rscv_ganb),
        	verbose=(verbose_rscv_ganb),
        	random_state=(random_state_rscv_ganb),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_ganb)

    	except Exception as e:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gganb

    	    if len(gbl_pl)==0:
    	        try:
    	        	gganb=gs_ganb.fit(X_train, y_train)
    	        	y_pred = gganb.predict(X_test)
    	        	cr_gganbs=(classification_report(y_test, y_pred))
            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gganbs)

            	except Exception as e:
            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gganb=gs_ganb.fit(X_train_1, y_train)
    	        	y_pred = gganb.predict(X_test_1)
    	        	cr_gganbr=(classification_report(y_test, y_pred))
            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gganbr)

            	except Exception as e:
            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass

    def returtraiscor_rscv_ganb(self,checkbox,value):
    	global rtrntrscr_rscv_ganb
    	if value:
    		rtrntrscr_rscv_ganb=True
    	else:
    		rtrntrscr_rscv_ganb=False


#gridsearch attributes


    def cv_results_gscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "gridsearchcv" in current_paramopt_ganb:
        	try:
        		cv_results_gscv_ganb_out=gganb.cv_results_
        		print(cv_results_gscv_ganb_out)
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "gridsearchcv" in current_paramopt_ganb:
        	try:
        		best_score_gscv_ganb_out=gganb.best_score_
        		print(best_score_gscv_ganb_out)
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "gridsearchcv" in current_paramopt_ganb:
        	try:
        		best_params_gscv_ganb_out=gganb.best_params_
        		print(best_params_gscv_ganb_out)
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "gridsearchcv" in current_paramopt_ganb:
        	try:
        		best_index_gscv_ganb_out=gganb.best_index_
        		print(best_index_gscv_ganb_out)
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "gridsearchcv" in current_paramopt_ganb:
        	try:
        		scorer_gscv_ganb_out=gganb.scorer_
        		print(scorer_gscv_ganb_out)
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "gridsearchcv" in current_paramopt_ganb:
        	try:
        		n_splits_gscv_ganb_out=gganb.n_splits_
        		print(n_splits_gscv_ganb_out)
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "gridsearchcv" in current_paramopt_ganb:
        	try:
        		refit_time_gscv_ganb_out=gganb.refit_time_
        		print(refit_time_gscv_ganb_out)
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "gridsearchcv" in current_paramopt_ganb:
        	try:
        		multimetric_gscv_ganb_out=gganb.multimetric_
        		print(multimetric_gscv_ganb_out)
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "gridsearchcv" in current_paramopt_ganb:
        	try:
        		feature_names_in_gscv_ganb_out=gganb.feature_names_in_
        		print(feature_names_in_gscv_ganb_out)
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "randomizedsearchcv" in current_paramopt_ganb:
        	try:
        		cv_results_rscv_ganb_out=gganb.cv_results_
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "randomizedsearchcv" in current_paramopt_ganb:
        	try:
        		best_score_rscv_ganb_out=gganb.best_score_
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "randomizedsearchcv" in current_paramopt_ganb:
        	try:
        		best_params_rscv_ganb_out=gganb.best_params_
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "randomizedsearchcv" in current_paramopt_ganb:
        	try:
        		best_index_rscv_ganb_out=gganb.best_index_
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "randomizedsearchcv" in current_paramopt_ganb:
        	try:
        		scorer_rscv_ganb_out=gganb.scorer_
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "randomizedsearchcv" in current_paramopt_ganb:
        	try:
        		n_splits_rscv_ganb_out=gganb.n_splits_
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "randomizedsearchcv" in current_paramopt_ganb:
        	try:
        		refit_time_rscv_ganb_out=gganb.refit_time_
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "randomizedsearchcv" in current_paramopt_ganb:
        	try:
        		multimetric_rscv_ganb_out=gganb.multimetric_
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_ganb(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gganb" in globals() and "randomizedsearchcv" in current_paramopt_ganb:
        	try:
        		feature_names_in_rscv_ganb_out=gganb.feature_names_in_
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_ganb_out)
        	except AttributeError as a:
        		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def model_ganb(self):

        try:
        	self.ganb_model.ids.out_grid_ganb.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return

        if  len(grid_params_ganb)==0:

            global ganbdat
            try:
            	self.ganb_model.ids.hypopt_grid_ganb.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		ganbdat=pipe_ganb.fit(X_train, y_train)
            		y_pred = ganbdat.predict(X_test)
            		crganb=(classification_report(y_test, y_pred))

            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crganb)

            	except Exception as e:
            		print(e)

            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		ganbdat=pipe_ganb.fit(X_train_1, y_train)
            		y_pred = ganbdat.predict(X_test_1)
            		crganb=(classification_report(y_test, y_pred))
            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crganb)

            	except Exception as e:
            		print(e)

            		self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.ganb_model.ids.hypopt_grid_ganb.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_ganb=Factory.prameter_optimizer_wid_ganb()
            self.ganb_model.ids.hypopt_grid_ganb.add_widget(self.prameter_optimizer_wid_ganb)



    def add_grdscv_grdc(self):

        if self.prameter_optimizer_wid_grdc.ids.gridsearchcv_chk_grdc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_grdc.ids.gridsearchcv_chk_grdc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_grdc.ids.gridsearchcv_chk_grdc.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_grdc=Factory.gridsearchcv_wid_grdc()
        	self.model_gradient_boosting.ids.hypopt_grid_grdc.add_widget(self.gridsearchcv_wid_grdc)
        	self.gridsearch_asgn_grdc=Factory.gridsearch_asgn_grdc()
        	self.model_gradient_boosting.ids.hypopt_grid_grdc.add_widget(self.gridsearch_asgn_grdc)
        	self.gridsearchcv_wid_grdc.ids.return_train_score_ggrdc_chk.active=True
        	self.gridsearchcv_wid_grdc.ids.return_train_score_ggrdc_chk.active=False


        else:
        	self.prameter_optimizer_wid_grdc.ids.gridsearchcv_chk_grdc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_grdc.ids.gridsearchcv_chk_grdc.text_color=get_color_from_hex('ffffff')

        	self.model_gradient_boosting.ids.hypopt_grid_grdc.remove_widget(self.gridsearchcv_wid_grdc)
        	self.model_gradient_boosting.ids.hypopt_grid_grdc.remove_widget(self.gridsearch_asgn_grdc)




    def grdsrchacte_grdc(self):

    	try:
    		current_paramopt_grdc.clear()
    		current_paramopt_grdc.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.model_gradient_boosting.ids.out_grid_grdc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_grdc=self.gridsearchcv_wid_grdc.ids.scoring_gscv_grdc.text.replace(" ", "")

    	n_jobs_gscv_grdc=self.gridsearchcv_wid_grdc.ids.n_jobs_gscv_grdc.text.replace(" ", "")

    	refit_gscv_grdc=self.gridsearchcv_wid_grdc.ids.refit_gscv_grdc.text.replace(" ", "")

    	cv_gscv_grdc=self.gridsearchcv_wid_grdc.ids.cv_gscv_grdc.text.replace(" ", "")

    	verbose_gscv_grdc=self.gridsearchcv_wid_grdc.ids.verbose_gscv_grdc.text.replace(" ", "")

    	if scoring_gscv_grdc=="None":
    		scoring_gscv_grdc=None
    	elif "," in scoring_gscv_grdc:
    		scoring_gscv_grdc=list(map(str,scoring_gscv_grdc.split(',')))
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_grdc=="None":
    		n_jobs_gscv_grdc=None
    	elif n_jobs_gscv_grdc.isdigit()==True:
    		n_jobs_gscv_grdc=int(n_jobs_gscv_grdc)
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_grdc=="True":
    		refit_gscv_grdc=True
    	elif refit_gscv_grdc=="False":
    		refit_gscv_grdc=False
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_grdc=="None":
    		cv_gscv_grdc=None
    	elif cv_gscv_grdc.isdigit()==True:
    		cv_gscv_grdc=int(cv_gscv_grdc)
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_grdc.isdigit()==True:
    		verbose_gscv_grdc=int(verbose_gscv_grdc)
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_grdc = GridSearchCV(estimator=pipe_grdc,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_grdc),
      	  n_jobs=(n_jobs_gscv_grdc),
       	 refit=(refit_gscv_grdc),
       	 cv=(cv_gscv_grdc),
   	     verbose=(verbose_gscv_grdc),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_grdc
      	  )
    	except Exception as e:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global ggrdc

    	    if len(gbl_pl)==0:
    	        try:
    	        	ggrdc=gs_grdc.fit(X_train, y_train)
    	        	y_pred = ggrdc.predict(X_test)
    	        	cr_ggrdcs=(classification_report(y_test, y_pred))

            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_ggrdcs)
            	except Exception as e:
            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	ggrdc=gs_grdc.fit(X_train_1, y_train)
    	        	y_pred = ggrdc.predict(X_test_1)
    	        	cr_ggrdcr=(classification_report(y_test, y_pred))

            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_ggrdcr)
            	except Exception as e:
            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass

    def retutrasco_gscv_grdc(self,checkbox,value):
    	global retutrval_gscv_grdc
    	if value:
    		retutrval_gscv_grdc=True
    	else:
    		retutrval_gscv_grdc=False



    def add_rndmcv_grdc(self):

        if self.prameter_optimizer_wid_grdc.ids.randomizedsearchcv_chk_grdc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_grdc.ids.randomizedsearchcv_chk_grdc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_grdc.ids.randomizedsearchcv_chk_grdc.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_grdc=Factory.randomizedsearchcv_wid_grdc()
        	self.model_gradient_boosting.ids.hypopt_grid_grdc.add_widget(self.randomizedsearchcv_wid_grdc)
        	self.randomizedsearch_asgn_grdc=Factory.randomizedsearch_asgn_grdc()
        	self.model_gradient_boosting.ids.hypopt_grid_grdc.add_widget(self.randomizedsearch_asgn_grdc)
        	self.randomizedsearchcv_wid_grdc.ids.return_train_score_rscv_grdc_chk.active=True
        	self.randomizedsearchcv_wid_grdc.ids.return_train_score_rscv_grdc_chk.active=False

        else:
        	self.prameter_optimizer_wid_grdc.ids.randomizedsearchcv_chk_grdc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_grdc.ids.randomizedsearchcv_chk_grdc.text_color=get_color_from_hex('ffffff')

        	self.model_gradient_boosting.ids.hypopt_grid_grdc.remove_widget(self.randomizedsearchcv_wid_grdc)
        	self.model_gradient_boosting.ids.hypopt_grid_grdc.remove_widget(self.randomizedsearch_asgn_grdc)



    def rndmstvhact_grdc(self):

    	try:
    		current_paramopt_grdc.clear()
    		current_paramopt_grdc.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.model_gradient_boosting.ids.out_grid_grdc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_grdc=self.randomizedsearchcv_wid_grdc.ids.n_iter_rscv_grdc.text.replace(" ", "")
    	scoring_rscv_grdc=self.randomizedsearchcv_wid_grdc.ids.scoring_rscv_grdc.text.replace(" ", "")
    	n_jobs_rscv_grdc=self.randomizedsearchcv_wid_grdc.ids.n_jobs_rscv_grdc.text.replace(" ", "")
    	refit_rscv_grdc=self.randomizedsearchcv_wid_grdc.ids.refit_rscv_grdc.text.replace(" ", "")
    	cv_rscv_grdc=self.randomizedsearchcv_wid_grdc.ids.cv_rscv_grdc.text.replace(" ", "")
    	verbose_rscv_grdc=self.randomizedsearchcv_wid_grdc.ids.verbose_rscv_grdc.text.replace(" ", "")
    	random_state_rscv_grdc=self.randomizedsearchcv_wid_grdc.ids.random_state_rscv_grdc.text.replace(" ", "")

    	if n_iter_rscv_grdc=="None":
    		n_iter_rscv_grdc=None
    	elif n_iter_rscv_grdc.isdigit()==True:
    		n_iter_rscv_grdc=int(n_iter_rscv_grdc)
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_grdc=="None":
    		scoring_rscv_grdc=None
    	elif "," in scoring_rscv_grdc:
    		scoring_rscv_grdc=list(map(str,scoring_rscv_grdc.split(',')))
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_grdc=="None":
    		n_jobs_rscv_grdc=None
    	elif n_jobs_rscv_grdc.isdigit()==True:
    		n_jobs_rscv_grdc=int(n_jobs_rscv_grdc)
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_grdc=="True":
    		refit_rscv_grdc=True
    	elif refit_rscv_grdc=="False":
    		refit_rscv_grdc=False
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_grdc=="None":
    		cv_rscv_grdc=None
    	elif cv_rscv_grdc.isdigit()==True:
    		cv_rscv_grdc=int(cv_rscv_grdc)
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_grdc.isdigit()==True:
    		verbose_rscv_grdc=int(verbose_rscv_grdc)
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_grdc=="None":
    		random_state_rscv_grdc=None
    	elif random_state_rscv_grdc.isdigit()==True:
    		random_state_rscv_grdc=int(random_state_rscv_grdc)
    	else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_grdc =RandomizedSearchCV(
        	estimator=pipe_grdc,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_grdc),
       	 scoring=(scoring_rscv_grdc),
       	 n_jobs=(n_jobs_rscv_grdc),
       	 refit=(refit_rscv_grdc),
       	 cv=(cv_rscv_grdc),
        	verbose=(verbose_rscv_grdc),
        	random_state=(random_state_rscv_grdc),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_grdc)

    	except Exception as e:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global ggrdc

    	    if len(gbl_pl)==0:
    	        try:
    	        	ggrdc=gs_grdc.fit(X_train, y_train)
    	        	y_pred = ggrdc.predict(X_test)
    	        	cr_ggrdcs=(classification_report(y_test, y_pred))
            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_ggrdcs)

            	except Exception as e:
            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	ggrdc=gs_grdc.fit(X_train_1, y_train)
    	        	y_pred = ggrdc.predict(X_test_1)
    	        	cr_ggrdcr=(classification_report(y_test, y_pred))
            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_ggrdcr)

            	except Exception as e:
            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass

    def returtraiscor_rscv_grdc(self,checkbox,value):
    	global rtrntrscr_rscv_grdc
    	if value:
    		rtrntrscr_rscv_grdc=True
    	else:
    		rtrntrscr_rscv_grdc=False



    def cv_results_gscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "gridsearchcv" in current_paramopt_grdc:
        	try:
        		cv_results_gscv_grdc_out=ggrdc.cv_results_
        		print(cv_results_gscv_grdc_out)
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "gridsearchcv" in current_paramopt_grdc:
        	try:
        		best_score_gscv_grdc_out=ggrdc.best_score_
        		print(best_score_gscv_grdc_out)
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "gridsearchcv" in current_paramopt_grdc:
        	try:
        		best_params_gscv_grdc_out=ggrdc.best_params_
        		print(best_params_gscv_grdc_out)
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "gridsearchcv" in current_paramopt_grdc:
        	try:
        		best_index_gscv_grdc_out=ggrdc.best_index_
        		print(best_index_gscv_grdc_out)
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "gridsearchcv" in current_paramopt_grdc:
        	try:
        		scorer_gscv_grdc_out=ggrdc.scorer_
        		print(scorer_gscv_grdc_out)
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "gridsearchcv" in current_paramopt_grdc:
        	try:
        		n_splits_gscv_grdc_out=ggrdc.n_splits_
        		print(n_splits_gscv_grdc_out)
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "gridsearchcv" in current_paramopt_grdc:
        	try:
        		refit_time_gscv_grdc_out=ggrdc.refit_time_
        		print(refit_time_gscv_grdc_out)
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "gridsearchcv" in current_paramopt_grdc:
        	try:
        		multimetric_gscv_grdc_out=ggrdc.multimetric_
        		print(multimetric_gscv_grdc_out)
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "gridsearchcv" in current_paramopt_grdc:
        	try:
        		feature_names_in_gscv_grdc_out=ggrdc.feature_names_in_
        		print(feature_names_in_gscv_grdc_out)
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "randomizedsearchcv" in current_paramopt_grdc:
        	try:
        		cv_results_rscv_grdc_out=ggrdc.cv_results_
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "randomizedsearchcv" in current_paramopt_grdc:
        	try:
        		best_score_rscv_grdc_out=ggrdc.best_score_
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "randomizedsearchcv" in current_paramopt_grdc:
        	try:
        		best_params_rscv_grdc_out=ggrdc.best_params_
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "randomizedsearchcv" in current_paramopt_grdc:
        	try:
        		best_index_rscv_grdc_out=ggrdc.best_index_
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "randomizedsearchcv" in current_paramopt_grdc:
        	try:
        		scorer_rscv_grdc_out=ggrdc.scorer_
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "randomizedsearchcv" in current_paramopt_grdc:
        	try:
        		n_splits_rscv_grdc_out=ggrdc.n_splits_
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "randomizedsearchcv" in current_paramopt_grdc:
        	try:
        		refit_time_rscv_grdc_out=ggrdc.refit_time_
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "randomizedsearchcv" in current_paramopt_grdc:
        	try:
        		multimetric_rscv_grdc_out=ggrdc.multimetric_
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_grdc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "ggrdc" in globals() and "randomizedsearchcv" in current_paramopt_grdc:
        	try:
        		feature_names_in_rscv_grdc_out=ggrdc.feature_names_in_
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_grdc_out)
        	except AttributeError as a:
        		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def model_grdc(self):

 ###
        try:
        	self.model_gradient_boosting.ids.out_grid_grdc.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return

        if len(criterion_grdcgrlst_l)==1:
        	pipe_grdc['clfgrdc'].criterion=(criterion_grdcgrlst_l[0])
        	try:
        		del grid_params_grdc['clfgrdc__criterion']
        	except:
        		pass
        elif len(criterion_grdcgrlst_l)==0:

            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: criterion"
            return

        else:
        	if 'clfgrdc__criterion' in grid_params_grdc:
        	    pass
        	else:        	    grid_params_grdc[criterion_grdcgrlst]=criterion_grdcgrlst_l

        if len(loss_grdcgrlst_l)==1:
        	pipe_grdc['clfgrdc'].loss=(loss_grdcgrlst_l[0])
        	try:
        		del grid_params_grdc['clfgrdc__loss']
        	except:
        		pass
        elif len(loss_grdcgrlst_l)==0:

            self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: loss"
            return
        else:
        	if 'clfgrdc__loss' in grid_params_grdc:
        	    pass
        	else:        	    grid_params_grdc[loss_grdcgrlst]=loss_grdcgrlst_l



        if  len(grid_params_grdc)==0:

            global grdcdat
            try:
            	self.model_gradient_boosting.ids.hypopt_grid_grdc.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		grdcdat=pipe_grdc.fit(X_train, y_train)
            		y_pred = grdcdat.predict(X_test)
            		crgrdc=(classification_report(y_test, y_pred))
            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crgrdc)

            	except Exception as e:
            		print(e)

            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		grdcdat=pipe_grdc.fit(X_train_1, y_train)
            		y_pred = grdcdat.predict(X_test_1)
            		crgrdc=(classification_report(y_test, y_pred))
            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crgrdc)

            	except Exception as e:
            		print(e)

            		self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)
        else:
            try:
            	self.model_gradient_boosting.ids.hypopt_grid_grdc.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_grdc=Factory.prameter_optimizer_wid_grdc()
            self.model_gradient_boosting.ids.hypopt_grid_grdc.add_widget(self.prameter_optimizer_wid_grdc)


    def add_grdscv_knn(self):

        if self.prameter_optimizer_wid_knn.ids.gridsearchcv_chk_knn.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_knn.ids.gridsearchcv_chk_knn.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_knn.ids.gridsearchcv_chk_knn.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_knn=Factory.gridsearchcv_wid_knn()
        	self.model_knn.ids.hypopt_grid_knn.add_widget(self.gridsearchcv_wid_knn)
        	self.gridsearch_asgn_knn=Factory.gridsearch_asgn_knn()
        	self.model_knn.ids.hypopt_grid_knn.add_widget(self.gridsearch_asgn_knn)
        	self.gridsearchcv_wid_knn.ids.return_train_score_gknn_chk.active=True
        	self.gridsearchcv_wid_knn.ids.return_train_score_gknn_chk.active=False


        else:
        	self.prameter_optimizer_wid_knn.ids.gridsearchcv_chk_knn.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_knn.ids.gridsearchcv_chk_knn.text_color=get_color_from_hex('ffffff')

        	self.model_knn.ids.hypopt_grid_knn.remove_widget(self.gridsearchcv_wid_knn)
        	self.model_knn.ids.hypopt_grid_knn.remove_widget(self.gridsearch_asgn_knn)




    def grdsrchacte_knn(self):

    	try:
    		current_paramopt_knn.clear()
    		current_paramopt_knn.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.model_knn.ids.out_grid_knn.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_knn=self.gridsearchcv_wid_knn.ids.scoring_gscv_knn.text.replace(" ", "")

    	n_jobs_gscv_knn=self.gridsearchcv_wid_knn.ids.n_jobs_gscv_knn.text.replace(" ", "")

    	refit_gscv_knn=self.gridsearchcv_wid_knn.ids.refit_gscv_knn.text.replace(" ", "")

    	cv_gscv_knn=self.gridsearchcv_wid_knn.ids.cv_gscv_knn.text.replace(" ", "")

    	verbose_gscv_knn=self.gridsearchcv_wid_knn.ids.verbose_gscv_knn.text.replace(" ", "")

    	if scoring_gscv_knn=="None":
    		scoring_gscv_knn=None
    	elif "," in scoring_gscv_knn:
    		scoring_gscv_knn=list(map(str,scoring_gscv_knn.split(',')))
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_knn=="None":
    		n_jobs_gscv_knn=None
    	elif n_jobs_gscv_knn.isdigit()==True:
    		n_jobs_gscv_knn=int(n_jobs_gscv_knn)
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_knn=="True":
    		refit_gscv_knn=True
    	elif refit_gscv_knn=="False":
    		refit_gscv_knn=False
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_knn=="None":
    		cv_gscv_knn=None
    	elif cv_gscv_knn.isdigit()==True:
    		cv_gscv_knn=int(cv_gscv_knn)
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_knn.isdigit()==True:
    		verbose_gscv_knn=int(verbose_gscv_knn)
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_knn = GridSearchCV(estimator=pipe_knn,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_knn),
      	  n_jobs=(n_jobs_gscv_knn),
       	 refit=(refit_gscv_knn),
       	 cv=(cv_gscv_knn),
   	     verbose=(verbose_gscv_knn),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_knn
      	  )
    	except Exception as e:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gknn

    	    if len(gbl_pl)==0:
    	        try:
    	        	gknn=gs_knn.fit(X_train, y_train)
    	        	y_pred = gknn.predict(X_test)
    	        	cr_gknns=(classification_report(y_test, y_pred))

            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gknns)
            	except Exception as e:
            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gknn=gs_knn.fit(X_train_1, y_train)
    	        	y_pred = gknn.predict(X_test_1)
    	        	cr_gknnr=(classification_report(y_test, y_pred))

            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gknnr)
            	except Exception as e:
            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass


    def retutrasco_gscv_knn(self,checkbox,value):
    	global retutrval_gscv_knn
    	if value:
    		retutrval_gscv_knn=True
    	else:
    		retutrval_gscv_knn=False



    def add_rndmcv_knn(self):

        if self.prameter_optimizer_wid_knn.ids.randomizedsearchcv_chk_knn.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_knn.ids.randomizedsearchcv_chk_knn.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_knn.ids.randomizedsearchcv_chk_knn.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_knn=Factory.randomizedsearchcv_wid_knn()
        	self.model_knn.ids.hypopt_grid_knn.add_widget(self.randomizedsearchcv_wid_knn)
        	self.randomizedsearch_asgn_knn=Factory.randomizedsearch_asgn_knn()
        	self.model_knn.ids.hypopt_grid_knn.add_widget(self.randomizedsearch_asgn_knn)
        	self.randomizedsearchcv_wid_knn.ids.return_train_score_rscv_knn_chk.active=True
        	self.randomizedsearchcv_wid_knn.ids.return_train_score_rscv_knn_chk.active=False

        else:
        	self.prameter_optimizer_wid_knn.ids.randomizedsearchcv_chk_knn.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_knn.ids.randomizedsearchcv_chk_knn.text_color=get_color_from_hex('ffffff')

        	self.model_knn.ids.hypopt_grid_knn.remove_widget(self.randomizedsearchcv_wid_knn)
        	self.model_knn.ids.hypopt_grid_knn.remove_widget(self.randomizedsearch_asgn_knn)


    def rndmstvhact_knn(self):

    	try:
    		current_paramopt_knn.clear()
    		current_paramopt_knn.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.model_knn.ids.out_grid_knn.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_knn=self.randomizedsearchcv_wid_knn.ids.n_iter_rscv_knn.text.replace(" ", "")
    	scoring_rscv_knn=self.randomizedsearchcv_wid_knn.ids.scoring_rscv_knn.text.replace(" ", "")
    	n_jobs_rscv_knn=self.randomizedsearchcv_wid_knn.ids.n_jobs_rscv_knn.text.replace(" ", "")
    	refit_rscv_knn=self.randomizedsearchcv_wid_knn.ids.refit_rscv_knn.text.replace(" ", "")
    	cv_rscv_knn=self.randomizedsearchcv_wid_knn.ids.cv_rscv_knn.text.replace(" ", "")
    	verbose_rscv_knn=self.randomizedsearchcv_wid_knn.ids.verbose_rscv_knn.text.replace(" ", "")
    	random_state_rscv_knn=self.randomizedsearchcv_wid_knn.ids.random_state_rscv_knn.text.replace(" ", "")

    	if n_iter_rscv_knn=="None":
    		n_iter_rscv_knn=None
    	elif n_iter_rscv_knn.isdigit()==True:
    		n_iter_rscv_knn=int(n_iter_rscv_knn)
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_knn=="None":
    		scoring_rscv_knn=None
    	elif "," in scoring_rscv_knn:
    		scoring_rscv_knn=list(map(str,scoring_rscv_knn.split(',')))
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_knn=="None":
    		n_jobs_rscv_knn=None
    	elif n_jobs_rscv_knn.isdigit()==True:
    		n_jobs_rscv_knn=int(n_jobs_rscv_knn)
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_knn=="True":
    		refit_rscv_knn=True
    	elif refit_rscv_knn=="False":
    		refit_rscv_knn=False
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_knn=="None":
    		cv_rscv_knn=None
    	elif cv_rscv_knn.isdigit()==True:
    		cv_rscv_knn=int(cv_rscv_knn)
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_knn.isdigit()==True:
    		verbose_rscv_knn=int(verbose_rscv_knn)
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_knn=="None":
    		random_state_rscv_knn=None
    	elif random_state_rscv_knn.isdigit()==True:
    		random_state_rscv_knn=int(random_state_rscv_knn)
    	else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_knn =RandomizedSearchCV(
        	estimator=pipe_knn,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_knn),
       	 scoring=(scoring_rscv_knn),
       	 n_jobs=(n_jobs_rscv_knn),
       	 refit=(refit_rscv_knn),
       	 cv=(cv_rscv_knn),
        	verbose=(verbose_rscv_knn),
        	random_state=(random_state_rscv_knn),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_knn)

    	except Exception as e:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gknn

    	    if len(gbl_pl)==0:
    	        try:
    	        	gknn=gs_knn.fit(X_train, y_train)
    	        	y_pred = gknn.predict(X_test)
    	        	cr_gknns=(classification_report(y_test, y_pred))
            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gknns)

            	except Exception as e:
            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gknn=gs_knn.fit(X_train_1, y_train)
    	        	y_pred = gknn.predict(X_test_1)
    	        	cr_gknnr=(classification_report(y_test, y_pred))
            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gknnr)

            	except Exception as e:
            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass


    def returtraiscor_rscv_knn(self,checkbox,value):
    	global rtrntrscr_rscv_knn
    	if value:
    		rtrntrscr_rscv_knn=True
    	else:
    		rtrntrscr_rscv_knn=False



    def cv_results_gscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "gridsearchcv" in current_paramopt_knn:
        	try:
        		cv_results_gscv_knn_out=gknn.cv_results_
        		print(cv_results_gscv_knn_out)
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "gridsearchcv" in current_paramopt_knn:
        	try:
        		best_score_gscv_knn_out=gknn.best_score_
        		print(best_score_gscv_knn_out)
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "gridsearchcv" in current_paramopt_knn:
        	try:
        		best_params_gscv_knn_out=gknn.best_params_
        		print(best_params_gscv_knn_out)
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "gridsearchcv" in current_paramopt_knn:
        	try:
        		best_index_gscv_knn_out=gknn.best_index_
        		print(best_index_gscv_knn_out)
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "gridsearchcv" in current_paramopt_knn:
        	try:
        		scorer_gscv_knn_out=gknn.scorer_
        		print(scorer_gscv_knn_out)
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "gridsearchcv" in current_paramopt_knn:
        	try:
        		n_splits_gscv_knn_out=gknn.n_splits_
        		print(n_splits_gscv_knn_out)
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "gridsearchcv" in current_paramopt_knn:
        	try:
        		refit_time_gscv_knn_out=gknn.refit_time_
        		print(refit_time_gscv_knn_out)
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "gridsearchcv" in current_paramopt_knn:
        	try:
        		multimetric_gscv_knn_out=gknn.multimetric_
        		print(multimetric_gscv_knn_out)
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "gridsearchcv" in current_paramopt_knn:
        	try:
        		feature_names_in_gscv_knn_out=gknn.feature_names_in_
        		print(feature_names_in_gscv_knn_out)
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "randomizedsearchcv" in current_paramopt_knn:
        	try:
        		cv_results_rscv_knn_out=gknn.cv_results_
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "randomizedsearchcv" in current_paramopt_knn:
        	try:
        		best_score_rscv_knn_out=gknn.best_score_
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "randomizedsearchcv" in current_paramopt_knn:
        	try:
        		best_params_rscv_knn_out=gknn.best_params_
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "randomizedsearchcv" in current_paramopt_knn:
        	try:
        		best_index_rscv_knn_out=gknn.best_index_
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "randomizedsearchcv" in current_paramopt_knn:
        	try:
        		scorer_rscv_knn_out=gknn.scorer_
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "randomizedsearchcv" in current_paramopt_knn:
        	try:
        		n_splits_rscv_knn_out=gknn.n_splits_
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "randomizedsearchcv" in current_paramopt_knn:
        	try:
        		refit_time_rscv_knn_out=gknn.refit_time_
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "randomizedsearchcv" in current_paramopt_knn:
        	try:
        		multimetric_rscv_knn_out=gknn.multimetric_
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_knn(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "gknn" in globals() and "randomizedsearchcv" in current_paramopt_knn:
        	try:
        		feature_names_in_rscv_knn_out=gknn.feature_names_in_
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_knn_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_knn.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def model_knearest(self):

        try:
        	self.model_knn.ids.out_grid_knn.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


        if len(weightsknb)==1:
        	pipe_knn['clfknn'].weights=(weightsknb[0])
        	try:
        		del grid_params_knn['clfknn__weights']
        	except:
        		pass

        elif len(weightsknb)==0:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: weights"
            return

        else:
        	if 'clfknn__weights' in grid_params_knn:
        	    pass
        	else:
        		grid_params_knn[wghtknb]=weightsknb

        if len(algorithmknb)==1:
        	pipe_knn['clfknn'].algorithm=(algorithmknb[0])
        	try:
        		del grid_params_knn['clfknn__algorithm']
        	except:
        		pass

        elif len(algorithmknb)==0:
            self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: algorithm"
            return

        else:
        	if 'clfknn__algorithm' in grid_params_knn:
        	    pass
        	else:
        		grid_params_knn[algknb]=algorithmknb



        if  len(grid_params_knn)==0:

            global knndat
            try:
            	self.model_knn.ids.hypopt_grid_knn.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		knndat=pipe_knn.fit(X_train, y_train)
            		y_pred = knndat.predict(X_test)
            		crknn=(classification_report(y_test, y_pred))

            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crknn)

            	except Exception as e:
            		print(e)

            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		knndat=pipe_knn.fit(X_train_1, y_train)
            		y_pred = knndat.predict(X_test_1)
            		crknn=(classification_report(y_test, y_pred))
            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crknn)

            	except Exception as e:
            		print(e)

            		self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.model_knn.ids.hypopt_grid_knn.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_knn=Factory.prameter_optimizer_wid_knn()
            self.model_knn.ids.hypopt_grid_knn.add_widget(self.prameter_optimizer_wid_knn)



    def add_grdscv_lsvc(self):

        if self.prameter_optimizer_wid_lsvc.ids.gridsearchcv_chk_lsvc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_lsvc.ids.gridsearchcv_chk_lsvc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_lsvc.ids.gridsearchcv_chk_lsvc.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_lsvc=Factory.gridsearchcv_wid_lsvc()
        	self.model_linear_svc.ids.hypopt_grid_lsvc.add_widget(self.gridsearchcv_wid_lsvc)
        	self.gridsearch_asgn_lsvc=Factory.gridsearch_asgn_lsvc()
        	self.model_linear_svc.ids.hypopt_grid_lsvc.add_widget(self.gridsearch_asgn_lsvc)
        	self.gridsearchcv_wid_lsvc.ids.return_train_score_glsvc_chk.active=True
        	self.gridsearchcv_wid_lsvc.ids.return_train_score_glsvc_chk.active=False


        else:
        	self.prameter_optimizer_wid_lsvc.ids.gridsearchcv_chk_lsvc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_lsvc.ids.gridsearchcv_chk_lsvc.text_color=get_color_from_hex('ffffff')

        	self.model_linear_svc.ids.hypopt_grid_lsvc.remove_widget(self.gridsearchcv_wid_lsvc)
        	self.model_linear_svc.ids.hypopt_grid_lsvc.remove_widget(self.gridsearch_asgn_lsvc)


    def grdsrchacte_lsvc(self):

    	try:
    		current_paramopt_lsvc.clear()
    		current_paramopt_lsvc.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.model_linear_svc.ids.out_grid_lsvc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_lsvc=self.gridsearchcv_wid_lsvc.ids.scoring_gscv_lsvc.text.replace(" ", "")

    	n_jobs_gscv_lsvc=self.gridsearchcv_wid_lsvc.ids.n_jobs_gscv_lsvc.text.replace(" ", "")

    	refit_gscv_lsvc=self.gridsearchcv_wid_lsvc.ids.refit_gscv_lsvc.text.replace(" ", "")

    	cv_gscv_lsvc=self.gridsearchcv_wid_lsvc.ids.cv_gscv_lsvc.text.replace(" ", "")

    	verbose_gscv_lsvc=self.gridsearchcv_wid_lsvc.ids.verbose_gscv_lsvc.text.replace(" ", "")

    	if scoring_gscv_lsvc=="None":
    		scoring_gscv_lsvc=None
    	elif "," in scoring_gscv_lsvc:
    		scoring_gscv_lsvc=list(map(str,scoring_gscv_lsvc.split(',')))
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_lsvc=="None":
    		n_jobs_gscv_lsvc=None
    	elif n_jobs_gscv_lsvc.isdigit()==True:
    		n_jobs_gscv_lsvc=int(n_jobs_gscv_lsvc)
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_lsvc=="True":
    		refit_gscv_lsvc=True
    	elif refit_gscv_lsvc=="False":
    		refit_gscv_lsvc=False
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_lsvc=="None":
    		cv_gscv_lsvc=None
    	elif cv_gscv_lsvc.isdigit()==True:
    		cv_gscv_lsvc=int(cv_gscv_lsvc)
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_lsvc.isdigit()==True:
    		verbose_gscv_lsvc=int(verbose_gscv_lsvc)
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_lsvc = GridSearchCV(estimator=pipe_lsvc,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_lsvc),
      	  n_jobs=(n_jobs_gscv_lsvc),
       	 refit=(refit_gscv_lsvc),
       	 cv=(cv_gscv_lsvc),
   	     verbose=(verbose_gscv_lsvc),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_lsvc
      	  )
    	except Exception as e:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global glsvc

    	    if len(gbl_pl)==0:
    	        try:
    	        	glsvc=gs_lsvc.fit(X_train, y_train)
    	        	y_pred = glsvc.predict(X_test)
    	        	cr_glsvcs=(classification_report(y_test, y_pred))
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_glsvcs)
            	except Exception as e:
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	glsvc=gs_lsvc.fit(X_train_1, y_train)
    	        	y_pred = glsvc.predict(X_test_1)
    	        	cr_glsvcr=(classification_report(y_test, y_pred))

            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_glsvcr)
            	except Exception as e:
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass


    def retutrasco_gscv_lsvc(self,checkbox,value):
    	global retutrval_gscv_lsvc
    	if value:
    		retutrval_gscv_lsvc=True
    	else:
    		retutrval_gscv_lsvc=False



    def add_rndmcv_lsvc(self):

        if self.prameter_optimizer_wid_lsvc.ids.randomizedsearchcv_chk_lsvc.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_lsvc.ids.randomizedsearchcv_chk_lsvc.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_lsvc.ids.randomizedsearchcv_chk_lsvc.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_lsvc=Factory.randomizedsearchcv_wid_lsvc()
        	self.model_linear_svc.ids.hypopt_grid_lsvc.add_widget(self.randomizedsearchcv_wid_lsvc)
        	self.randomizedsearch_asgn_lsvc=Factory.randomizedsearch_asgn_lsvc()
        	self.model_linear_svc.ids.hypopt_grid_lsvc.add_widget(self.randomizedsearch_asgn_lsvc)
        	self.randomizedsearchcv_wid_lsvc.ids.return_train_score_rscv_lsvc_chk.active=True
        	self.randomizedsearchcv_wid_lsvc.ids.return_train_score_rscv_lsvc_chk.active=False

        else:
        	self.prameter_optimizer_wid_lsvc.ids.randomizedsearchcv_chk_lsvc.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_lsvc.ids.randomizedsearchcv_chk_lsvc.text_color=get_color_from_hex('ffffff')

        	self.model_linear_svc.ids.hypopt_grid_lsvc.remove_widget(self.randomizedsearchcv_wid_lsvc)
        	self.model_linear_svc.ids.hypopt_grid_lsvc.remove_widget(self.randomizedsearch_asgn_lsvc)




    def rndmstvhact_lsvc(self):

    	try:
    		current_paramopt_lsvc.clear()
    		current_paramopt_lsvc.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.model_linear_svc.ids.out_grid_lsvc.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_lsvc=self.randomizedsearchcv_wid_lsvc.ids.n_iter_rscv_lsvc.text.replace(" ", "")
    	scoring_rscv_lsvc=self.randomizedsearchcv_wid_lsvc.ids.scoring_rscv_lsvc.text.replace(" ", "")
    	n_jobs_rscv_lsvc=self.randomizedsearchcv_wid_lsvc.ids.n_jobs_rscv_lsvc.text.replace(" ", "")
    	refit_rscv_lsvc=self.randomizedsearchcv_wid_lsvc.ids.refit_rscv_lsvc.text.replace(" ", "")
    	cv_rscv_lsvc=self.randomizedsearchcv_wid_lsvc.ids.cv_rscv_lsvc.text.replace(" ", "")
    	verbose_rscv_lsvc=self.randomizedsearchcv_wid_lsvc.ids.verbose_rscv_lsvc.text.replace(" ", "")
    	random_state_rscv_lsvc=self.randomizedsearchcv_wid_lsvc.ids.random_state_rscv_lsvc.text.replace(" ", "")

    	if n_iter_rscv_lsvc=="None":
    		n_iter_rscv_lsvc=None
    	elif n_iter_rscv_lsvc.isdigit()==True:
    		n_iter_rscv_lsvc=int(n_iter_rscv_lsvc)
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_lsvc=="None":
    		scoring_rscv_lsvc=None
    	elif "," in scoring_rscv_lsvc:
    		scoring_rscv_lsvc=list(map(str,scoring_rscv_lsvc.split(',')))
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_lsvc=="None":
    		n_jobs_rscv_lsvc=None
    	elif n_jobs_rscv_lsvc.isdigit()==True:
    		n_jobs_rscv_lsvc=int(n_jobs_rscv_lsvc)
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_lsvc=="True":
    		refit_rscv_lsvc=True
    	elif refit_rscv_lsvc=="False":
    		refit_rscv_lsvc=False
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_lsvc=="None":
    		cv_rscv_lsvc=None
    	elif cv_rscv_lsvc.isdigit()==True:
    		cv_rscv_lsvc=int(cv_rscv_lsvc)
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_lsvc.isdigit()==True:
    		verbose_rscv_lsvc=int(verbose_rscv_lsvc)
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_lsvc=="None":
    		random_state_rscv_lsvc=None
    	elif random_state_rscv_lsvc.isdigit()==True:
    		random_state_rscv_lsvc=int(random_state_rscv_lsvc)
    	else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_lsvc =RandomizedSearchCV(
        	estimator=pipe_lsvc,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_lsvc),
       	 scoring=(scoring_rscv_lsvc),
       	 n_jobs=(n_jobs_rscv_lsvc),
       	 refit=(refit_rscv_lsvc),
       	 cv=(cv_rscv_lsvc),
        	verbose=(verbose_rscv_lsvc),
        	random_state=(random_state_rscv_lsvc),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_lsvc)

    	except Exception as e:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global glsvc

    	    if len(gbl_pl)==0:
    	        try:
    	        	glsvc=gs_lsvc.fit(X_train, y_train)
    	        	y_pred = glsvc.predict(X_test)
    	        	cr_glsvcs=(classification_report(y_test, y_pred))
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_glsvcs)

            	except Exception as e:
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	glsvc=gs_lsvc.fit(X_train_1, y_train)
    	        	y_pred = glsvc.predict(X_test_1)
    	        	cr_glsvcr=(classification_report(y_test, y_pred))
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_glsvcr)

            	except Exception as e:
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass



    def returtraiscor_rscv_lsvc(self,checkbox,value):
    	global rtrntrscr_rscv_lsvc
    	if value:
    		rtrntrscr_rscv_lsvc=True
    	else:
    		rtrntrscr_rscv_lsvc=False

#gridsearch attributes


    def cv_results_gscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "gridsearchcv" in current_paramopt_lsvc:
        	try:
        		cv_results_gscv_lsvc_out=glsvc.cv_results_
        		print(cv_results_gscv_lsvc_out)
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "gridsearchcv" in current_paramopt_lsvc:
        	try:
        		best_score_gscv_lsvc_out=glsvc.best_score_
        		print(best_score_gscv_lsvc_out)
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "gridsearchcv" in current_paramopt_lsvc:
        	try:
        		best_params_gscv_lsvc_out=glsvc.best_params_
        		print(best_params_gscv_lsvc_out)
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "gridsearchcv" in current_paramopt_lsvc:
        	try:
        		best_index_gscv_lsvc_out=glsvc.best_index_
        		print(best_index_gscv_lsvc_out)
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "gridsearchcv" in current_paramopt_lsvc:
        	try:
        		scorer_gscv_lsvc_out=glsvc.scorer_
        		print(scorer_gscv_lsvc_out)
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "gridsearchcv" in current_paramopt_lsvc:
        	try:
        		n_splits_gscv_lsvc_out=glsvc.n_splits_
        		print(n_splits_gscv_lsvc_out)
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "gridsearchcv" in current_paramopt_lsvc:
        	try:
        		refit_time_gscv_lsvc_out=glsvc.refit_time_
        		print(refit_time_gscv_lsvc_out)
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "gridsearchcv" in current_paramopt_lsvc:
        	try:
        		multimetric_gscv_lsvc_out=glsvc.multimetric_
        		print(multimetric_gscv_lsvc_out)
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "gridsearchcv" in current_paramopt_lsvc:
        	try:
        		feature_names_in_gscv_lsvc_out=glsvc.feature_names_in_
        		print(feature_names_in_gscv_lsvc_out)
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "randomizedsearchcv" in current_paramopt_lsvc:
        	try:
        		cv_results_rscv_lsvc_out=glsvc.cv_results_
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "randomizedsearchcv" in current_paramopt_lsvc:
        	try:
        		best_score_rscv_lsvc_out=glsvc.best_score_
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "randomizedsearchcv" in current_paramopt_lsvc:
        	try:
        		best_params_rscv_lsvc_out=glsvc.best_params_
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "randomizedsearchcv" in current_paramopt_lsvc:
        	try:
        		best_index_rscv_lsvc_out=glsvc.best_index_
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "randomizedsearchcv" in current_paramopt_lsvc:
        	try:
        		scorer_rscv_lsvc_out=glsvc.scorer_
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "randomizedsearchcv" in current_paramopt_lsvc:
        	try:
        		n_splits_rscv_lsvc_out=glsvc.n_splits_
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "randomizedsearchcv" in current_paramopt_lsvc:
        	try:
        		refit_time_rscv_lsvc_out=glsvc.refit_time_
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "randomizedsearchcv" in current_paramopt_lsvc:
        	try:
        		multimetric_rscv_lsvc_out=glsvc.multimetric_
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_lsvc(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glsvc" in globals() and "randomizedsearchcv" in current_paramopt_lsvc:
        	try:
        		feature_names_in_rscv_lsvc_out=glsvc.feature_names_in_
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_lsvc_out)
        	except AttributeError as a:
        		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass



    def model_linearSVC(self):

        try:
        	self.model_linear_svc.ids.out_grid_lsvc.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return



        if len(penaltylsv)==1:
        	pipe_lsvc['clfl'].penalty=(penaltylsv[0])
        	try:

        		del grid_params_lsvc['clfl__penalty']
        	except:
        		pass

        elif len(penaltylsv)==0:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: penalty"
            return

        else:
        	if 'clfl__penalty' in grid_params_lsvc:
        	    pass
        	else:
        		grid_params_lsvc[penlsv]=penaltylsv

        if len(losslsv)==1:
        	pipe_lsvc['clfl'].loss=(losslsv[0])
        	try:
        		del grid_params_lsvc['clfl__loss']
        	except:
        		pass

        elif len(losslsv)==0:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: loss"
            return

        else:
        	if 'clfl__loss' in grid_params_lsvc:
        	    pass
        	else:
        		grid_params_lsvc[lslsv]=losslsv

        if len(mltclslsv)==1:
        	pipe_lsvc['clfl'].multi_class=(mltclslsv[0])
        	try:
        		del grid_params_lsvc['clfl__multi_class']
        	except:
        		pass
        elif len(mltclslsv)==0:
            self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: multi_class"
            return

        else:
        	if 'clfl__multi_class' in grid_params_lsvc:
        	    pass
        	else:
        		grid_params_lsvc[mlclsv]=mltclslsv


        if  len(grid_params_lsvc)==0:

            global lsvcdat
            try:
            	self.model_linear_svc.ids.hypopt_grid_lsvc.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		lsvcdat=pipe_lsvc.fit(X_train, y_train)
            		y_pred = lsvcdat.predict(X_test)
            		crlsvc=(classification_report(y_test, y_pred))
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crlsvc)


            	except Exception as e:
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		lsvcdat=pipe_lsvc.fit(X_train_1, y_train)
            		y_pred = lsvcdat.predict(X_test_1)
            		crlsvc=(classification_report(y_test, y_pred))
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crlsvc)

            	except Exception as e:
            		self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.model_linear_svc.ids.hypopt_grid_lsvc.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_lsvc=Factory.prameter_optimizer_wid_lsvc()
            self.model_linear_svc.ids.hypopt_grid_lsvc.add_widget(self.prameter_optimizer_wid_lsvc)



    def add_grdscv_logreg(self):

        if self.prameter_optimizer_wid_logreg.ids.gridsearchcv_chk_logreg.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_logreg.ids.gridsearchcv_chk_logreg.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_logreg.ids.gridsearchcv_chk_logreg.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_logreg=Factory.gridsearchcv_wid_logreg()
        	self.model_log.ids.hypopt_grid_logreg.add_widget(self.gridsearchcv_wid_logreg)
        	self.gridsearch_asgn_logreg=Factory.gridsearch_asgn_logreg()
        	self.model_log.ids.hypopt_grid_logreg.add_widget(self.gridsearch_asgn_logreg)
        	self.gridsearchcv_wid_logreg.ids.return_train_score_glogreg_chk.active=True
        	self.gridsearchcv_wid_logreg.ids.return_train_score_glogreg_chk.active=False


        else:
        	self.prameter_optimizer_wid_logreg.ids.gridsearchcv_chk_logreg.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_logreg.ids.gridsearchcv_chk_logreg.text_color=get_color_from_hex('ffffff')

        	self.model_log.ids.hypopt_grid_logreg.remove_widget(self.gridsearchcv_wid_logreg)
        	self.model_log.ids.hypopt_grid_logreg.remove_widget(self.gridsearch_asgn_logreg)




    def grdsrchacte_logreg(self):

    	try:
    		current_paramopt_logreg.clear()
    		current_paramopt_logreg.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.model_log.ids.out_grid_logreg.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_logreg=self.gridsearchcv_wid_logreg.ids.scoring_gscv_logreg.text.replace(" ", "")

    	n_jobs_gscv_logreg=self.gridsearchcv_wid_logreg.ids.n_jobs_gscv_logreg.text.replace(" ", "")

    	refit_gscv_logreg=self.gridsearchcv_wid_logreg.ids.refit_gscv_logreg.text.replace(" ", "")

    	cv_gscv_logreg=self.gridsearchcv_wid_logreg.ids.cv_gscv_logreg.text.replace(" ", "")

    	verbose_gscv_logreg=self.gridsearchcv_wid_logreg.ids.verbose_gscv_logreg.text.replace(" ", "")

    	if scoring_gscv_logreg=="None":
    		scoring_gscv_logreg=None
    	elif "," in scoring_gscv_logreg:
    		scoring_gscv_logreg=list(map(str,scoring_gscv_logreg.split(',')))
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_logreg=="None":
    		n_jobs_gscv_logreg=None
    	elif n_jobs_gscv_logreg.isdigit()==True:
    		n_jobs_gscv_logreg=int(n_jobs_gscv_logreg)
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_logreg=="True":
    		refit_gscv_logreg=True
    	elif refit_gscv_logreg=="False":
    		refit_gscv_logreg=False
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_logreg=="None":
    		cv_gscv_logreg=None
    	elif cv_gscv_logreg.isdigit()==True:
    		cv_gscv_logreg=int(cv_gscv_logreg)
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_logreg.isdigit()==True:
    		verbose_gscv_logreg=int(verbose_gscv_logreg)
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_logreg = GridSearchCV(estimator=pipe_logreg,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_logreg),
      	  n_jobs=(n_jobs_gscv_logreg),
       	 refit=(refit_gscv_logreg),
       	 cv=(cv_gscv_logreg),
   	     verbose=(verbose_gscv_logreg),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_logreg
      	  )
    	except Exception as e:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global glogreg

    	    if len(gbl_pl)==0:
    	        try:
    	        	glogreg=gs_logreg.fit(X_train, y_train)
    	        	y_pred = glogreg.predict(X_test)
    	        	cr_glogregs=(classification_report(y_test, y_pred))

            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_glogregs)
            	except Exception as e:
            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	glogreg=gs_logreg.fit(X_train_1, y_train)
    	        	y_pred = glogreg.predict(X_test_1)
    	        	cr_glogregr=(classification_report(y_test, y_pred))

            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_glogregr)
            	except Exception as e:
            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass



    def retutrasco_gscv_logreg(self,checkbox,value):
    	global retutrval_gscv_logreg
    	if value:
    		retutrval_gscv_logreg=True
    	else:
    		retutrval_gscv_logreg=False


    def cv_results_gscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "gridsearchcv" in current_paramopt_logreg:
        	try:
        		cv_results_gscv_logreg_out=glogreg.cv_results_
        		print(cv_results_gscv_logreg_out)
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_gscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "gridsearchcv" in current_paramopt_logreg:
        	try:
        		best_score_gscv_logreg_out=glogreg.best_score_
        		print(best_score_gscv_logreg_out)
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_gscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "gridsearchcv" in current_paramopt_logreg:
        	try:
        		best_params_gscv_logreg_out=glogreg.best_params_
        		print(best_params_gscv_logreg_out)
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass


    def best_index_gscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "gridsearchcv" in current_paramopt_logreg:
        	try:
        		best_index_gscv_logreg_out=glogreg.best_index_
        		print(best_index_gscv_logreg_out)
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_gscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "gridsearchcv" in current_paramopt_logreg:
        	try:
        		scorer_gscv_logreg_out=glogreg.scorer_
        		print(scorer_gscv_logreg_out)
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_gscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "gridsearchcv" in current_paramopt_logreg:
        	try:
        		n_splits_gscv_logreg_out=glogreg.n_splits_
        		print(n_splits_gscv_logreg_out)
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_gscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "gridsearchcv" in current_paramopt_logreg:
        	try:
        		refit_time_gscv_logreg_out=glogreg.refit_time_
        		print(refit_time_gscv_logreg_out)
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_gscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "gridsearchcv" in current_paramopt_logreg:
        	try:
        		multimetric_gscv_logreg_out=glogreg.multimetric_
        		print(multimetric_gscv_logreg_out)
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_gscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "gridsearchcv" in current_paramopt_logreg:
        	try:
        		feature_names_in_gscv_logreg_out=glogreg.feature_names_in_
        		print(feature_names_in_gscv_logreg_out)
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass






    def cv_results_rscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "randomizedsearchcv" in current_paramopt_logreg:
        	try:
        		cv_results_rscv_logreg_out=glogreg.cv_results_
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_score_rscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "randomizedsearchcv" in current_paramopt_logreg:
        	try:
        		best_score_rscv_logreg_out=glogreg.best_score_
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_params_rscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "randomizedsearchcv" in current_paramopt_logreg:
        	try:
        		best_params_rscv_logreg_out=glogreg.best_params_
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def best_index_rscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "randomizedsearchcv" in current_paramopt_logreg:
        	try:
        		best_index_rscv_logreg_out=glogreg.best_index_
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def scorer_rscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "randomizedsearchcv" in current_paramopt_logreg:
        	try:
        		scorer_rscv_logreg_out=glogreg.scorer_
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def n_splits_rscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "randomizedsearchcv" in current_paramopt_logreg:
        	try:
        		n_splits_rscv_logreg_out=glogreg.n_splits_
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def refit_time_rscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "randomizedsearchcv" in current_paramopt_logreg:
        	try:
        		refit_time_rscv_logreg_out=glogreg.refit_time_
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def multimetric_rscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "randomizedsearchcv" in current_paramopt_logreg:
        	try:
        		multimetric_rscv_logreg_out=glogreg.multimetric_
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass

    def feature_names_in_rscv_logreg(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

        if "glogreg" in globals() and "randomizedsearchcv" in current_paramopt_logreg:
        	try:
        		feature_names_in_rscv_logreg_out=glogreg.feature_names_in_
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_logreg_out)
        	except AttributeError as a:
        		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)
        	except Exception as e:
        		pass
        else:
        	pass




    def add_rndmcv_logreg(self):

        if self.prameter_optimizer_wid_logreg.ids.randomizedsearchcv_chk_logreg.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_logreg.ids.randomizedsearchcv_chk_logreg.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_logreg.ids.randomizedsearchcv_chk_logreg.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_logreg=Factory.randomizedsearchcv_wid_logreg()
        	self.model_log.ids.hypopt_grid_logreg.add_widget(self.randomizedsearchcv_wid_logreg)
        	self.randomizedsearch_asgn_logreg=Factory.randomizedsearch_asgn_logreg()
        	self.model_log.ids.hypopt_grid_logreg.add_widget(self.randomizedsearch_asgn_logreg)
        	self.randomizedsearchcv_wid_logreg.ids.return_train_score_rscv_logreg_chk.active=True
        	self.randomizedsearchcv_wid_logreg.ids.return_train_score_rscv_logreg_chk.active=False

        else:
        	self.prameter_optimizer_wid_logreg.ids.randomizedsearchcv_chk_logreg.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_logreg.ids.randomizedsearchcv_chk_logreg.text_color=get_color_from_hex('ffffff')

        	self.model_log.ids.hypopt_grid_logreg.remove_widget(self.randomizedsearchcv_wid_logreg)
        	self.model_log.ids.hypopt_grid_logreg.remove_widget(self.randomizedsearch_asgn_logreg)



    def rndmstvhact_logreg(self):

    	try:
    		current_paramopt_logreg.clear()
    		current_paramopt_logreg.append("randomizedsearchcv")
    	except:
    		pass

    	try:
        	self.model_log.ids.out_grid_logreg.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	n_iter_rscv_logreg=self.randomizedsearchcv_wid_logreg.ids.n_iter_rscv_logreg.text.replace(" ", "")
    	scoring_rscv_logreg=self.randomizedsearchcv_wid_logreg.ids.scoring_rscv_logreg.text.replace(" ", "")
    	n_jobs_rscv_logreg=self.randomizedsearchcv_wid_logreg.ids.n_jobs_rscv_logreg.text.replace(" ", "")
    	refit_rscv_logreg=self.randomizedsearchcv_wid_logreg.ids.refit_rscv_logreg.text.replace(" ", "")
    	cv_rscv_logreg=self.randomizedsearchcv_wid_logreg.ids.cv_rscv_logreg.text.replace(" ", "")
    	verbose_rscv_logreg=self.randomizedsearchcv_wid_logreg.ids.verbose_rscv_logreg.text.replace(" ", "")
    	random_state_rscv_logreg=self.randomizedsearchcv_wid_logreg.ids.random_state_rscv_logreg.text.replace(" ", "")

    	if n_iter_rscv_logreg=="None":
    		n_iter_rscv_logreg=None
    	elif n_iter_rscv_logreg.isdigit()==True:
    		n_iter_rscv_logreg=int(n_iter_rscv_logreg)
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"
            return

    	if scoring_rscv_logreg=="None":
    		scoring_rscv_logreg=None
    	elif "," in scoring_rscv_logreg:
    		scoring_rscv_logreg=list(map(str,scoring_rscv_logreg.split(',')))
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_rscv_logreg=="None":
    		n_jobs_rscv_logreg=None
    	elif n_jobs_rscv_logreg.isdigit()==True:
    		n_jobs_rscv_logreg=int(n_jobs_rscv_logreg)
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return

    	if refit_rscv_logreg=="True":
    		refit_rscv_logreg=True
    	elif refit_rscv_logreg=="False":
    		refit_rscv_logreg=False
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_rscv_logreg=="None":
    		cv_rscv_logreg=None
    	elif cv_rscv_logreg.isdigit()==True:
    		cv_rscv_logreg=int(cv_rscv_logreg)
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_rscv_logreg.isdigit()==True:
    		verbose_rscv_logreg=int(verbose_rscv_logreg)
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return


    	if random_state_rscv_logreg=="None":
    		random_state_rscv_logreg=None
    	elif random_state_rscv_logreg.isdigit()==True:
    		random_state_rscv_logreg=int(random_state_rscv_logreg)
    	else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"
            return


    	try:
     	   gs_logreg =RandomizedSearchCV(
        	estimator=pipe_logreg,
            param_distributions=(gridparams),
  	      n_iter=(n_iter_rscv_logreg),
       	 scoring=(scoring_rscv_logreg),
       	 n_jobs=(n_jobs_rscv_logreg),
       	 refit=(refit_rscv_logreg),
       	 cv=(cv_rscv_logreg),
        	verbose=(verbose_rscv_logreg),
        	random_state=(random_state_rscv_logreg),
        	#error_score=nan,
       	 return_train_score=rtrntrscr_rscv_logreg)

    	except Exception as e:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global glogreg

    	    if len(gbl_pl)==0:
    	        try:
    	        	glogreg=gs_logreg.fit(X_train, y_train)
    	        	y_pred = glogreg.predict(X_test)
    	        	cr_glogregs=(classification_report(y_test, y_pred))
            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_glogregs)

            	except Exception as e:
            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	glogreg=gs_logreg.fit(X_train_1, y_train)
    	        	y_pred = glogreg.predict(X_test_1)
    	        	cr_glogregr=(classification_report(y_test, y_pred))
            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_glogregr)

            	except Exception as e:
            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

    	except Exception as e:
            pass



    def returtraiscor_rscv_logreg(self,checkbox,value):
    	global rtrntrscr_rscv_logreg
    	if value:
    		rtrntrscr_rscv_logreg=True
    	else:
    		rtrntrscr_rscv_logreg=False




    def model_log_reg(self):

        try:
        	self.model_log.ids.out_grid_logreg.clear_widgets()
        except:
        	pass
###

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()

#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


        if len(penaltylreg)==1:
        	pipe_logreg['clflog'].penalty=(penaltylreg[0])
        	try:
        		del grid_params_logreg['clflog__penalty']
        	except:
        		pass

        elif len(penaltylreg)==0:

            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: penalty"
            return

        else:
        	if 'clflog__penalty' in grid_params_logreg:
        	    pass
        	else:        	    grid_params_logreg[penlogr]=penaltylreg

        if len(solverlreg)==1:
        	pipe_logreg['clflog'].solver=(solverlreg[0])
        	try:
        		del grid_params_logreg['clflog__solver']
        	except:
        		pass
        elif len(solverlreg)==0:

            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: solver"
            return
        else:
        	if 'clflog__solver' in grid_params_logreg:
        	    pass
        	else:        	    grid_params_logreg[slvrlogr]=solverlreg

        if len(multilreg)==1:
        	pipe_logreg['clflog'].multi_class=(multilreg[0])
        	try:
        		del grid_params_logreg['clflog__multi_class']
        	except:
        		pass
        elif len(multilreg)==0:

            self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: multi_class"
            return
        else:
        	if 'clflog__multi_class' in grid_params_logreg:
        	    pass
        	else:        	    grid_params_logreg[mltclogr]=multilreg


        if  len(grid_params_logreg)==0:

            global logregdat
            try:
            	self.model_log.ids.hypopt_grid_logreg.clear_widgets()
            except:
            	pass

            if len(gbl_pl)==0:
            	try:
            		logregdat=pipe_logreg.fit(X_train, y_train)
            		y_pred = logregdat.predict(X_test)
            		crlogreg=(classification_report(y_test, y_pred))
            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crlogreg)

            	except Exception as e:
            		print(e)

            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
           	 	X_test_1=Pipeline((gbl_pl)).transform(X_test)
          	  	logregdat=pipe_logreg.fit(X_train_1, y_train)
            		y_pred = logregdat.predict(X_test_1)
            		crlogreg=(classification_report(y_test, y_pred))
            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crlogreg)

            	except Exception as e:
            		print(e)

            		self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)

        else:
            try:
            	self.model_log.ids.hypopt_grid_logreg.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_logreg=Factory.prameter_optimizer_wid_logreg()
            self.model_log.ids.hypopt_grid_logreg.add_widget(self.prameter_optimizer_wid_logreg)




    def add_grdscv_dtre(self):

        if self.prameter_optimizer_wid_dtre.ids.gridsearchcv_chk_dtre.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_dtre.ids.gridsearchcv_chk_dtre.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_dtre.ids.gridsearchcv_chk_dtre.text_color=get_color_from_hex('000000')

        	self.gridsearchcv_wid_dtre=Factory.gridsearchcv_wid_dtre()
        	self.model_dt.ids.hypopt_grid_dtre.add_widget(self.gridsearchcv_wid_dtre)
        	self.gridsearch_asgn_dtre=Factory.gridsearch_asgn_dtre()
        	self.model_dt.ids.hypopt_grid_dtre.add_widget(self.gridsearch_asgn_dtre)
        	self.gridsearchcv_wid_dtre.ids.return_train_score_gdtre_chk.active=True
        	self.gridsearchcv_wid_dtre.ids.return_train_score_gdtre_chk.active=False


        else:
        	self.prameter_optimizer_wid_dtre.ids.gridsearchcv_chk_dtre.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_dtre.ids.gridsearchcv_chk_dtre.text_color=get_color_from_hex('ffffff')

        	self.model_dt.ids.hypopt_grid_dtre.remove_widget(self.gridsearchcv_wid_dtre)
        	self.model_dt.ids.hypopt_grid_dtre.remove_widget(self.gridsearch_asgn_dtre)




    def grdsrchacte_dtre(self):

    	try:
    		current_paramopt_dtre.clear()
    		current_paramopt_dtre.append("gridsearchcv")
    	except:
    		pass

    	try:
        	self.model_dt.ids.out_grid_dtre.clear_widgets()
    	except:
        	pass
###

    	self.output_crd = Factory.output_crd()
    	self.output_crd_err = Factory.output_crd_err()

#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values

            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"
            return


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"
            return


    	scoring_gscv_dtre=self.gridsearchcv_wid_dtre.ids.scoring_gscv_dtre.text.replace(" ", "")

    	n_jobs_gscv_dtre=self.gridsearchcv_wid_dtre.ids.n_jobs_gscv_dtre.text.replace(" ", "")

    	refit_gscv_dtre=self.gridsearchcv_wid_dtre.ids.refit_gscv_dtre.text.replace(" ", "")

    	cv_gscv_dtre=self.gridsearchcv_wid_dtre.ids.cv_gscv_dtre.text.replace(" ", "")

    	verbose_gscv_dtre=self.gridsearchcv_wid_dtre.ids.verbose_gscv_dtre.text.replace(" ", "")

    	if scoring_gscv_dtre=="None":
    		scoring_gscv_dtre=None
    	elif "," in scoring_gscv_dtre:
    		scoring_gscv_dtre=list(map(str,scoring_gscv_dtre.split(',')))
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"
            return

    	if n_jobs_gscv_dtre=="None":
    		n_jobs_gscv_dtre=None
    	elif n_jobs_gscv_dtre.isdigit()==True:
    		n_jobs_gscv_dtre=int(n_jobs_gscv_dtre)
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"
            return


    	if refit_gscv_dtre=="True":
    		refit_gscv_dtre=True
    	elif refit_gscv_dtre=="False":
    		refit_gscv_dtre=False
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"
            return


    	if cv_gscv_dtre=="None":
    		cv_gscv_dtre=None
    	elif cv_gscv_dtre.isdigit()==True:
    		cv_gscv_dtre=int(cv_gscv_dtre)
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"
            return

    	if verbose_gscv_dtre.isdigit()==True:
    		verbose_gscv_dtre=int(verbose_gscv_dtre)
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"
            return

    	try:
    		gs_dtre = GridSearchCV(estimator=pipe_dtrc,
 	       param_grid=(gridparams),
       	 scoring=(scoring_gscv_dtre),
      	  n_jobs=(n_jobs_gscv_dtre),
       	 refit=(refit_gscv_dtre),
       	 cv=(cv_gscv_dtre),
   	     verbose=(verbose_gscv_dtre),
        	#error_score=nan,
     	   return_train_score=retutrval_gscv_dtre
      	  )
    	except Exception as e:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)
            return

    	try:
    	    global gdtre

    	    if len(gbl_pl)==0:
    	        try:
    	        	gdtre=gs_dtre.fit(X_train, y_train)
    	        	y_pred = gdtre.predict(X_test)
    	        	cr_gdtres=(classification_report(y_test, y_pred))

            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gdtres)
            	except Exception as e:
            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gdtre=gs_dtre.fit(X_train_1, y_train)
    	        	y_pred = gdtre.predict(X_test_1)
    	        	cr_gdtrer=(classification_report(y_test, y_pred))

            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gdtrer)
            	except Exception as e:
            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)


    	except Exception as e:
            pass


    def retutrasco_gscv_dtre(self,checkbox,value):
    	global retutrval_gscv_dtre
    	if value:
    		retutrval_gscv_dtre=True
    	else:
    		retutrval_gscv_dtre=False



    def add_rndmcv_dtre(self):

        if self.prameter_optimizer_wid_dtre.ids.randomizedsearchcv_chk_dtre.md_bg_color==get_color_from_hex('323043'):
        	self.prameter_optimizer_wid_dtre.ids.randomizedsearchcv_chk_dtre.md_bg_color=get_color_from_hex('ffffff')
        	self.prameter_optimizer_wid_dtre.ids.randomizedsearchcv_chk_dtre.text_color=get_color_from_hex('000000')

        	self.randomizedsearchcv_wid_dtre=Factory.randomizedsearchcv_wid_dtre()
        	self.model_dt.ids.hypopt_grid_dtre.add_widget(self.randomizedsearchcv_wid_dtre)
        	self.randomizedsearch_asgn_dtre=Factory.randomizedsearch_asgn_dtre()
        	self.model_dt.ids.hypopt_grid_dtre.add_widget(self.randomizedsearch_asgn_dtre)
        	self.randomizedsearchcv_wid_dtre.ids.return_train_score_rscv_dtre_chk.active=True
        	self.randomizedsearchcv_wid_dtre.ids.return_train_score_rscv_dtre_chk.active=False

        else:
        	self.prameter_optimizer_wid_dtre.ids.randomizedsearchcv_chk_dtre.md_bg_color=get_color_from_hex('323043')
        	self.prameter_optimizer_wid_dtre.ids.randomizedsearchcv_chk_dtre.text_color=get_color_from_hex('ffffff')

        	self.model_dt.ids.hypopt_grid_dtre.remove_widget(self.randomizedsearchcv_wid_dtre)
        	self.model_dt.ids.hypopt_grid_dtre.remove_widget(self.randomizedsearch_asgn_dtre)
                     	    	    
     	    	    
     	    	    
    def rndmstvhact_dtre(self):

    	try:
    		current_paramopt_dtre.clear()
    		current_paramopt_dtre.append("randomizedsearchcv")
    	except:
    		pass     	
    
    	try:
        	self.model_dt.ids.out_grid_dtre.clear_widgets()
    	except:
        	pass
###        	        
        
    	self.output_crd = Factory.output_crd()        
    	self.output_crd_err = Factory.output_crd_err()
        
#####

    	try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values
        
            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
    	except Exception as e:
            print(e)
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"      
            return            	   


    	if len(preprocessing_fit_status)==0:
            pass
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"      
            return                            
            
    
    	n_iter_rscv_dtre=self.randomizedsearchcv_wid_dtre.ids.n_iter_rscv_dtre.text.replace(" ", "") 
    	scoring_rscv_dtre=self.randomizedsearchcv_wid_dtre.ids.scoring_rscv_dtre.text.replace(" ", "") 
    	n_jobs_rscv_dtre=self.randomizedsearchcv_wid_dtre.ids.n_jobs_rscv_dtre.text.replace(" ", "") 
    	refit_rscv_dtre=self.randomizedsearchcv_wid_dtre.ids.refit_rscv_dtre.text.replace(" ", "") 
    	cv_rscv_dtre=self.randomizedsearchcv_wid_dtre.ids.cv_rscv_dtre.text.replace(" ", "") 
    	verbose_rscv_dtre=self.randomizedsearchcv_wid_dtre.ids.verbose_rscv_dtre.text.replace(" ", "") 
    	random_state_rscv_dtre=self.randomizedsearchcv_wid_dtre.ids.random_state_rscv_dtre.text.replace(" ", "") 
    	
    	if n_iter_rscv_dtre=="None":
    		n_iter_rscv_dtre=None
    	elif n_iter_rscv_dtre.isdigit()==True:
    		n_iter_rscv_dtre=int(n_iter_rscv_dtre)
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_iter: unexpected input"   
            return    
    		    	
    	if scoring_rscv_dtre=="None":
    		scoring_rscv_dtre=None
    	elif "," in scoring_rscv_dtre:
    		scoring_rscv_dtre=list(map(str,scoring_rscv_dtre.split(',')))
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="scoring: unexpected input"   
            return    
            
    	if n_jobs_rscv_dtre=="None":
    		n_jobs_rscv_dtre=None
    	elif n_jobs_rscv_dtre.isdigit()==True:
    		n_jobs_rscv_dtre=int(n_jobs_rscv_dtre)
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="n_jobs: unexpected input"   
            return    
            
    	if refit_rscv_dtre=="True":
    		refit_rscv_dtre=True
    	elif refit_rscv_dtre=="False":
    		refit_rscv_dtre=False
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="refit: unexpected input"   
            return    
            
    	
    	if cv_rscv_dtre=="None":
    		cv_rscv_dtre=None
    	elif cv_rscv_dtre.isdigit()==True:
    		cv_rscv_dtre=int(cv_rscv_dtre)
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="cv: unexpected input"   
            return    
            
    	if verbose_rscv_dtre.isdigit()==True:
    		verbose_rscv_dtre=int(verbose_rscv_dtre)
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="verbose: unexpected input"   
            return    
  
   		    	
    	if random_state_rscv_dtre=="None":
    		random_state_rscv_dtre=None
    	elif random_state_rscv_dtre.isdigit()==True:
    		random_state_rscv_dtre=int(random_state_rscv_dtre)
    	else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="random_state: unexpected input"   
            return    
            

    	try:
     	   gs_dtre =RandomizedSearchCV(
        	estimator=pipe_dtrc,
            param_distributions=(gridparams),  
  	      n_iter=(n_iter_rscv_dtre), 
       	 scoring=(scoring_rscv_dtre), 
       	 n_jobs=(n_jobs_rscv_dtre), 
       	 refit=(refit_rscv_dtre), 
       	 cv=(cv_rscv_dtre), 
        	verbose=(verbose_rscv_dtre),
        	random_state=(random_state_rscv_dtre), 
        	#error_score=nan, 
       	 return_train_score=rtrntrscr_rscv_dtre)
       	 
    	except Exception as e:        
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text=str(e)          
            return   
                
    	try:        
    	    global gdtre
    	    
    	    if len(gbl_pl)==0:
    	        try:
    	        	gdtre=gs_dtre.fit(X_train, y_train)
    	        	y_pred = gdtre.predict(X_test)
    	        	cr_gdtres=(classification_report(y_test, y_pred))
            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gdtres)            
            		
            	except Exception as e:
            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)               
            		             	
    	    else:
    	        try:
    	        	X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
    	        	X_test_1=Pipeline((gbl_pl)).transform(X_test)
    	        	gdtre=gs_dtre.fit(X_train_1, y_train)
    	        	y_pred = gdtre.predict(X_test_1)
    	        	cr_gdtrer=(classification_report(y_test, y_pred))
            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(cr_gdtrer)      
            		
            	except Exception as e:
            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)                 	            	
            	
    	except Exception as e:
            pass

        	
    def returtraiscor_rscv_dtre(self,checkbox,value): 	
    	global rtrntrscr_rscv_dtre
    	if value:
    		rtrntrscr_rscv_dtre=True
    	else:
    		rtrntrscr_rscv_dtre=False
    		
    		
    def cv_results_gscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "gridsearchcv" in current_paramopt_dtre:
        	try:
        		cv_results_gscv_dtre_out=gdtre.cv_results_
        		print(cv_results_gscv_dtre_out)
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_gscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
    		
    def best_score_gscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "gridsearchcv" in current_paramopt_dtre:
        	try:
        		best_score_gscv_dtre_out=gdtre.best_score_
        		print(best_score_gscv_dtre_out)
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_gscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
   		
    def best_params_gscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "gridsearchcv" in current_paramopt_dtre:
        	try:
        		best_params_gscv_dtre_out=gdtre.best_params_
        		print(best_params_gscv_dtre_out)
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_gscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
   
    		
    def best_index_gscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "gridsearchcv" in current_paramopt_dtre:
        	try:
        		best_index_gscv_dtre_out=gdtre.best_index_
        		print(best_index_gscv_dtre_out)
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_gscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
      
    def scorer_gscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "gridsearchcv" in current_paramopt_dtre:
        	try:
        		scorer_gscv_dtre_out=gdtre.scorer_
        		print(scorer_gscv_dtre_out)
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_gscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
   
    def n_splits_gscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "gridsearchcv" in current_paramopt_dtre:
        	try:
        		n_splits_gscv_dtre_out=gdtre.n_splits_
        		print(n_splits_gscv_dtre_out)
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_gscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
   
    def refit_time_gscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "gridsearchcv" in current_paramopt_dtre:
        	try:
        		refit_time_gscv_dtre_out=gdtre.refit_time_
        		print(refit_time_gscv_dtre_out)
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_gscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
       		
    def multimetric_gscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "gridsearchcv" in current_paramopt_dtre:
        	try:
        		multimetric_gscv_dtre_out=gdtre.multimetric_
        		print(multimetric_gscv_dtre_out)
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_gscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
      
    def feature_names_in_gscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "gridsearchcv" in current_paramopt_dtre:
        	try:
        		feature_names_in_gscv_dtre_out=gdtre.feature_names_in_
        		print(feature_names_in_gscv_dtre_out)
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_gscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
   	    		
   	    		
   	    		
   	    		
   	    		
   	    		
    def cv_results_rscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "randomizedsearchcv" in current_paramopt_dtre:
        	try:
        		cv_results_rscv_dtre_out=gdtre.cv_results_
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]cv_results_"
        		self.output_crd.ids.output_text.text=str(cv_results_rscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
         		 		 		
    def best_score_rscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "randomizedsearchcv" in current_paramopt_dtre:
        	try:
        		best_score_rscv_dtre_out=gdtre.best_score_
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_score_"
        		self.output_crd.ids.output_text.text=str(best_score_rscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
         		 		 		
    def best_params_rscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "randomizedsearchcv" in current_paramopt_dtre:
        	try:
        		best_params_rscv_dtre_out=gdtre.best_params_
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_params_"
        		self.output_crd.ids.output_text.text=str(best_params_rscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
        	
    def best_index_rscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "randomizedsearchcv" in current_paramopt_dtre:
        	try:
        		best_index_rscv_dtre_out=gdtre.best_index_
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]best_index_"
        		self.output_crd.ids.output_text.text=str(best_index_rscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
         		 		 		         		 		 		
    def scorer_rscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "randomizedsearchcv" in current_paramopt_dtre:
        	try:
        		scorer_rscv_dtre_out=gdtre.scorer_
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]scorer_"
        		self.output_crd.ids.output_text.text=str(scorer_rscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
         	
    def n_splits_rscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "randomizedsearchcv" in current_paramopt_dtre:
        	try:
        		n_splits_rscv_dtre_out=gdtre.n_splits_
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]n_splits_"
        		self.output_crd.ids.output_text.text=str(n_splits_rscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass         	
         	         		 
    def refit_time_rscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "randomizedsearchcv" in current_paramopt_dtre:
        	try:
        		refit_time_rscv_dtre_out=gdtre.refit_time_
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]refit_time_"
        		self.output_crd.ids.output_text.text=str(refit_time_rscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
         		 
    def multimetric_rscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "randomizedsearchcv" in current_paramopt_dtre:
        	try:
        		multimetric_rscv_dtre_out=gdtre.multimetric_
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]multimetric_"
        		self.output_crd.ids.output_text.text=str(multimetric_rscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
         		 		 		         		 		 		
    def feature_names_in_rscv_dtre(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()    	
    	
        if "gdtre" in globals() and "randomizedsearchcv" in current_paramopt_dtre:
        	try:
        		feature_names_in_rscv_dtre_out=gdtre.feature_names_in_
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
        		self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
        		self.output_crd.ids.output_text.text=str(feature_names_in_rscv_dtre_out)                             
        	except AttributeError as a:
        		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
        		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
        		self.output_crd_err.ids.output_text_err.text=str(a)	    
        	except Exception as e:
        		pass          
        else:
        	pass
         		    	    		
   	    		
   	    		
    def model_dtc(self): 
    
        try:
        	self.model_dt.ids.out_grid_dtre.clear_widgets()
        except:
        	pass
###        	        
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
#####

        try:
            X = DATA.drop([tgt], axis = 'columns')
            y = DATA[tgt].values
        
            X_train, X_test, y_train, y_test=train_test_split(X,y, test_size=(tst),random_state =(rndm),shuffle=shuffle_dta)
        except Exception as e:
            print(e)
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Data Error"      
            return            	   


        if len(preprocessing_fit_status)==0:
            pass
        else:
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="Preprocessing step Error"      
            return                            
            
    
        if len(cridt_l)==1:
        	pipe_dtrc['clfdt'].criterion=(cridt_l[0])
        	try:
        		del grid_params_dtre['clfdt__criterion']
        	except:
        		pass
        elif len(cridt_l)==0:
            		            		
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: criterion"
            return   
             
        else:
        	if 'clfdt__criterion' in grid_params_dtre:
        	    pass
        	else:        	    grid_params_dtre[clfcrdt]=cridt_l    
        	
        if len(splitter_dt_l)==1:
        	pipe_dtrc['clfdt'].splitter=(splitter_dt_l[0])
        	try:
        		del grid_params_dtre['clfdt__splitter']
        	except:
        		pass
        elif len(splitter_dt_l)==0:
            		            		
            self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            self.output_crd_err.ids.output_text_err.text="undefined: splitter"
            return           		
        else:
        	if 'clfdt__splitter' in grid_params_dtre:
        	    pass
        	else:        	    grid_params_dtre[clf_spltr_dt]=splitter_dt_l
        	
        global y_test_dt
        global y_pred_dt
        y_test_dt=y_test
        print("pipeline")
        print(grid_params_dtre)
        		        		
        
        if  len(grid_params_dtre)==0:
            
            global dtredat
            try:
            	self.model_dt.ids.hypopt_grid_dtre.clear_widgets()
            except:
            	pass
            	
            if len(gbl_pl)==0:
            	try:
            		dtredat=pipe_dtrc.fit(X_train, y_train)
            		y_pred_dt = dtredat.predict(X_test)
            		crdtre=(classification_report(y_test_dt, y_pred_dt))

            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crdtre)            
            		
            	except Exception as e:
            		print(e)
            		            		
            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)          
            		      	  
            else:
            	try:
            		X_train_1=Pipeline((gbl_pl)).fit_transform(X_train)
            		X_test_1=Pipeline((gbl_pl)).transform(X_test)
            		dtredat=pipe_dtrc.fit(X_train_1, y_train)
            		y_pred_dt = dtredat.predict(X_test_1)
            		crdtre=(classification_report(y_test_dt, y_pred_dt))
            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
            		self.output_crd.ids.output_text_heading.text="[b]classification_report"
            		self.output_crd.ids.output_text.text=str(crdtre)            
            		
            	except Exception as e:
            		print(e)
            		            		
            		self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            		self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            		self.output_crd_err.ids.output_text_err.text=str(e)          
            		      	  
        else:
            try:
            	self.model_dt.ids.hypopt_grid_dtre.clear_widgets()
            except:
            	pass
            self.prameter_optimizer_wid_dtre=Factory.prameter_optimizer_wid_dtre()
            self.model_dt.ids.hypopt_grid_dtre.add_widget(self.prameter_optimizer_wid_dtre)
                        
    def hamming_loss_dt_cls(self):
    	if "y_test_dt" in globals() and  "y_pred_dt" in globals():
    		try:
    			hmgls_dtre=hamming_loss(y_test_dt, y_pred_dt, sample_weight=None)
    			print(hmgls_dtre)
    		except Exception as e:
    			print(e)
    	
    def ConfusionMatrixDisplay_dt_cls(self):
    	if "y_test_dt" in globals() and  "y_pred_dt" in globals():
    		try:
    			plt.figure()
    			cmtrx_dtre=ConfusionMatrixDisplay.from_predictions(
    			y_test_dt, 
    			y_pred_dt,
    			labels=None, 
    			sample_weight=None, 
    			normalize=None, 
    			display_labels=None, 
    			include_values=True, 
    			xticks_rotation='horizontal', 
    			values_format=None, 
    			cmap='viridis', 
    			ax=None, 
    			colorbar=True)
    			cmtrx_dtre.xaxis.label.set_color('white')
    			cmtrx_dtre.yaxis.label.set_color('white')
    			cmtrx_dtre.tick_params(colors="white", which='both')
    			fg_color = 'white'
    			bg_color = 'black'       		
        
    			#cb=plt.colorbar(cmtrx_dtre)
    			#cb.set_label('colorbar label', color=fg_color)
    			#cb.ax.yaxis.set_tick_params(color=fg_color)
        		
    			plt.savefig("C:/Arc-Plots/confusion_matrix_decisiontree",transparent=True)    			

	
    		except Exception as e:
    			print(e)
    	    	
# SVC attributes      
                          
    def class_weight_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].class_weight_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_weight_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].class_weight_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_weight_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass 
            	
    def classes_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].classes_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].classes_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
                            	                    
    def coef_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].coef_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].coef_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
                      
    def dual_coef_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].dual_coef_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]dual_coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].dual_coef_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]dual_coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	

    def fit_status_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].fit_status_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]fit_status_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].fit_status_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]fit_status_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
    def intercept_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].intercept_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].intercept_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass
            	
  
    def n_features_in_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].n_features_in_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].n_features_in_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
            	
  
    def feature_names_in_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].feature_names_in_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].feature_names_in_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
            	
  
    def support_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].support_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].support_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
            	
  
    def support_vectors_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].support_vectors_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_vectors_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].support_vectors_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_vectors_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
            	
  
    def n_support_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].n_support_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_support_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].n_support_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_support_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
            	
  
    def probA_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].probA_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]probA_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].probA_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]probA_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
            	
  
    def probB_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].probB_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]probB_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].probB_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]probB_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
            	
  
    def shape_fit_svmc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "svcdt" in globals() or "gsvm" in globals():
        	pass
        else:
        	return
        	
        if  len(grid_params_svm)==0:
            try:
                val=(svcdt.named_steps['clf'].shape_fit_)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]shape_fit_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsvm.best_estimator_.named_steps['clf'].shape_fit_)    
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]shape_fit_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
            	
  
                                            
#Linear SVC  Attributes          
    
            	
  
    def coef_lnrsv(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "lsvcdat" in globals() or "glsvc" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_lsvc)==0:
            try:
                val=(lsvcdat.named_steps['clfl'].coef_)
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glsvc.best_estimator_.named_steps['clfl'].coef_)    
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  	
    
  
    def intercept_lnrsv(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "lsvcdat" in globals() or "glsvc" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_lsvc)==0:
            try:
                val=(lsvcdat.named_steps['clfl'].intercept_)
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glsvc.best_estimator_.named_steps['clfl'].intercept_)    
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	
  
    def classes_lnrsv(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "lsvcdat" in globals() or "glsvc" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_lsvc)==0:
            try:
                val=(lsvcdat.named_steps['clfl'].classes_)
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glsvc.best_estimator_.named_steps['clfl'].classes_)    
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	
  
    def n_features_in_lnrsv(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "lsvcdat" in globals() or "glsvc" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_lsvc)==0:
            try:
                val=(lsvcdat.named_steps['clfl'].n_features_in_)
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glsvc.best_estimator_.named_steps['clfl'].n_features_in_)    
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	
  
    def feature_names_in_lnrsv(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "lsvcdat" in globals() or "glsvc" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_lsvc)==0:
            try:
                val=(lsvcdat.named_steps['clfl'].feature_names_in_)
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glsvc.best_estimator_.named_steps['clfl'].feature_names_in_)    
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                              	            	            	            	            	            	            	

#log reg Attributes


  
    def classes_logrc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "logregdat" in globals() or "glogreg" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_logreg)==0:
            try:
                val=(logregdat.named_steps['clflog'].classes_)
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glogreg.best_estimator_.named_steps['clflog'].classes_)    
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	            	
            	
  
    def coef_logrc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "logregdat" in globals() or "glogreg" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_logreg)==0:
            try:
                val=(logregdat.named_steps['clflog'].coef_)
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glogreg.best_estimator_.named_steps['clflog'].coef_)    
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	            	
            	
  
    def intercept_logrc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "logregdat" in globals() or "glogreg" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_logreg)==0:
            try:
                val=(logregdat.named_steps['clflog'].intercept_)
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glogreg.best_estimator_.named_steps['clflog'].intercept_)    
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	            	
            	
  
    def n_features_in_logrc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "logregdat" in globals() or "glogreg" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_logreg)==0:
            try:
                val=(logregdat.named_steps['clflog'].n_features_in_)
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glogreg.best_estimator_.named_steps['clflog'].n_features_in_)    
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	            	
  
    def feature_names_in_logrc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "logregdat" in globals() or "glogreg" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_logreg)==0:
            try:
                val=(logregdat.named_steps['clflog'].feature_names_in_)
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glogreg.best_estimator_.named_steps['clflog'].feature_names_in_)    
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	            	
            	

  
    def n_iter_logrc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "logregdat" in globals() or "glogreg" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_logreg)==0:
            try:
                val=(logregdat.named_steps['clflog'].n_iter_)
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_iter_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(glogreg.best_estimator_.named_steps['clflog'].n_iter_)    
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_iter_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	            

#Knn attributes 
 
  
    def classes_knc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "knndat" in globals() or "gknn" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_knn)==0:
            try:
                val=(knndat.named_steps['clfknn'].classes_)
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsknn.best_estimator_.named_steps['clfknn'].classes_)    
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
                 	

  
    def effective_metric_knc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "knndat" in globals() or "gknn" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_knn)==0:
            try:
                val=(knndat.named_steps['clfknn'].effective_metric_)
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]effective_metric_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsknn.best_estimator_.named_steps['clfknn'].effective_metric_)    
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]effective_metric_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def effective_metric_params_knc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "knndat" in globals() or "gknn" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_knn)==0:
            try:
                val=(knndat.named_steps['clfknn'].effective_metric_params_)
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]effective_metric_params_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsknn.best_estimator_.named_steps['clfknn'].effective_metric_params_)    
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]effective_metric_params_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_features_in_knc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "knndat" in globals() or "gknn" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_knn)==0:
            try:
                val=(knndat.named_steps['clfknn'].n_features_in_)
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsknn.best_estimator_.named_steps['clfknn'].n_features_in_)    
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_names_in_knc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "knndat" in globals() or "gknn" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_knn)==0:
            try:
                val=(knndat.named_steps['clfknn'].feature_names_in_)
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsknn.best_estimator_.named_steps['clfknn'].feature_names_in_)    
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_samples_fit_knc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "knndat" in globals() or "gknn" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_knn)==0:
            try:
                val=(knndat.named_steps['clfknn'].n_samples_fit_)
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_samples_fit_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsknn.best_estimator_.named_steps['clfknn'].n_samples_fit_)    
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_samples_fit_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def outputs_2d_knc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "knndat" in globals() or "gknn" in globals():
        	pass
        else:
        	return
        	                   	        
        if  len(grid_params_knn)==0:
            try:
                val=(knndat.named_steps['clfknn'].outputs_2d_)
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]outputs_2d_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsknn.best_estimator_.named_steps['clfknn'].outputs_2d_)    
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]outputs_2d_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
     

#SGDClassifier Attributes

  
    def coef_sgd(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "sgdcdat" in globals() or "gsgdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_sgdc)==0:
            try:
                val=(sgdcdat.named_steps['clfsgd'].coef_)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsgdc.best_estimator_.named_steps['clfsgd'].coef_)    
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  

            	            	
  
    def intercept_sgd(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "sgdcdat" in globals() or "gsgdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_sgdc)==0:
            try:
                val=(sgdcdat.named_steps['clfsgd'].intercept_)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsgdc.best_estimator_.named_steps['clfsgd'].intercept_)    
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_iter_sgd(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "sgdcdat" in globals() or "gsgdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_sgdc)==0:
            try:
                val=(sgdcdat.named_steps['clfsgd'].n_iter_)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_iter_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsgdc.best_estimator_.named_steps['clfsgd'].n_iter_)    
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_iter_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def loss_function_sgd(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "sgdcdat" in globals() or "gsgdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_sgdc)==0:
            try:
                val=(sgdcdat.named_steps['clfsgd'].loss_function_)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]loss_function_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsgdc.best_estimator_.named_steps['clfsgd'].loss_function_)    
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]loss_function_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def classes_sgd(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "sgdcdat" in globals() or "gsgdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_sgdc)==0:
            try:
                val=(sgdcdat.named_steps['clfsgd'].classes_)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsgdc.best_estimator_.named_steps['clfsgd'].classes_)    
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def t_sgd(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "sgdcdat" in globals() or "gsgdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_sgdc)==0:
            try:
                val=(sgdcdat.named_steps['clfsgd'].t_)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]t_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsgdc.best_estimator_.named_steps['clfsgd'].t_)    
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]t_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_features_in_sgd(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "sgdcdat" in globals() or "gsgdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_sgdc)==0:
            try:
                val=(sgdcdat.named_steps['clfsgd'].n_features_in_)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsgdc.best_estimator_.named_steps['clfsgd'].n_features_in_)    
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_names_in_sgd(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "sgdcdat" in globals() or "gsgdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_sgdc)==0:
            try:
                val=(sgdcdat.named_steps['clfsgd'].feature_names_in_)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gsgdc.best_estimator_.named_steps['clfsgd'].feature_names_in_)    
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  

#GradientBoosting Attributes 

  
    def n_estimators_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].n_estimators_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_estimators_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].n_estimators_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_estimators_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
      	   
  
    def feature_importances_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].feature_importances_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_importances_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].feature_importances_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_importances_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def oob_improvement_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].oob_improvement_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]oob_improvement_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].oob_improvement_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]oob_improvement_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def train_score_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].train_score_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]train_score_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].train_score_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]train_score_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def loss_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].loss_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]loss_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].loss_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]loss_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def init_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].init_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]init_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].init_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]init_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def estimators_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].estimators_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]estimators_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].estimators_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]estimators_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def classes_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].classes_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].classes_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_features_in_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].n_features_in_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].n_features_in_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_names_in_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].feature_names_in_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].feature_names_in_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_classes_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].n_classes_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].n_classes_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass   
            	
  
    def max_features_grdcat(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "grdcdat" in globals() or "ggrdc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_grdc)==0:
            try:
                val=(grdcdat.named_steps['clfgrdc'].max_features_)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]max_features_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(ggrdc.best_estimator_.named_steps['clfgrdc'].max_features_)    
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]max_features_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	            	                                                              
	
#MultinomialNB

  
    def class_count_mnbca(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "mnbdat" in globals() or "gmnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_mnb)==0:
            try:
                val=(mnbdat.named_steps['clfmnb'].class_count_)
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_count_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gmnb.best_estimator_.named_steps['clfmnb'].class_count_)    
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_count_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	   

  
    def class_log_prior_mnbca(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "mnbdat" in globals() or "gmnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_mnb)==0:
            try:
                val=(mnbdat.named_steps['clfmnb'].class_log_prior_)
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_log_prior_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gmnb.best_estimator_.named_steps['clfmnb'].class_log_prior_)    
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_log_prior_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	     
    def classes_mnbca(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "mnbdat" in globals() or "gmnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_mnb)==0:
            try:
                val=(mnbdat.named_steps['clfmnb'].classes_)
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gmnb.best_estimator_.named_steps['clfmnb'].classes_)    
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	     
    def feature_count_mnbca(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "mnbdat" in globals() or "gmnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_mnb)==0:
            try:
                val=(mnbdat.named_steps['clfmnb'].feature_count_)
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_count_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gmnb.best_estimator_.named_steps['clfmnb'].feature_count_)    
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_count_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	     
    def feature_log_prob_mnbca(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "mnbdat" in globals() or "gmnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_mnb)==0:
            try:
                val=(mnbdat.named_steps['clfmnb'].feature_log_prob_)
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_log_prob_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gmnb.best_estimator_.named_steps['clfmnb'].feature_log_prob_)    
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_log_prob_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	     
    def n_features_in_mnbca(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "mnbdat" in globals() or "gmnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_mnb)==0:
            try:
                val=(mnbdat.named_steps['clfmnb'].n_features_in_)
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gmnb.best_estimator_.named_steps['clfmnb'].n_features_in_)    
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	     
    def feature_names_in_mnbca(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "mnbdat" in globals() or "gmnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_mnb)==0:
            try:
                val=(mnbdat.named_steps['clfmnb'].feature_names_in_)
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gmnb.best_estimator_.named_steps['clfmnb'].feature_names_in_)    
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	   
#Randomforest Attributes            	             	       
  
    def oob_decision_function_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].oob_decision_function_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]oob_decision_function_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].oob_decision_function_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]oob_decision_function_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
  
    def base_estimator_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].base_estimator_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]base_estimator_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].base_estimator_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]base_estimator_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
  
    def estimators_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].estimators_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]estimators_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].estimators_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]estimators_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	     
  
    def classes_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].classes_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].classes_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   

  
    def n_features_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].n_features_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].n_features_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   	         
    def n_classes_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].n_classes_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].n_classes_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   

  
    def n_features_in_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].n_features_in_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].n_features_in_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
  
    def feature_names_in_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].feature_names_in_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].feature_names_in_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
  
    def n_outputs_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].n_outputs_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_outputs_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].n_outputs_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_outputs_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
  
    def feature_importances_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].feature_importances_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_importances_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].feature_importances_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_importances_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   

  
    def oob_score_rdfcc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdfcdat" in globals() or "grdfc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdfc)==0:
            try:
                val=(rdfcdat.named_steps['clfrdfc'].oob_score_)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]oob_score_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdfc.best_estimator_.named_steps['clfrdfc'].oob_score_)    
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]oob_score_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   

      
#BernoulliNB
  
    def class_count_bnnb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "bnnbdat" in globals() or "gbnnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_bnnb)==0:
            try:
                val=(bnnbdat.named_steps['clfbnnb'].class_count_)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_count_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gbnnb.best_estimator_.named_steps['clfbnnb'].class_count_)    
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_count_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	   
            	                        	
  
    def class_log_prior_bnnb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "bnnbdat" in globals() or "gbnnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_bnnb)==0:
            try:
                val=(bnnbdat.named_steps['clfbnnb'].class_log_prior_)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_log_prior_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gbnnb.best_estimator_.named_steps['clfbnnb'].class_log_prior_)    
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_log_prior_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def class_log_prior_bnnb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "bnnbdat" in globals() or "gbnnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_bnnb)==0:
            try:
                val=(bnnbdat.named_steps['clfbnnb'].class_log_prior_)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_log_prior_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gbnnb.best_estimator_.named_steps['clfbnnb'].class_log_prior_)    
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_log_prior_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def classes_bnnb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "bnnbdat" in globals() or "gbnnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_bnnb)==0:
            try:
                val=(bnnbdat.named_steps['clfbnnb'].classes_)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gbnnb.best_estimator_.named_steps['clfbnnb'].classes_)    
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_count_bnnb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "bnnbdat" in globals() or "gbnnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_bnnb)==0:
            try:
                val=(bnnbdat.named_steps['clfbnnb'].feature_count_)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_count_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gbnnb.best_estimator_.named_steps['clfbnnb'].feature_count_)    
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_count_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_log_prob_bnnb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "bnnbdat" in globals() or "gbnnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_bnnb)==0:
            try:
                val=(bnnbdat.named_steps['clfbnnb'].feature_log_prob_)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_log_prob_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gbnnb.best_estimator_.named_steps['clfbnnb'].feature_log_prob_)    
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_log_prob_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_features_in_bnnb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "bnnbdat" in globals() or "gbnnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_bnnb)==0:
            try:
                val=(bnnbdat.named_steps['clfbnnb'].n_features_in_)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gbnnb.best_estimator_.named_steps['clfbnnb'].n_features_in_)    
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass        
            	
  
    def feature_names_in_bnnb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "bnnbdat" in globals() or "gbnnb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_bnnb)==0:
            try:
                val=(bnnbdat.named_steps['clfbnnb'].feature_names_in_)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gbnnb.best_estimator_.named_steps['clfbnnb'].feature_names_in_)    
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	               	                                                    

#OneClassSVM Attributes

  
    def class_weight_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].class_weight_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_weight_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].class_weight_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_weight_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	   
            	

  
    def coef_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].coef_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].coef_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def dual_coef_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].dual_coef_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]dual_coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].dual_coef_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]dual_coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def fit_status_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].fit_status_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]fit_status_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].fit_status_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]fit_status_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def intercept_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].intercept_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].intercept_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_names_in_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].feature_names_in_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].feature_names_in_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_support_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].n_support_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_support_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].n_support_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_support_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def offset_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].offset_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]offset_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].offset_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]offset_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def shape_fit_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].shape_fit_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]shape_fit_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].shape_fit_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]shape_fit_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def support_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].support_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].support_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def support_vectors_onesvm(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "onesvmdat" in globals() or "gonesvm" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_onesvm)==0:
            try:
                val=(onesvmdat.named_steps['clfonesvm'].support_vectors_)
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_vectors_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gonesvm.best_estimator_.named_steps['clfonesvm'].support_vectors_)    
                self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_vectors_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.onesvm_model.ids.out_grid_onesvm.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
        

#NuSVC Attributes 

  
    def n_features_in_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].n_features_in_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].n_features_in_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
  
    def class_weight_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].class_weight_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_weight_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].class_weight_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_weight_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
  
    def classes_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].classes_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].classes_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
  
    def coef_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].coef_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].coef_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
  
    def dual_coef_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].dual_coef_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]dual_coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].dual_coef_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]dual_coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   


    def fit_status_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].fit_status_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]fit_status_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].fit_status_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]fit_status_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
  
    def intercept_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].intercept_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].intercept_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            

  
    def support_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].support_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].support_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   

  
    def support_vectors_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].support_vectors_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_vectors_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].support_vectors_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]support_vectors_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	    
 
    def n_support_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].n_support_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_support_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].n_support_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_support_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
            	
    def probA_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].probA_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]probA_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].probA_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]probA_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                           
            	
            	            	            	
  
    def probB_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].probB_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]probB_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].probB_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]probB_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   

  
    def shape_fit_nusvc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nusvcdat" in globals() or "gnusvc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nusvc)==0:
            try:
                val=(nusvcdat.named_steps['clfnusvc'].shape_fit_)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]shape_fit_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnusvc.best_estimator_.named_steps['clfnusvc'].shape_fit_)    
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]shape_fit_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   
            	
            	            	            	            	            	
     	            	            	            	
#GaussianNB Attributes 

  
    def class_count_ganb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "ganbdat" in globals() or "gganb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_ganb)==0:
            try:
                val=(ganbdat.named_steps['clfganb'].class_count_)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_count_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gganb.best_estimator_.named_steps['clfganb'].class_count_)    
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_count_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	   
  
    def class_prior_ganb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "ganbdat" in globals() or "gganb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_ganb)==0:
            try:
                val=(ganbdat.named_steps['clfganb'].class_prior_)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_prior_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gganb.best_estimator_.named_steps['clfganb'].class_prior_)    
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_prior_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def classes_ganb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "ganbdat" in globals() or "gganb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_ganb)==0:
            try:
                val=(ganbdat.named_steps['clfganb'].classes_)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gganb.best_estimator_.named_steps['clfganb'].classes_)    
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def epsilon_ganb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "ganbdat" in globals() or "gganb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_ganb)==0:
            try:
                val=(ganbdat.named_steps['clfganb'].epsilon_)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]epsilon_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gganb.best_estimator_.named_steps['clfganb'].epsilon_)    
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]epsilon_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_features_in_ganb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "ganbdat" in globals() or "gganb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_ganb)==0:
            try:
                val=(ganbdat.named_steps['clfganb'].n_features_in_)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gganb.best_estimator_.named_steps['clfganb'].n_features_in_)    
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_names_in_ganb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "ganbdat" in globals() or "gganb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_ganb)==0:
            try:
                val=(ganbdat.named_steps['clfganb'].feature_names_in_)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gganb.best_estimator_.named_steps['clfganb'].feature_names_in_)    
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def var_ganb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "ganbdat" in globals() or "gganb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_ganb)==0:
            try:
                val=(ganbdat.named_steps['clfganb'].var_)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]var_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gganb.best_estimator_.named_steps['clfganb'].var_)    
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]var_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def theta_ganb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "ganbdat" in globals() or "gganb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_ganb)==0:
            try:
                val=(ganbdat.named_steps['clfganb'].theta_)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]theta_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gganb.best_estimator_.named_steps['clfganb'].theta_)    
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]theta_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  

          	          	
#ComplementNB

  
    def class_count_conb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "conbdat" in globals() or "gconb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_conb)==0:
            try:
                val=(conbdat.named_steps['clfconb'].class_count_)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_count_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gconb.best_estimator_.named_steps['clfconb'].class_count_)    
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_count_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def class_log_prior_conb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "conbdat" in globals() or "gconb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_conb)==0:
            try:
                val=(conbdat.named_steps['clfconb'].class_log_prior_)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_log_prior_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gconb.best_estimator_.named_steps['clfconb'].class_log_prior_)    
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]class_log_prior_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def classes_conb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "conbdat" in globals() or "gconb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_conb)==0:
            try:
                val=(conbdat.named_steps['clfconb'].classes_)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gconb.best_estimator_.named_steps['clfconb'].classes_)    
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_all_conb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "conbdat" in globals() or "gconb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_conb)==0:
            try:
                val=(conbdat.named_steps['clfconb'].feature_all_)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_all_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gconb.best_estimator_.named_steps['clfconb'].feature_all_)    
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_all_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_count_conb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "conbdat" in globals() or "gconb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_conb)==0:
            try:
                val=(conbdat.named_steps['clfconb'].feature_count_)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_count_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gconb.best_estimator_.named_steps['clfconb'].feature_count_)    
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_count_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_log_prob_conb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "conbdat" in globals() or "gconb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_conb)==0:
            try:
                val=(conbdat.named_steps['clfconb'].feature_log_prob_)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_log_prob_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gconb.best_estimator_.named_steps['clfconb'].feature_log_prob_)    
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_log_prob_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def n_features_in_conb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "conbdat" in globals() or "gconb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_conb)==0:
            try:
                val=(conbdat.named_steps['clfconb'].n_features_in_)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gconb.best_estimator_.named_steps['clfconb'].n_features_in_)    
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
    def feature_names_in_conb(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "conbdat" in globals() or "gconb" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_conb)==0:
            try:
                val=(conbdat.named_steps['clfconb'].feature_names_in_)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gconb.best_estimator_.named_steps['clfconb'].feature_names_in_)    
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
  
#RidgeClassifier Attributes 


   
    def coef_rdgcl(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdgcldat" in globals() or "grdgcl" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdgcl)==0:
            try:
                val=(rdgcldat.named_steps['clfrdgcl'].coef_)
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdgcl.best_estimator_.named_steps['clfrdgcl'].coef_)    
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]coef_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	                     	           	  	           	  	
   
    def intercept_rdgcl(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdgcldat" in globals() or "grdgcl" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdgcl)==0:
            try:
                val=(rdgcldat.named_steps['clfrdgcl'].intercept_)
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdgcl.best_estimator_.named_steps['clfrdgcl'].intercept_)    
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]intercept_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	                     	           	  	           	  	
   
    def n_iter_rdgcl(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdgcldat" in globals() or "grdgcl" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdgcl)==0:
            try:
                val=(rdgcldat.named_steps['clfrdgcl'].n_iter_)
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_iter_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdgcl.best_estimator_.named_steps['clfrdgcl'].n_iter_)    
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_iter_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	                     	           	  	           	  	
   
    def classes_rdgcl(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdgcldat" in globals() or "grdgcl" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdgcl)==0:
            try:
                val=(rdgcldat.named_steps['clfrdgcl'].classes_)
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdgcl.best_estimator_.named_steps['clfrdgcl'].classes_)    
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	                     	           	  	           	  	
   
    def n_features_in_rdgcl(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdgcldat" in globals() or "grdgcl" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdgcl)==0:
            try:
                val=(rdgcldat.named_steps['clfrdgcl'].n_features_in_)
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdgcl.best_estimator_.named_steps['clfrdgcl'].n_features_in_)    
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	                     	           	  	           	  	
   
    def feature_names_in_rdgcl(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "rdgcldat" in globals() or "grdgcl" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_rdgcl)==0:
            try:
                val=(rdgcldat.named_steps['clfrdgcl'].feature_names_in_)
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(grdgcl.best_estimator_.named_steps['clfrdgcl'].feature_names_in_)    
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
            	                     	           	  	           	  	

#NearestCentroid Attributes
            	                     	              	
  
    def centroids_nrctc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nrctcdat" in globals() or "gnrctc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nrctc)==0:
            try:
                val=(nrctcdat.named_steps['clfnrctc'].centroids_)
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]centroids_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnrctc.best_estimator_.named_steps['clfnrctc'].centroids_)    
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]centroids_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	   
  
    def n_features_in_nrctc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nrctcdat" in globals() or "gnrctc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nrctc)==0:
            try:
                val=(nrctcdat.named_steps['clfnrctc'].n_features_in_)
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnrctc.best_estimator_.named_steps['clfnrctc'].n_features_in_)    
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_features_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	   
	   
  
    def classes_nrctc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nrctcdat" in globals() or "gnrctc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nrctc)==0:
            try:
                val=(nrctcdat.named_steps['clfnrctc'].classes_)
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnrctc.best_estimator_.named_steps['clfnrctc'].classes_)    
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	   
	   
  
    def feature_names_in_nrctc(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "nrctcdat" in globals() or "gnrctc" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_nrctc)==0:
            try:
                val=(nrctcdat.named_steps['clfnrctc'].feature_names_in_)
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gnrctc.best_estimator_.named_steps['clfnrctc'].feature_names_in_)    
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                  
	   
	   
# DecisionTree Attributes 


  
  
    def tree_dt(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "dtredat" in globals() or "gdtre" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_dtre)==0:
            try:
                val=(dtredat.named_steps['clfdt'].tree_)
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]tree_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gdtre.best_estimator_.named_steps['clfdt'].tree_)    
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]tree_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	                
  
    def classes_dt(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "dtredat" in globals() or "gdtre" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_dtre)==0:
            try:
                val=(dtredat.named_steps['clfdt'].classes_)
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gdtre.best_estimator_.named_steps['clfdt'].classes_)    
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            	   

  
    def feature_importances_dt(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "dtredat" in globals() or "gdtre" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_dtre)==0:
            try:
                val=(dtredat.named_steps['clfdt'].feature_importances_)
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_importances_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gdtre.best_estimator_.named_steps['clfdt'].feature_importances_)    
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_importances_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
	   

    def n_classes_dt(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "dtredat" in globals() or "gdtre" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_dtre)==0:
            try:
                val=(dtredat.named_steps['clfdt'].n_classes_)
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_classes_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gdtre.best_estimator_.named_steps['clfdt'].n_classes_)    
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_classes_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                      
            	
            	
  
    def max_features_dt(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "dtredat" in globals() or "gdtre" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_dtre)==0:
            try:
                val=(dtredat.named_steps['clfdt'].max_features_)
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]max_features_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gdtre.best_estimator_.named_steps['clfdt'].max_features_)    
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]max_features_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                            
            	
  
    def feature_names_in_dt(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "dtredat" in globals() or "gdtre" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_dtre)==0:
            try:
                val=(dtredat.named_steps['clfdt'].feature_names_in_)
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gdtre.best_estimator_.named_steps['clfdt'].feature_names_in_)    
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]feature_names_in_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                        	
            	
  
    def n_outputs_dt(self):
        
        self.output_crd = Factory.output_crd()        
        self.output_crd_err = Factory.output_crd_err()
        
        if "dtredat" in globals() or "gdtre" in globals():
        	pass
        else:
        	return
        	                              	        
        if  len(grid_params_dtre)==0:
            try:
                val=(dtredat.named_steps['clfdt'].n_outputs_)
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_outputs_"
                self.output_crd.ids.output_text.text=str(val)                             
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception as e:
            	pass          
            	   
        else:
            try:
                val1=(gdtre.best_estimator_.named_steps['clfdt'].n_outputs_)    
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]n_outputs_"
                self.output_crd.ids.output_text.text=str(val1)                                       
            except AttributeError as a:
            	self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
            	self.output_crd_err.ids.output_text_err_heading.text="[b]Error"
            	self.output_crd_err.ids.output_text_err.text=str(a)	    
            except Exception:
            	pass                                        	
            	
#saving SVC model

    def svm_save(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "svcdt" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-SVC.joblib.pkl"
                joblib.dump(svcdt,filename)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)
            except:
                pass

    def lsvc_save(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "lsvcdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-LinearSVC.joblib.pkl"
                joblib.dump(lsvcdat,filename)
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def nu_save(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "nusvcdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-NuSVC.joblib.pkl"
                joblib.dump(nusvcdat,filename)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def knn_save(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "knndat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-KNeighboursClassifier.joblib.pkl"
                joblib.dump(knndat,filename)
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass


    def dt_save(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "dtredat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-DecisionTreeClassifier.joblib.pkl"
                joblib.dump(dtredat,filename)
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)


            except:
                pass

    def rndmfrst_save(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "rdfcdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-RandomForestClassifier.joblib.pkl"
                joblib.dump(rdfcdat,filename)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_random_forest.ids.out_grid_rdfc .add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)


            except Exception as e:
                print(e)

    def grbst_save(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "grdcdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-GradientBoostingClassifier.joblib.pkl"
                joblib.dump(grdcdat,filename)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)


            except:
                pass


    def rdgcl_save(self):


        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "rdgcldat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-RidgeClassifier.joblib.pkl"
                joblib.dump(rdgcldat,filename)
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)


            except:
                pass


    def log_save(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "logregdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-LogisticRegression.joblib.pkl"
                joblib.dump(logregdat,filename)
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)


            except:
                pass


    def sgd_save(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "sgdcdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-SGDClassifier.joblib.pkl"
                joblib.dump(sgdcdat,filename)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass


    def mnnbc_save(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "mnbdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-MultinomialNB.joblib.pkl"
                joblib.dump(mnbdat,filename)
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)


            except:
                pass



    def bnnb_save(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "bnnbdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-BernoulliNB.joblib.pkl"
                joblib.dump(bnnbdat,filename)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)



            except:
                pass


    def ganb_save(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "ganbdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-GaussianNB.joblib.pkl"
                joblib.dump(ganbdat,filename)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)


            except:
                pass

    def conb_save(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "conbdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-ComplementNB.joblib.pkl"
                joblib.dump(conbdat,filename)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def nrctc_save(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "nrctcdat" in globals():
            try:
                id=str(uuid.uuid4())[:8]
                filename=path1+"/"+id+"-NearestCentroid.joblib.pkl"
                joblib.dump(nrctcdat,filename)
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text="[b]model saved at"
                self.output_crd.ids.output_text.text=str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def svm_save_gs(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gsvm" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-SVC.joblib.pkl"
                joblib.dump(gsvm, filename)
                self.svm_model.ids.out_grid_svc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.svm_model.ids.out_grid_svc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)
            except:
                pass

          
    def lsvc_save_gs(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "glsvc" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-LinearSVC.joblib.pkl"
                joblib.dump(glsvc, filename)
                self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_linear_svc.ids.out_grid_lsvc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)
            except:
                pass

    def nu_save_gs(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gnusvc" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-NuSVC.joblib.pkl"
                joblib.dump(gnusvc, filename)
                self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.nu_model.ids.out_grid_nusvc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def knn_save_gs(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gknn" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-KNeighboursClassifier.joblib.pkl"
                joblib.dump(gknn, filename)
                self.model_knn.ids.out_grid_knn.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)
                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_knn.ids.out_grid_knn.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def dt_save_gs(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gdtre" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-DecisionTreeClassifier.joblib.pkl"
                joblib.dump(gdtre, filename)
                self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_dt.ids.out_grid_dtre.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def rndmfrst_save_gs(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "grdfc" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-RandomForestClassifier.joblib.pkl"
                joblib.dump(grdfc, filename)
                self.model_random_forest.ids.out_grid_rdfc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)
                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_random_forest.ids.out_grid_rdfc .add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except Exception as e:
                print(e)

    def grbst_save_gs(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "ggrdc" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-GradientBoostingClassifier.joblib.pkl"
                joblib.dump(ggrdc, filename)
                self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_gradient_boosting.ids.out_grid_grdc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def rdgcl_save_gs(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "grdgcl" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-RidgeClassifier.joblib.pkl"
                joblib.dump(grdgcl, filename)
                self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.rdgcl_model.ids.out_grid_rdgcl.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def log_save_gs(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "glogreg" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-LogisticRegression.joblib.pkl"
                joblib.dump(glogreg, filename)
                self.model_log.ids.out_grid_logreg.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_log.ids.out_grid_logreg.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)


            except:
                pass

    def sgd_save_gs(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gsgdc" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-SGDClassifier.joblib.pkl"
                joblib.dump(gsgdc, filename)
                self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.model_sgd.ids.out_grid_sgdc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def mnnbc_save_gs(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gmnb" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-MultinomialNB.joblib.pkl"
                joblib.dump(gmnb, filename)
                self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.mnb_model.ids.out_grid_mnb.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)


            except:
                pass

    def bnnb_save_gs(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gbnnb" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-BernoulliNB.joblib.pkl"
                joblib.dump(gbnnb, filename)
                self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)


                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.bnnb_model.ids.out_grid_bnnb.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def ganb_save_gs(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gganb" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-GaussianNB.joblib.pkl"
                joblib.dump(gganb, filename)
                self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.ganb_model.ids.out_grid_ganb.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def conb_save_gs(self):
        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gconb" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-ComplementNB.joblib.pkl"
                joblib.dump(gconb, filename)
                self.conb_model.ids.out_grid_conb.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.conb_model.ids.out_grid_conb.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass

    def nrctc_save_gs(self):

        self.output_crd = Factory.output_crd()
        self.output_crd_err = Factory.output_crd_err()
        if "gnrctc" in globals():
            try:
                id = str(uuid.uuid4())[:8]
                filename = path1 + "/" + id + "-NearestCentroid.joblib.pkl"
                joblib.dump(gnrctc, filename)
                self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd)
                self.output_crd.ids.output_text_heading.text = "[b]model saved at"
                self.output_crd.ids.output_text.text = str(filename)

                filename2 = path1 + "/" + id + "-preprocessing.joblib.pkl"
                if len(gbl_pl)==0:
                    pass
                else:
                    try:
                        joblib.dump(gbl_pl,filename2)
                        self.nrctc_model.ids.out_grid_nrctc.add_widget(self.output_crd_err)
                        self.output_crd_err.ids.output_text_err_heading.text = "[b]preprocessing pipeline"
                        self.output_crd_err.ids.output_text_err.text = str(filename2)
                    except Exception as e:
                        print(e)

            except:
                pass


Arc().run()